(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    434902,       8371]
NotebookOptionsPosition[    424179,       8217]
NotebookOutlinePosition[    424559,       8233]
CellTagsIndexPosition[    424516,       8230]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Logbook 16014073
Cellular automata II - Modelling Traffic
by: Gergely Eory\
\>", "Title",
 CellChangeTimes->{{3.730534016658504*^9, 
  3.7305340515093317`*^9}},ExpressionUUID->"8858dda4-f4d7-4782-860f-\
7a9368ded1c8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Unprotect", "[", "$ProcessorCount", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"$ProcessorCount", "=", "4"}], ";"}], "      ", 
  RowBox[{"(*", 
   RowBox[{
   "set", " ", "this", " ", "to", " ", "the", " ", "maximum", " ", "number", 
    " ", "of", " ", "threads", " ", "available"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LaunchKernels", "[", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.7305340790531254`*^9, 3.7305340810490274`*^9}, {
  3.7305484064579144`*^9, 
  3.7305484268244596`*^9}},ExpressionUUID->"766f142e-b349-4954-9ea2-\
12dd0743db7d"],

Cell[BoxData[
 TemplateBox[{
  "LaunchKernels","nodef",
   "\"Some subkernels are already running. Not launching default kernels \
again.\"",2,80,16,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7307050106021423`*^9, 
  3.7308009744026957`*^9},ExpressionUUID->"ee4dcc1e-fa20-44cd-b8f9-\
c87677884d3b"]
}, Open  ]],

Cell["\<\
The first bit of code is not directly related to the workings of the project, \
yet it is essential to make it more efficient to run. The first three lines \
tell Mathematica to use all the 4 processing threads available on my CPU, and \
launches the appropriate number of parallel kernels.  Many of the \
calculations used during the project are Table functions to generate series \
of data for different parameters. In most cases, the Table function is \
embarrassingly parallel, as the results of one value of the iterator variable \
do not depend on the value of the variable at any other iterations. Instead \
they are independent, so can be calculated in parallel.
The last line sets the Mathematica\[CloseCurlyQuote]s Directory variable to \
the location the notebook is stored. When exporting or importing files, \
Mathematica will automatically look for files in this directory, negating the \
need for specifying a complete filepath, and ensures smooth operation on any \
system, as long as the data files are stored in the same directory as the \
notebook. \
\>", "Text",
 CellChangeTimes->{{3.7305341218426495`*^9, 3.7305341753942614`*^9}, {
   3.7305343171486473`*^9, 3.7305345891789513`*^9}, {3.730534816983737*^9, 
   3.7305349205717807`*^9}, 
   3.730548400308921*^9},ExpressionUUID->"e13be771-4f13-4d2a-bac8-\
4dea3acee8d5"],

Cell[CellGroupData[{

Cell["2018. Jan. 28.", "Subsubsection",
 CellChangeTimes->{3.7305400289321084`*^9, 
  3.730540102843357*^9},ExpressionUUID->"2ae6912b-93ab-450f-a30d-\
0b2f3d4cf02e"],

Cell["\<\
The Cellular Automaton model is bases on an initial configuration of cells, \
and an update function that generates new iterations of the cells, based on \
the current state. Cells in this model are a list of 2 elements.\
\>", "Text",
 CellChangeTimes->{{3.7305349536025906`*^9, 3.730535037646984*^9}, {
   3.730535196256198*^9, 3.7305352047862625`*^9}, {3.7305355913207765`*^9, 
   3.7305356403199825`*^9}, {3.73054001694246*^9, 3.7305400189298205`*^9}, {
   3.730540676198203*^9, 3.730540732130692*^9}, 
   3.730540795257904*^9},ExpressionUUID->"f46cdc34-2d5c-4ab7-804a-\
7c1e081c645c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cell", "=", 
  RowBox[{"{", 
   RowBox[{"isCar", ",", "speed"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"car", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "4"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"emptyCell", "=", " ", 
  RowBox[{"{", 
   RowBox[{"0", ",", "0"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.730540758455392*^9, 3.730540779722988*^9}, {
  3.730540888737954*^9, 
  3.7305409237981453`*^9}},ExpressionUUID->"d9b37fea-9315-4ae8-8843-\
0457013d65ae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"isCar", ",", "speed"}], "}"}]], "Output",
 CellChangeTimes->{3.730540863321021*^9, 3.730540924490564*^9, 
  3.730542070290327*^9, 3.7305514881678085`*^9, 3.7306418896571875`*^9, 
  3.7307050106959124`*^9, 
  3.730800974528143*^9},ExpressionUUID->"8c1a0f7f-c0db-41eb-a5e6-\
49c2a73d4c3f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.730540863321021*^9, 3.730540924490564*^9, 
  3.730542070290327*^9, 3.7305514881678085`*^9, 3.7306418896571875`*^9, 
  3.7307050106959124`*^9, 
  3.7308009745321455`*^9},ExpressionUUID->"c3a1929c-67a8-4252-8aeb-\
94c7a3b6a0c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.730540863321021*^9, 3.730540924490564*^9, 
  3.730542070290327*^9, 3.7305514881678085`*^9, 3.7306418896571875`*^9, 
  3.7307050106959124`*^9, 
  3.7308009745351477`*^9},ExpressionUUID->"59a753b2-2f36-42c6-8cce-\
3fa61f4b5c6a"]
}, Open  ]],

Cell["\<\
The first element of the list is 1 if a car is occupying the given cell, and \
0 otherwise. The second element specifies the speed of the car in the cell. \
The above example shows a car travelling with v=4, and an empty cell of the \
road.
The first function generates a initial configuration of the cells, called a \
\[OpenCurlyDoubleQuote]seed\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.73054079013427*^9, 3.730540853439427*^9}, {
  3.7305409408784356`*^9, 
  3.7305409611591196`*^9}},ExpressionUUID->"7d47da4e-e00c-4ad3-b043-\
98c7cba46501"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateSeed", "[", 
   RowBox[{"freq_", ",", "v_", ",", "t_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"frequency", "=", "freq"}], ",", 
      RowBox[{"vmax", "=", "v"}], ",", 
      RowBox[{"track", "=", "t"}]}], "}"}], ",", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"roadd", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", "track"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"RandomReal", "[", "]"}], "<", "frequency"}], ",", 
          RowBox[{
           RowBox[{"roadd", "[", 
            RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"roadd", "[", 
            RowBox[{"[", "i", "]"}], "]"}], " ", "\[Equal]", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], ",", " ", 
          RowBox[{
           RowBox[{"roadd", "[", 
            RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"RandomInteger", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", "vmax"}], "}"}], "]"}]}], "}"}]}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "roadd"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.73053565252462*^9, 3.7305356528771286`*^9}, {
  3.730535708102074*^9, 3.7305357125532007`*^9}, {3.73053610261605*^9, 
  3.730536103288213*^9}},ExpressionUUID->"90fcef68-8f83-4e36-81c0-\
4babe48f1f52"],

Cell["\<\
It creates a road of length t,then it takes the density of traffic, and fills \
up each of the cells with cars according to this probability. Then for each \
car it assigns a random initial speed between 1 and the maximum allowed speed \
on the road. This function does not guarantee the exact number of cars on the \
road, but fills up each spot probabilistically. For investigating effects of \
parameters as a function of traffic density, a well-known controlled \
parameter is needed.
An updated version of the function was implemented on 2018.Jan.31\
\>", "Text",
 CellChangeTimes->{{3.730535724688527*^9, 3.7305358644573803`*^9}, {
  3.730536043004081*^9, 3.730536080738982*^9}, {3.730536145845484*^9, 
  3.7305362245372705`*^9}},ExpressionUUID->"ea323b96-0a2d-4432-8358-\
caf7751eafb8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"generateSeed", "[", 
    RowBox[{"frequency_", ",", "vmax_", ",", "track_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ncars", "=", 
      RowBox[{"Floor", "[", 
       RowBox[{"track", "*", "frequency"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cars", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "[", "track", "]"}], ",", "ncars"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"road", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", "track"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"road", "[", 
         RowBox[{"[", 
          RowBox[{"cars", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncars"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", "i", "]"}], "]"}], " ", "\[Equal]", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], ",", " ", 
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], " ", "=", " ", 
          RowBox[{"RandomInteger", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "vmax"}], "}"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "road", "]"}], ";"}], "\[IndentingNewLine]", 
    ")"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testSeed", "=", 
   RowBox[{"generateSeed", "[", 
    RowBox[{"0.2", ",", "5", ",", "300"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.730536106747843*^9, 3.730536107767534*^9}, {
  3.730539287631278*^9, 
  3.730539288522442*^9}},ExpressionUUID->"0f01e457-7ee4-43cc-a6cb-\
bd78ee44ccc8"],

Cell["\<\
This function first calculates the exact number of cars that need to be \
placed on the road. Then it creates a Random sample, which defines at which \
positions of the road will there be a car. Then it fills up those positions \
on the road, and assigns a random starting speed as the previous one.\
\>", "Text",
 CellChangeTimes->{{3.730540051224476*^9, 
  3.73054005578856*^9}},ExpressionUUID->"72fb3f07-efba-43cf-9970-\
04c08db95b9e"],

Cell["\<\
The next step was the update function, which returns an updated state of the \
road.
The update function to implement was given in the project specification as \
follows:

\[Bullet] If the velocity v of the car is lower than vmax , and the distance \
to the next car ahead is
larger than v + 1, the speed is increased by one.
\[Bullet] If a driver at site i sees the next vehicle at site i+j, with j < \
v, she reduces speed to j \[Minus]1.
\[Bullet] The velocity of each vehicle (if greater than zero) is decreased by \
one with probability p
(\[OpenCurlyQuote]dawdling\[CloseCurlyQuote]).
\[Bullet] Each vehicle is advanced by v sites.\
\>", "Text",
 CellChangeTimes->{{3.730536229116439*^9, 3.730536389988619*^9}, {
  3.730536426696621*^9, 3.7305364399812613`*^9}, {3.7305364849082904`*^9, 
  3.730536546682041*^9}, {3.7305400368327837`*^9, 
  3.7305400458445883`*^9}},ExpressionUUID->"d1efd3ad-4fa0-4211-af19-\
c2b9f772a465"],

Cell[BoxData[
 RowBox[{
  RowBox[{"upd", "[", 
   RowBox[{"lanein_List", ",", 
    RowBox[{"{", 
     RowBox[{"vmax_", ",", "track_", ",", "brakeprob_"}], "}"}]}], "]"}], ":=",
   " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lane", "=", "lanein"}], ";", "\[IndentingNewLine]", 
    RowBox[{"output", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "track"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Equal]", "1"}], " ", "&&",
          " ", 
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], "<", "vmax"}]}], ",", 
        RowBox[{
         RowBox[{"lane", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "2"}], "]"}], "]"}], "+=", "1"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Equal]", "1"}], " ", "&&",
          " ", 
         RowBox[{
          RowBox[{"RandomReal", "[", "]"}], "<", "brakeprob"}], "&&", 
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], ">", "0"}]}], ",", 
        RowBox[{
         RowBox[{"lane", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "2"}], "]"}], "]"}], "-=", "1"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"lane", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"lane", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "+", "j", "-", "1"}], ")"}], ",", "track"}], 
                  "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[Equal]", 
             "1"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"lane", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "2"}], "]"}], "]"}], "=", 
               RowBox[{"(", 
                RowBox[{"j", "-", "1"}], ")"}]}], ";", 
              RowBox[{"Break", "[", "]"}]}], ")"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", 
            RowBox[{"lane", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"lane", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"output", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"Mod", "[", 
             RowBox[{
              RowBox[{"i", "+", 
               RowBox[{"lane", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "2"}], "]"}], "]"}], "-", "1"}], ",", 
              "track"}], "]"}], "+", "1"}], "]"}], "]"}], "=", 
         RowBox[{"lane", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Return", "[", "output", "]"}], ";"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.7305379313202677`*^9, 3.730537951968893*^9}, 
   3.7305379826115065`*^9},ExpressionUUID->"275ed4c3-6a45-4d36-b56d-\
f9a608f9d9fe"],

Cell["\<\
The model assumes a circular road, meaning the cars which leave the road at \
one end would appear at the beginning again with the same velocity. This is \
implemented using modular arithmetic. An thing to note is that modular \
arithmetic is 0-based, but the numbering of elements of a list in Mathematica \
starts with 1. For this reason, when referring to element at position i in \
mod length of the road, we need to  subtract 1 inside the Mod function to \
make it 0-based, and then add 1 outside to get back the correct numbering. 

Then a function is needed to repeatedly apply the update function to generate \
traffic data.\
\>", "Text",
 CellChangeTimes->{{3.7305366406623225`*^9, 3.730536690688224*^9}, {
  3.730536723580433*^9, 3.7305367498301725`*^9}, {3.7305367909444075`*^9, 
  3.730536891001258*^9}, {3.7305369432275805`*^9, 3.7305370061476526`*^9}, {
  3.730537204796143*^9, 3.7305372959187355`*^9}, {3.730537986537443*^9, 
  3.7305380179864736`*^9}},ExpressionUUID->"4c5d2ac6-000a-45e4-96b7-\
167a914a0fa9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"generateTraffic", "[", 
    RowBox[{
    "seed_", ",", "frequency_", ",", "vmax_", ",", "brakeprob_", ",", "trac_",
      ",", "iterations_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"track", "=", "trac"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "seed", "]"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"road", "=", "seed"}], ";", 
           RowBox[{"track", "=", 
            RowBox[{"Length", "[", "seed", "]"}]}]}], ")"}], ",", 
         RowBox[{"road", "=", 
          RowBox[{"generateSeed", "[", 
           RowBox[{"frequency", ",", "vmax", ",", "track"}], "]"}]}]}], "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"traffic", "=", 
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"upd", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"vmax", ",", "track", ",", "brakeprob"}], "}"}]}], 
            "]"}], "&"}], ",", "road", ",", "iterations"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "traffic", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testTraffic", "=", 
   RowBox[{"generateTraffic", "[", 
    RowBox[{
    "testSeed", ",", "0.2", ",", "5", ",", "0.1", ",", "300", ",", "300"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7305380467049665`*^9, 3.730538077825657*^9}, {
  3.7305418705336437`*^9, 
  3.730541871549403*^9}},ExpressionUUID->"8c1ae1cb-c058-4a0b-88b0-\
5143426ad7a5"],

Cell["\<\
This function takes a seed, and applies the update function with the \
specified parameters a chosen number of times, and returns traffic data as a \
list made up of successive states of the road. Alternatively, if a valid seed \
is not specified, the function intrinsically generates a seed matching the \
specified parameters, for cases when different seeds for each simulation are \
desired.
\
\>", "Text",
 CellChangeTimes->{{3.7305381250380926`*^9, 3.7305383561738305`*^9}, {
  3.7305387261332293`*^9, 3.730538740127033*^9}, {3.7305387993661137`*^9, 
  3.7305388167312737`*^9}},ExpressionUUID->"b5d3049a-9c12-4ca6-87a5-\
41f035a4062f"],

Cell["\<\
The next few functions are concerned with plotting and animating the \
calculated data in various ways. As with most Cellular Automata in \
Mathematica, the ArrayPlot function is remarkably useful for creating simple \
visual representations of the data.\
\>", "Text",
 CellChangeTimes->{{3.730538809319145*^9, 3.7305388558207417`*^9}, {
  3.7305389599731274`*^9, 
  3.730539016430549*^9}},ExpressionUUID->"4aaac5c1-4875-4ce1-9fd0-\
eadaa69f2866"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Transpose", "[", "testSeed", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "}"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<testSeed\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Transpose", "[", "testSeed", "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<testSeed speeds\>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.730539209595602*^9, 3.7305392478768373`*^9}, {
  3.730539320491963*^9, 
  3.730539349476198*^9}},ExpressionUUID->"c884a737-1edc-4f7d-85f6-\
6af179585cbf"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 
   0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 
   1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 
   1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 
   1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
   1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
   0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 0, 1}}, {{0, 0}, {300, 1}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotLabel->FormBox["\"testSeed\"", TraditionalForm]]], "Output",
 CellChangeTimes->{{3.730539228615157*^9, 3.730539248267451*^9}, 
   3.730539302225505*^9, {3.7305393415195494`*^9, 3.730539350320568*^9}, 
   3.730540864033723*^9, 3.730542071052498*^9, 3.730551489307369*^9, 
   3.7306418906434774`*^9, 3.730705011444827*^9, 
   3.7308009752224507`*^9},ExpressionUUID->"4c599735-6703-4989-8912-\
b4a7a1cc1eb5"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{1, 5, 5, 0, 3, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
   5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 1, 5, 5, 5, 2, 3, 5, 3, 5, 5, 4, 5, 
   5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 
   4, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 2, 4, 5, 2, 5, 5, 5, 1, 5, 5, 5, 5, 0, 5, 
   5, 5, 4, 5, 5, 0, 5, 1, 4, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 
   5, 5, 5, 1, 5, 0, 4, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 0, 4, 5, 3, 5, 4, 5, 5, 
   5, 5, 5, 5, 5, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 
   5, 5, 5, 5, 3, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 
   5, 1, 5, 5, 5, 1, 5, 3, 5, 2, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 2, 0, 5, 5, 
   5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 3, 1, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 2, 
   5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 
   3, 5, 5, 5, 5, 2, 5, 4, 5, 5, 5, 5, 1, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 
   5, 5, 3, 5}}, {{0, 0}, {300, 1}}, {0, 5}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotLabel->FormBox["\"testSeed speeds\"", TraditionalForm]]], "Output",
 CellChangeTimes->{{3.730539228615157*^9, 3.730539248267451*^9}, 
   3.730539302225505*^9, {3.7305393415195494`*^9, 3.730539350320568*^9}, 
   3.730540864033723*^9, 3.730542071052498*^9, 3.730551489307369*^9, 
   3.7306418906434774`*^9, 3.730705011444827*^9, 
   3.7308009752693253`*^9},ExpressionUUID->"eccdf8be-8111-45cf-8254-\
571fd50df650"]
}, Open  ]],

Cell["\<\
The first plot shows each car with a black dot on the road, while the second \
one shows the speeds they are moving with, with the greyscale color of each \
dot.\
\>", "Text",
 CellChangeTimes->{{3.7305393683338857`*^9, 
  3.730539423788349*^9}},ExpressionUUID->"64ece4b5-0590-4041-8d25-\
8b9b656c6ff2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"createArrayPlot", "[", "trafficin_List", "]"}], ":=", 
    RowBox[{"ArrayPlot", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"trafficin", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "j", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "trafficin", "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"trafficin", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], ",", 
      RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"PixelConstrained", "\[Rule]", "2"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"createLaneAnimation", "[", "trafficin_List", "]"}], ":=", 
    RowBox[{"Animate", "[", 
     RowBox[{
      RowBox[{"ArrayPlot", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"trafficin", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "j", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "1", ",", 
             RowBox[{"Length", "[", 
              RowBox[{"trafficin", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "}"}],
         ",", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Length", "[", "trafficin", "]"}], ",", "1"}], "}"}], ",", 
      RowBox[{"AnimationRunning", "\[Rule]", "False"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"createArrayPlot", "[", "testTraffic", "]"}], "\[IndentingNewLine]", 
 RowBox[{"createLaneAnimation", "[", "testTraffic", "]"}]}], "Input",
 CellChangeTimes->{{3.730539448896217*^9, 3.730539498112712*^9}, {
  3.7305395595665035`*^9, 3.7305396593032303`*^9}, {3.730539903768541*^9, 
  3.7305399069731593`*^9}},ExpressionUUID->"de739df4-bec4-414c-894b-\
2db319ef194b"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
5zAtm/Db9Xj9L/UyHEM=
   "], {{0, 0}, Offset[{600, 602}, {0, 0}]}, {0, 1}],
  AspectRatio->Automatic,
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{600, 602},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotRange->{{0, 600}, {0, 602}},
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{
  3.7305394989386106`*^9, {3.7305395603145723`*^9, 3.7305396600523634`*^9}, 
   3.730539711200404*^9, 3.7305399073503575`*^9, 3.7305408642212377`*^9, 
   3.730541933148779*^9, 3.7305420714275*^9, 3.7305514896497707`*^9, 
   3.730641890909106*^9, 3.730705011616685*^9, 
   3.7308009754099693`*^9},ExpressionUUID->"3f3fd270-535a-484c-98a3-\
ca810198f2d9"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 55, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 301, 1}}, Typeset`size$$ = {
    605., {11., 16.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$9427$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$9427$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ArrayPlot[{
         Table[
          Part[CompressedData["
1:eJztnFt25DiPhO2yayHzPrOZWcK/gdn/23SlnZkiCQQiAFApd3ee0126UCQI
fsRNqvqv//zf//7n4+3t7X/e397++6//fv11/P759uf/v9//nPw5+v6T+321
/urjrz8//px/X3vX+/l66v33cvfjdv3j++zzcf3386mvs/fPddz7c9PVz9us
38ce7/3exvu1zuL9fZVu7HO6Qujiob3Dn7exP55jHUc9XjdH+3XrwdXDqo+j
dsfrTxr+3H/2eVgD67kHS+9TK3st7N+jl4/3t8ca/zreoXv6GPXx4Obtef0p
2ZPm+1jv343scRd6jNZfI97HO87lKcksnTnWkQODT+OJg+a/xn4+cpT8L+ah
DF9ruUo+jzP1ahDznO23ho0+D3wN2v3al8d188fGvz9UPeQYqJIYtWR/aHq4
6lB10JAz7uNJp/Wdg1GWx7obhESE+au8tB6oMmzOb/u6tQex/kdW7bEG/fya
/2/39rS6Pt/z2Oj3Pq/TMiuWUeNJ03Y828xUeXtqftJrDaiaLOrSq6ElZpXH
1mAub2/GHjvcX/ZgrH+f/Hmk2F4c+FpmYLb/bR8fri79jHIqjI5SPKMFW8I7
VaO1tOYxjuv1GVPFxI7TWMIuw3Px9xi6P2nst/fM3NboiZrJl7VS+PYIA5qY
1vcQjRIWDFH1sLnvs7UM5333GmafDFV87HiYrxG9GrF+MJfICsA9uGQo1jNj
W6snJ0p7zvQwA997OBZq4iNa1WVOpAULqfp4B/4BjfL0osfWPFVi7jxEhLNs
byBCiqVb+gqtyphh2s+s9+aeHKr+slaL74Lew4wfPp89+BEaXN/YywpUMdng
QQdmXK5QpeQlxE7/QP6coWq1j4z2UZ/eTO11gz7QziHc9Y807c1LI0yhyl/t
YYzJhkxVGokqPndebMK0JpblH/NVf2Qryoi1v1oFI8MDM11noFQlsHRkRGdG
V0hSg76BquPu0Fb7IflC1RzzRlThuBhIMFpRNzf3qnZjH7ZGCaoOHmeZC6Rq
XRkrslrsHBEBWWvDPB1pw352qjtPMS67k6f+XaqOvpGjCkUx+HfL9oexxp7H
/kOq7N0L9nSgu1Cja0WZ2eNhjEVT5dmeZe9aowz9jFRZESIrw/2pqGalUIU8
vP17rIeRf0y66aQqjK74/o4VZXWPQ0akFZ0iNHdU29YdqYojREaGXVTxhI1U
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
nS9T5dV3Qwsgr4aVw6JxqoSFuhPmZMuOcqXnkVq7MkZv3rFRCysTUajydgo7
F+uKFmFVdIYl4+Vfr/m17lmWSPM6VZm3CVmq7Jl5VCFbrOaD7LysK4zt6NEZ
lsyjkiIMzijS/PqnQhXWby9VR6YQVbYt1vLBTYRttO9BT2T2Hvf6dRZpvo8q
lrAqVd9nRpV3rYbO5/WdAuYSxsmM7chTldkHWcKY+GM+rlOFVqZO1c0GU1Qh
tuo7RXlOtx19cT7Dqi+f+aSr/dtdW68kVXpVbRnpJKqs95ydO0V8jqjYqTLx
9XgmWgt3SJgveSNoVLk7kaxYq1Td/tSp+rCu1m1BgTA5+lHjeY88zj6AsWkv
eHxWqR5mrBazhxBV7792UFV9q7FeSRJG6U2MvHzyyGh+7jmOaheNwjrP2L6y
y4wzkqrb/zdS5Uca1yOsp4LB3+Go8mo3TJ2Hm1NqVgFV7+95qhT7m/IQpxKm
1Za7CGNzpWV04dsYYU5kbIn6usfr8bwOmWDw/RhltQQPYbfqek477vQnR5vD
72nr6YgqQwNEbqzujmdfzxlZ+S2bCYL9JOeF1yas4k+8N0bzO8GIqthi8ZKi
u6l1mai6ndmZCO0H8dubWnRyDcIqu8R9lqAq4oVfhzMIG61v/JaZpSp6e/NT
CSvF8+BZ1VPM/aA1UueVndPznuHT4Vtmjir/b35YV34SYV1ZYkTVQfuyH1zX
waKLm1duTmt1nXnLPM/DvjdLa0vM+IvrENZPlf+ef9V+tG9jquy3SNy8PNnt
68Zs3CovE7Pbf58o/qJhmk+mzp2ImdnnDMKKJB2PrXdn626NrJB3l80M5xbh
zvTq3ua7KH9etrxUdit90UBaLdCnGjNHz1UJw7pgqLK+YnB0LVPlEEbpwpmR
bX3hvHyqLD/oy2RYMHglZ43YmJl9LkMYHjemyqk3Y4+YoqpMmDujo71CVoj5
ezjLirRYsJw1yr4z4kZGhHVRZdebOZvFUIW/ZLCushG7Za9s6RiqdrypmWbg
UOu/L6pIkiOsnyqLH3ucLFUoL4ra2LHV3V5h66NS5fsUbu/Y82NG2BGv4/vK
HZaqsBpqZ0rCdyWZd2xme5eq7/uAkxJVJc8RP6nvRutajjBuxzzPVKpwNXSW
IHzvL8adLGEeVbf/QK3kmRdXqII+Mhldc6NpPQr+msxOHzSkqbKqob4E2nt/
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
D0/HSHc=
           "], $CellContext`i$$, $CellContext`j, 1], {$CellContext`j, 1, 
           Length[
            Part[CompressedData["
1:eJztnFt25DiPhO2yayHzPrOZWcK/gdn/23SlnZkiCQQiAFApd3ee0126UCQI
fsRNqvqv//zf//7n4+3t7X/e397++6//fv11/P759uf/v9//nPw5+v6T+321
/urjrz8//px/X3vX+/l66v33cvfjdv3j++zzcf3386mvs/fPddz7c9PVz9us
38ce7/3exvu1zuL9fZVu7HO6Qujiob3Dn7exP55jHUc9XjdH+3XrwdXDqo+j
dsfrTxr+3H/2eVgD67kHS+9TK3st7N+jl4/3t8ca/zreoXv6GPXx4Obtef0p
2ZPm+1jv343scRd6jNZfI97HO87lKcksnTnWkQODT+OJg+a/xn4+cpT8L+ah
DF9ruUo+jzP1ahDznO23ho0+D3wN2v3al8d188fGvz9UPeQYqJIYtWR/aHq4
6lB10JAz7uNJp/Wdg1GWx7obhESE+au8tB6oMmzOb/u6tQex/kdW7bEG/fya
/2/39rS6Pt/z2Oj3Pq/TMiuWUeNJ03Y828xUeXtqftJrDaiaLOrSq6ElZpXH
1mAub2/GHjvcX/ZgrH+f/Hmk2F4c+FpmYLb/bR8fri79jHIqjI5SPKMFW8I7
VaO1tOYxjuv1GVPFxI7TWMIuw3Px9xi6P2nst/fM3NboiZrJl7VS+PYIA5qY
1vcQjRIWDFH1sLnvs7UM5333GmafDFV87HiYrxG9GrF+MJfICsA9uGQo1jNj
W6snJ0p7zvQwA997OBZq4iNa1WVOpAULqfp4B/4BjfL0osfWPFVi7jxEhLNs
byBCiqVb+gqtyphh2s+s9+aeHKr+slaL74Lew4wfPp89+BEaXN/YywpUMdng
QQdmXK5QpeQlxE7/QP6coWq1j4z2UZ/eTO11gz7QziHc9Y807c1LI0yhyl/t
YYzJhkxVGokqPndebMK0JpblH/NVf2Qryoi1v1oFI8MDM11noFQlsHRkRGdG
V0hSg76BquPu0Fb7IflC1RzzRlThuBhIMFpRNzf3qnZjH7ZGCaoOHmeZC6Rq
XRkrslrsHBEBWWvDPB1pw352qjtPMS67k6f+XaqOvpGjCkUx+HfL9oexxp7H
/kOq7N0L9nSgu1Cja0WZ2eNhjEVT5dmeZe9aowz9jFRZESIrw/2pqGalUIU8
vP17rIeRf0y66aQqjK74/o4VZXWPQ0akFZ0iNHdU29YdqYojREaGXVTxhI1U
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
nS9T5dV3Qwsgr4aVw6JxqoSFuhPmZMuOcqXnkVq7MkZv3rFRCysTUajydgo7
F+uKFmFVdIYl4+Vfr/m17lmWSPM6VZm3CVmq7Jl5VCFbrOaD7LysK4zt6NEZ
lsyjkiIMzijS/PqnQhXWby9VR6YQVbYt1vLBTYRttO9BT2T2Hvf6dRZpvo8q
lrAqVd9nRpV3rYbO5/WdAuYSxsmM7chTldkHWcKY+GM+rlOFVqZO1c0GU1Qh
tuo7RXlOtx19cT7Dqi+f+aSr/dtdW68kVXpVbRnpJKqs95ydO0V8jqjYqTLx
9XgmWgt3SJgveSNoVLk7kaxYq1Td/tSp+rCu1m1BgTA5+lHjeY88zj6AsWkv
eHxWqR5mrBazhxBV7792UFV9q7FeSRJG6U2MvHzyyGh+7jmOaheNwjrP2L6y
y4wzkqrb/zdS5Uca1yOsp4LB3+Go8mo3TJ2Hm1NqVgFV7+95qhT7m/IQpxKm
1Za7CGNzpWV04dsYYU5kbIn6usfr8bwOmWDw/RhltQQPYbfqek477vQnR5vD
72nr6YgqQwNEbqzujmdfzxlZ+S2bCYL9JOeF1yas4k+8N0bzO8GIqthi8ZKi
u6l1mai6ndmZCO0H8dubWnRyDcIqu8R9lqAq4oVfhzMIG61v/JaZpSp6e/NT
CSvF8+BZ1VPM/aA1UueVndPznuHT4Vtmjir/b35YV34SYV1ZYkTVQfuyH1zX
waKLm1duTmt1nXnLPM/DvjdLa0vM+IvrENZPlf+ef9V+tG9jquy3SNy8PNnt
68Zs3CovE7Pbf58o/qJhmk+mzp2ImdnnDMKKJB2PrXdn626NrJB3l80M5xbh
zvTq3ua7KH9etrxUdit90UBaLdCnGjNHz1UJw7pgqLK+YnB0LVPlEEbpwpmR
bX3hvHyqLD/oy2RYMHglZ43YmJl9LkMYHjemyqk3Y4+YoqpMmDujo71CVoj5
ezjLirRYsJw1yr4z4kZGhHVRZdebOZvFUIW/ZLCushG7Za9s6RiqdrypmWbg
UOu/L6pIkiOsnyqLH3ucLFUoL4ra2LHV3V5h66NS5fsUbu/Y82NG2BGv4/vK
HZaqsBpqZ0rCdyWZd2xme5eq7/uAkxJVJc8RP6nvRutajjBuxzzPVKpwNXSW
IHzvL8adLGEeVbf/QK3kmRdXqII+Mhldc6NpPQr+msxOHzSkqbKqob4E2nt/
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
D0/HSHc=
             "], 1]]}]}, ImageSize -> Large], 
      "Specifications" :> {{$CellContext`i$$, 1, 301, 1, AnimationRunning -> 
         False, AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{658., {52., 59.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.7305394989386106`*^9, {3.7305395603145723`*^9, 3.7305396600523634`*^9}, 
   3.730539711200404*^9, 3.7305399073503575`*^9, 3.7305408642212377`*^9, 
   3.730541933148779*^9, 3.7305420714275*^9, 3.7305514896497707`*^9, 
   3.730641890909106*^9, 3.730705011616685*^9, 
   3.730800978287421*^9},ExpressionUUID->"8d972004-9d4d-4729-b760-\
f241ba0ea180"]
}, Open  ]],

Cell["\<\
Here the first function creates a 2D plot of the traffic data, where each \
successive line shows the state of the road at each timestep. This already \
shows some features of traffic, like traffic jams propagating backwards on \
the road as waves. The visualisations allow an insight into how the \
simulations model real traffic in an intuitive, easy-to-understand way.
The second function creates an animation, which shows each row of the 2D plot \
after each other, showing the cars advancing in each timestep.\
\>", "Text",
 CellChangeTimes->{{3.730539726165396*^9, 3.7305398810396595`*^9}, {
  3.7305399239451995`*^9, 
  3.730539966255593*^9}},ExpressionUUID->"6ea148aa-d517-4b09-a65a-\
0b0f83fd7e3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2018. Jan. 31.", "Subsubsection",
 CellChangeTimes->{{3.730540084631586*^9, 
  3.730540095223442*^9}},ExpressionUUID->"476e8dbd-6dc8-4617-92f6-\
2b695aa60a00"],

Cell["\<\
On the 31st of January, the model was extended to be able to handle multiple \
types of vehicles. This is a scenario where the road is occupied not only by \
cars, but also trucks, with different allowed maximum speeds. \
\>", "Text",
 CellChangeTimes->{{3.7305402912713904`*^9, 
  3.730540352685317*^9}},ExpressionUUID->"76f7e08a-7ab8-4746-bc1c-\
9f9781d0c8ef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"generateTypeSeed", "[", 
    RowBox[{
    "frequency_", ",", "cvmax_", ",", "tvmax_", ",", "truckratio_", ",", 
     "track_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ncars", "=", 
      RowBox[{"Floor", "[", 
       RowBox[{"track", "*", "frequency"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ntrucks", "=", 
      RowBox[{"Floor", "[", 
       RowBox[{"ncars", "*", "truckratio"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vehicles", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "[", "track", "]"}], ",", "ncars"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"trucks", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "[", "ncars", "]"}], ",", "ntrucks"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"road", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", "track"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"road", "[", 
         RowBox[{"[", 
          RowBox[{"vehicles", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ncars"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"road", "[", 
         RowBox[{"[", 
          RowBox[{"vehicles", "[", 
           RowBox[{"[", 
            RowBox[{"trucks", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "=", 
        RowBox[{"{", 
         RowBox[{"2", ",", "0"}], "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "ntrucks"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"Which", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", "i", "]"}], "]"}], " ", "\[Equal]", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], ",", " ", 
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], " ", "=", " ", 
          RowBox[{"RandomInteger", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "cvmax"}], "}"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", "i", "]"}], "]"}], " ", "\[Equal]", " ", 
          RowBox[{"{", 
           RowBox[{"2", ",", "0"}], "}"}]}], ",", " ", 
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], " ", "=", " ", 
          RowBox[{"RandomInteger", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "tvmax"}], "}"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "road", "]"}], ";"}], "\[IndentingNewLine]", 
    ")"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testTypeSeed", "=", 
   RowBox[{"generateTypeSeed", "[", 
    RowBox[{"0.2", ",", "5", ",", "3", ",", "0.2", ",", "300"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.730540385209421*^9, 3.7305403854751005`*^9}, {
  3.730541876585313*^9, 
  3.730541877256587*^9}},ExpressionUUID->"e11eba79-343e-4790-9c8d-\
657c117370d9"],

Cell["\<\
The generateTypeSeed function works very similarly to the updated \
generateSeed function described in the previous section. In addition to using \
a RandomSample to place vehicles on the road, it generates another \
RandomSample to determine which of those vehicles will be trucks, and the \
rest will be cars. Then in the second step each type of vehicle is assigned a \
speed, cars ranging from 1 to cvmax, and trucks from 1 to tvmax. The data \
structure is not altered, but now the number one in a cell specifies a car, \
while number 2 specifies a truck.
car={1,4}
truck={2,3}
emptyCell={0,0}
\
\>", "Text",
 CellChangeTimes->{{3.7305403930537004`*^9, 3.7305405918301725`*^9}, {
   3.7305406646124372`*^9, 3.730540666475601*^9}, {3.7305412612276883`*^9, 
   3.7305412627816143`*^9}, {3.730541306687333*^9, 3.73054130686355*^9}, 
   3.7305413500710015`*^9},ExpressionUUID->"8b67a9df-4876-4fae-97f8-\
fba422f27547"],

Cell["\<\
A new update function was also created, which takes the different allowed \
speeds of vehicles into consideration. Similarly, the function which applies \
the update function to get traffic data was modified to handle the changes.\
\>", "Text",
 CellChangeTimes->{{3.730541352397395*^9, 3.730541388128358*^9}, {
  3.7305417727386665`*^9, 
  3.7305418281777687`*^9}},ExpressionUUID->"0c82a66a-cca6-45af-850c-\
818dc5dd907f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"typeUpd", "[", 
    RowBox[{"lanein_List", ",", 
     RowBox[{"{", 
      RowBox[{"cvmax_", ",", "tvmax_", ",", "track_", ",", "brakeprob_"}], 
      "}"}]}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"lane", "=", "lanein"}], ";", "\[IndentingNewLine]", 
     RowBox[{"output", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", "track"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"Which", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"lane", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Equal]", "1"}], " ", "&&",
            " ", 
           RowBox[{
            RowBox[{"lane", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "2"}], "]"}], "]"}], "<", "cvmax"}]}], ")"}], 
         ",", 
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], "+=", "1"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"lane", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Equal]", "2"}], " ", "&&",
            " ", 
           RowBox[{
            RowBox[{"lane", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "2"}], "]"}], "]"}], "<", "tvmax"}]}], ")"}], 
         ",", 
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], "+=", "1"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"lane", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", "0"}], " ",
           "&&", " ", 
          RowBox[{
           RowBox[{"RandomReal", "[", "]"}], "<", "brakeprob"}], "&&", 
          RowBox[{
           RowBox[{"lane", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "2"}], "]"}], "]"}], ">", "0"}]}], ",", 
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], "-=", "1"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"lane", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Mod", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "j", "-", "1"}], ")"}], ",", "track"}], 
                   "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]",
               "0"}], ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"lane", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", ",", "2"}], "]"}], "]"}], "=", 
                RowBox[{"(", 
                 RowBox[{"j", "-", "1"}], ")"}]}], ";", 
               RowBox[{"Break", "[", "]"}]}], ")"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "1", ",", 
             RowBox[{"lane", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"lane", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
         RowBox[{
          RowBox[{"output", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"Mod", "[", 
              RowBox[{
               RowBox[{"i", "+", 
                RowBox[{"lane", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", ",", "2"}], "]"}], "]"}], "-", "1"}], ",", 
               "track"}], "]"}], "+", "1"}], "]"}], "]"}], "=", 
          RowBox[{"lane", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "track"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "output", "]"}], ";"}], "\[IndentingNewLine]", 
    ")"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"generateTypeTraffic", "[", 
    RowBox[{
    "seed_", ",", "frequency_", ",", "cvmax_", ",", "tvmax_", ",", 
     "brakeprob_", ",", "truckratio_", ",", "trac_", ",", "iterations_"}], 
    "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"track", "=", "trac"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "seed", "]"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"road", "=", "seed"}], ";", 
           RowBox[{"track", "=", 
            RowBox[{"Length", "[", "seed", "]"}]}]}], ")"}], ",", 
         RowBox[{"road", "=", 
          RowBox[{"generateTypeSeed", "[", 
           RowBox[{
           "frequency", ",", "cvmax", ",", "tvmax", ",", "truckratio", ",", 
            "track"}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"traffic", "=", 
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"typeUpd", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"cvmax", ",", "tvmax", ",", "track", ",", "brakeprob"}],
               "}"}]}], "]"}], "&"}], ",", "road", ",", "iterations"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "traffic", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testTypeTraffic", "=", 
   RowBox[{"generateTypeTraffic", "[", 
    RowBox[{
    "testTypeSeed", ",", "0.2", ",", "5", ",", "3", ",", "0.1", ",", "0.2", 
     ",", "300", ",", "300"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7305417621897388`*^9, 3.7305417625490003`*^9}, {
  3.730541849334636*^9, 3.7305418497737722`*^9}, {3.7305418807697926`*^9, 
  3.730541881929254*^9}},ExpressionUUID->"122de7a9-6f6e-4b90-bcc6-\
bfbc7aad7b15"],

Cell["\<\
The previously defined visualisation functions still work for the multiple \
types of vehicles. This time a grey dot shows a car, while a black dot shows \
a truck.\
\>", "Text",
 CellChangeTimes->{{3.730541693711507*^9, 3.730541724209301*^9}, {
  3.7305419489236917`*^9, 
  3.7305419738184657`*^9}},ExpressionUUID->"9db6478e-78c9-46da-aa9e-\
8a7506ceb42c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"createArrayPlot", "[", "testTypeTraffic", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"createLaneAnimation", "[", "testTypeTraffic", "]"}]}], "Input",
 CellChangeTimes->{{3.7305419026254363`*^9, 
  3.7305419084748397`*^9}},ExpressionUUID->"138ea30b-21d9-49af-86ed-\
117a17f87362"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
   "], {{0, 0}, Offset[{600, 602}, {0, 0}]}, {0, 2}],
  AspectRatio->Automatic,
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{600, 602},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotRange->{{0, 600}, {0, 602}},
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.7305419090993023`*^9, 3.730541939001545*^9}, 
   3.73054207522521*^9, 3.7305514941516266`*^9, 3.7306418951765785`*^9, 
   3.7307050161810493`*^9, 
   3.7308009795592313`*^9},ExpressionUUID->"5340d54a-e195-43a1-81b4-\
4690f2fcb8da"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 73, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 301, 1}}, Typeset`size$$ = {
    605., {11., 16.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$9526$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$9526$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ArrayPlot[{
         Table[
          Part[CompressedData["
1:eJztnV1247qOhW0nNZD73j2ZHsKZQM//7Z7YscUfbGADBEk5Fa1VlUSmSJD8
BIAgJP/nn///v38+LpfL/14vl//599/t8nXcHj/U43q9fuglbsbn/9bx599/
jra+yt9/ft7rv74+/2xavrWffLVynH389nXu6/OHBM+6X1eK0n9d+ZLij1Ti
q8zz2qOOeztNjdfro4w8Ao/atTGWPvsep89Xv4uRuV6Pc7ePx19fY3iX7dHa
7SnTo/Tj6vtvt+e10qy256SxfNZtcXE9fvvEpSxCX30l2nr17eP4q63/6FH5
yXOc7uc/js/vI3Yt6+570zHbSdyVuEglruJdcH3dHCIlUCpNQrnOJzn3/78r
vt9txRgc41yPzDFLz5oZuo5WixpuWum6bF8L02JxVUkAGL9iVgqqnlf29T/r
eX7S0vN1/jmibd2vv9q7Tmb2sy9xK0bmW96m/eeV10s7iP0I6FL1n10v7dyU
WvvJz0PGr3K3gqrr62xL1f23Rlqarqf+qzQDKn1Iinpot4jr6Wa1nKuKqqeU
Al3VJw2L1/pera5rNcAf6VOk/R+tVuzdLiK912vPAGrVkqpvqx3T5x150HF7
lb2VVN3Qb5K0skXqxkakCo1kLTH4rOm9Spf42VHDtZmr8hqLrlvH4q24V1H7
WGeh9kp9ivXl/a/PK/ikqbHXYFCqvq1G231T9fIKvsvequssqnpp5VlFuqvu
F565tiT4tOi9YRnFer69yHpuPuSf3WxX3thTL9+u7Vncvqyz5PZkTdrdCRed
AUsG6cy3JZR042P0hFZvpV10UNVLy9PVj6BN19E/61NuxVj9Ld+FIl2dT1/o
kMODuDWa5SJ6TLJM+pjI0pRn5Xmy6JLkqtcCvbV63pMSHU9ddXhcRx1Pf0uj
qlu3KHTJ2t1L170kJIyvo64H+fm1bMinf1rA5p6Vyfgj/163zdDV2UWCKl37
I7nusRvZvxKpun6vX8u7rF0RslSxFimPrrbVvk6ujn4229rreZRqL9dAZVlE
Vy175z0TYyJJo1PFrwH7UpAA4bMvu3jgd3gLo1QxFimXrlaCsg4mHiu3XZ+3
fPr23qxrwnSV41jzRdFVfCavF2ydZRMmj8CliKHVVB2+1fdZIaYVpaoeBc77
GqermxsYjYLXyz1stJAsYe/J1zVpdKERZemqPTuOKn0N2HxmUvWMRh3UFHsU
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
Hy9cx2v2IY8xurwRhzV0SaN0fbXMrXi042fSpURWLLp6XTZEF2NrmFaWUkW9
c+BvpQuP1zq6rOcV9tDlo+qXLulakSoytjlKF7TI1D7QLLpiVP0UurL3sP1v
4M6hi7fIa+gao4qhy/Dtt9I1bw/b+7xAlC7pexMYizyXrhyqdLpkOUekzqLL
yqTTD4quoNxuugT9xOjOOXTlUqXRxdnHtXSxmXT6cVa6GKrm0DWHKmZ8z0CX
/J2sP48ufiZz6JpLVS1LxLdfQRd6L+QF5mnqx6npCo6T7/M1VGk28ER0Qao4
GS2Z99FlfSdjNl0rqWolOztduP9vS1fX8hy61lJV66w3ostxFS/zOF3ak4z7
6dpL1S9ddhkwkl287Xx02XH/uVT90mWXkanCLCGZ8fMaTLt+unq28ueMKYXy
0c5Pl/fbP+N02Zmp6Iy8qzCbLmlPaa3OsvLRdtOF398X2weK0MVnpsq6A7UV
pctaa+K3tfJtZFCFd1POQZeU1zj2LKOHLv9zch1dalteuvD9hD6vqPrD9SaP
qoPuk9JV/J3zLCNzffw5uTl0mZmp6uc5VDES4nXpG9BFXmMdBF1hqXPpIp9A
MjJXZ1rCWH7qL138z8h3yeote55AquZ0Al1jVOl0Weux/XR5V4x5dDHPguqy
WhaOHaUZ356XQ5WubS29sI+u6IqRoZOjSpJZpqt+wvF5RHcZ7evG6JLOZuan
8nl56+kayxxs68mNdrXnSlmtZ7Bxu7bEmXTlUqWOkWl11tGVkzmoa55XGYoq
PHJlPhpmIrZitHVt7OluTFXGLpKm3/Exly7tW8VjuV02z8dngWhXoaVsin0r
RlvXWnHxKFWlxYzNa+Rp7HhrHF3SWqy/e84T7aotoK5PQMuQKs0TMKNhQG7U
iufpkYgtPwldtUwpuV0UXSGZ25G0NY6+YuQ9AatHms7qqZLsIB59xpafkS7O
exiNR/hXjKgGmTVNSnmV7o16e+myqGo02xBVJ6ZLH6PBeIR/xWhJILGmSymN
ubU68/v0fqr8O96x6O8+uuAYje5gu1eMnNavOeKk1PZQW6riPn1Zv4Mqam8y
Fv09AV2t5qJ0rn0w13tGsl4foqeXRK9LXEchqnBN1P2iUNVYwlSq3oYuSm77
8NMlj6QUe2itpEFX20OVKoUusUSvFy0i9E9jVJ2Lrls3T1Y7q6NdUvT9mB9u
d1FumZs/m662nE2V7WdFqToHXb3PsI8um6p+Z6ddz6FelQdYMbrmSZCzK8dQ
heJZo1TtpQv7DBvpMqiyMyP8Pn10ngo5obYkqaLs8nvQZXsVHF3zsm/sNRba
XWTvgCy6eqll8ndQJc/SLLp4r2JutAv30KZKsD1i5Esfxeh3kGnxBqgrNlFl
7Xtm0eX3KjifN5suhiqBruYMRRelm1Fd1tVoPSpTdax5c6lC9iWLrnhchPN5
c+niqNpJF6THbBFTVe0rJlKF7csoXeNxEc4rGaVLe6/kTLr8Wal6jQRdkKqy
hTyq1JwOoNP6I4eqdlRYryRzlzF+JwTogvezrrMsWwM/h97k/ffB/BqJqoNZ
tOvCzF0OVR1dxr0Zpcte98Xp4r9dg6dLnk1dMzErlU4nDmRCWPtLso9Daa5J
cZEd0a6orP2cjtOlWwSkDeTPZ2VCsPtL0VhXHlV1m7xXMkaXvI/spgvoshhd
5V/sWka9Z3SqAnvWLFVyPhqy3dKRS9fN0PxZdPU7ORGZZ9ClUxWiaxtVGuvc
vOVQ1bY5iy68kxORvaZL23tpW0J3bnSvUf98DVUFXQTrK+hC/sIcuqyVcowu
ZvXZ0QWk9ml4vr1xqux4a6+zdtFl+RMz6CJWyq4+yNn0nJRyvN2r4fn2xqnC
mglTtZouzp/wPEfhoKsblWC0HOwpeuhCZ30a3tNeAlWf1plddHE2G/v0vI2w
Jb2AtYy3D/Pp4ne/vCXWUDWbLo4q26fnbYQqq/MbDrk5Zuni3yLhXTHyJdZS
NYsuH1Vti5iusQwJaw4iVtymS45+iO0HV4xEz7ZQJdmXEbpiVNl05WRIcHR5
51ijS9ey0VVFgK4NVMk9j9DloQqtbV9e1xSf3r46miHR1/ZVk50nMI+uLkq8
hSowyqKE8hGhquiFyPgcn16qRb6rxui6iSO8hi6gLTZRJer0xEi9nu/h97r0
UfRLm0vX/Rycw5l0qXkfJlXt3Z5FlaQBInaRoarog9vr4nSuX9o8ulAMTJc1
jS5NW5gMRXWWTlWe18VQZd8hs336GXTheD3zjrGVdPUSzaVKH2O/T29SRe4X
zNgFYq730lXW0FsBRtYVdGVThdZknAbwzFwOVe9F17EePGqI7GNL5ybRlUjV
tbt/fJFffuayqHoPukqqXtcP7GNL5+bQlUdVxVYo8svOXB5VdYvzol0xuvq7
tb8+Rteqd9XnUXVV+pdJV29941TVY8ZHu+bSdYwrzmwapIvW0aVEzN0Xo4uh
yv/sUIiuchxT9wt209VTVYztFrrKmZbjx2N0Iar6CGX520y6IhTLVLXtzYvU
69cjr/X+m5FzOYcuaablWYnRZVF1rWrJyI/w6IXcaAn2uixtxx/4+mp0Tarm
0oVnGmbjG3ddlKqMb6MN05VCVT0i2r05HKnHkc+KKmwJ0SxG6GKelmbvJ6vU
EFWD3xs6ly7ffoFoF8Ua8t/bxeqsfhZDdLWtK1QZmqux6VrN66iaS1dsv8D2
ukbtYttmRQRFlaD7humSqHqd0/V6x4hU83qq5tDlo4qna9QudpIQRGgya98m
K9Vl0CVRZdRQf3oRszH2USXr2yhdMapsutDuVtinV+aMkVnb9YnSpVNl9Rjv
l++jCulbL11jVFl04ZiTny69ZUtmTXeO0RXbU7Fb2kkVkpmdvRyqTLq6kZlH
F0fVBLqcY6T3qF/JXoRY6GyqZLvooCuFKsIyJn1rniw3zpnx2Kkz0CVabPNd
vDlUtX6LFRvx0hWliqDLOdbWocyFqydnoUu3RWuoen1mRlB8dI1StZouHBuK
2vLjnP4usFG6uDi94FusoErUNFp0SZ+9LKrW0qXFhqISo9HMoouL0yt0LadK
myH9Tvku03mOb0LXMaNdbGiALlGiUbrY+N5cuiJUYYm5SPjVGJmz0tXbiShd
VixVK6+37IulzqJrhCqFLnLucq15nC4vY7YG8tspjS58t7Yth2OpqXRJsX2d
vCl0JVHVsKKsMpoeBjVYlC53LNW0ayjmuYcuY8dI0Wfnp+tBFZXbRY45K7fX
+6HpMuW8OUdqDl3MPqSszy509lsvyxq6rhVVIJ7zIf01my5/LNUXj9hNV4yq
q9rHs9BVy4p9ruIK55izcnu9H+E6Ue+ela4xqvQ7fTddsqzY57Lby6IrGku1
cgHOQlcWVZ5c6FV0aetbzeey20ujKzjXrD3aRdcUqsjsitl0aetbxuey2svL
fv6ZdO2hajZdmsSaz4VbleqPRFTPQhf+NrQ8unZRNYsulaoP6WxNlUUXuzvC
y72Nrg9UMpGuTVRl0+Wn6lrVb9Hl3R1h5d5Fl/Ympny6EFVS7OqSll+YlX8T
oer706Y1dgTfnq4PXJKfK6slNEcgvpCUCaZ5Ldy8ZVH1S9fIXBmSOe1gFlXa
3DDzlkfVL10jc6W15PeusqgaoytClSX/u9Pl/Q50TJffw5RaclI14e2pYbpc
beg6q26N9y3OQhe2W7pd6+mKzFV//c2kquJrClUZdOVQVd/ZvPbfTVf9Rkv0
vhEsJ45JeXtaain8rnxZa82haoSuTKrqO1uLu8+iyxvTbGbR0FwUXQNzdWks
YFHrRqqG6DLq9MvL7AVl0yXMByFxexWWYg1dmobcRxXS51ZvCIkc8sp7Qb5W
vXTh+WCoQtZ0G11qmWhUdIwqPYISoytCVdvSErrg9QxVWXRlReqtMj6vPYcq
fWZ8dI1QdUa6dKqidPHxiGS6NlCVQxffIjtXO+nSMoXidNVrgOM4B11zqJLv
p1Yina4Mqs5DF9zZDdKFVnLPYy9dM6my9q24ecugaj9delw7SldL6VnoWkEV
a/kYupp5GYyLrKOrj2uDXJQAXd04CzbCT9fIdyCspCqDLs73PR9dfVxbz0Xh
6PI+aeahi1vfazp0LVU+upgY3rvQxe6ZsBLLM29LqNPosTQGXRuo4ujSSmVR
tZYue8/kQsa0tW/No+hSysfW9xl05VDFzctPo0vXBRxV3D5QjK6YpcmgK5eq
v5SugXnw7QP56BqzNOO9QrG9Ue/nly6r9tg+kJOuodmK9wrF9th4MidvZOWY
S9crQ0LJv1lL19g+0D669DdZSFRdX7XC86E5tWZnPl2eDIk1dHmt1FnoQlEL
iqpP7bx/bhmpZ9IVyZCYS1d0PbSbLmOlspSqWmetp2skQ2IyXa5+6N/JOIcu
f6R+L1Xr6MrIkDgDXTibdR5dnkh9lTO2mar5dGVmSOyky85m1eiK7TJ6IvUS
gbOp0qWfSdeMDIkddNlRc40uJftG2QeS2wR2Ufe6JlHF6ax8usaiurPfDcfT
ZUV8dLosrSNHDeSxi+9go7lYRVUeXWNR3bF3w2XSxUZ8Wrqi3w0ktea3i5w2
HtVZUSbjdOXkd3B2cSZdejYRvjKWIeGP4ka+eyrPEo5d7acrN2tojC7+vZYW
I/zdPhbt4qO4bA4xkGOpf5VI1wBVvTfDeV3ekbeuf17Zy2PPSx5dI3bRpGsr
Vavo0r0Z1uvyjjy6vm231P/s3Z5Il0qVpZ1n0JVF1Wy65J34Vxmv1+UceaEG
UedVdFH9Go3UW6sJXjvn0hW7ajVdxu4WaN3ndQXsYiVJFdUmn4bPitSbqwla
O2fSlU1VNl3MnukoXaN2EazyVIuYHam3VhPs/OTQNYuqLLpiVPno8uWa29cz
8zAtUl99vouu2VSN0jVGVV37zjg9SxVHFxupv3a1rKKLa3UNXeideqNU1bXv
jNOzVJF0GRLe3COVS9cqqnTpYbajM66tW539cXqeqnS6Bu9+p0ZeTJVBlyyx
O66tW539dPmfTmj5iO4yrqFrF1UhupKoOhFd4dke3WWcTZevlTPRNUrVeehi
e9JqqkPn/dLll17S+vfzKVSdii5qnB496tk6H10Z+0FZP/Wsx1ic3j9y56Wr
XsVI+0dnoUu3Nmt/clmPvjh9XG+ejy55bdzHE6KR+jy69PJ7qNJlZ+mycoTP
SZed187sDTz5ikTqpbqjfTwDXb69FIsudo/6XHRpqzydKqzzGlLNe/dn0cU/
gSDJxMVSL+E8yDV0aXPOUSVYxlA84qfQ5X8CQZJJj6XGqVpMl8mIf6a5ufxp
dMk5e4gDzzvFxRzhQZm30xWUdz1dOftBmVRdi3ak0lhmka7y95QnAn7psn/a
PdX1xUyq2rxLnKEpy9SMXdI3vXf3pZm/fFa6rLmM08X3VNcXWVRJdvAiPu/N
Z2x3sibprHpubEYy6Yp8/1PbHjuXEbrYmmpJ4IwlUdVIp1DFa9ucO0HuA6+5
cuiSiAjTRY6Pny5vT61yeVQVGkulahddsl1mCBmhS41HnIYu3ib7Wkyl6rO/
NjI3uXTpdnk6Xco1++nyttweMbpsqkpLKFFl78/Mpouzy3G6uKcZz0pXrOX2
sEYkTpW8IuT3Z2bR1cgxmDmI6meflNXGfxddeTFV2R7In2srQWwJo/sz2XTF
dlV4uuRsGM+1o7HGmi5LU2AZvXTBqLe1YjSokuzfKFXZdPmo8tNlZcPY16JZ
itHFZ7+N0sVGveX2fD57FlVZdMWo8tLlX/H2EufEGvXvnsIyBuISzqi3JJGD
qj+ofFkyNlaa1PJsjFHlpst9bxTXNmM14kfaXld3HSwH4xLBqHffkiO+YFlM
17wyfoutaeNUraOrH6uIH9m3aNNlleviEso6iNECnYTOqJW9hxgdK03qXtOO
U7WQrm6sPH6kMncGXbakNQUgcuPQAkjCIapSniXUpB6JDbF2eaplbEaI8SPt
Fi0JWLokqvoYwRhdq6naS1d/R06ly7iGG6lsum4KVcV8D9B1UWOhUpQriype
6rHII2uX19HVxSOCMZT6b39cotRc9so/RtdFiC8YUa4UqmypcyKPrF2eT1dO
PKKlC8uhS3pzxpOCussZ5cqiSr6PJZlH6OLt8qo1ox1Z5+jyxiXqErfGNlmz
G/S71NX991/qN4HHqBqIRzjq7y37FrqMHnvpquuJ0CW+aZrUmNIhl2V2pmdQ
heOKksweuizfdD1ddgTGOYKtfiDrLXUm9roz6GrZBVSJOiuDqqM9r0/vporW
9zG6/Ln4Ubqg9THqlXRm73Vn0IX2EtZTheKKhRSUD5y3g+6ji8+QGKXLkhzV
q+nMSITHnqm+5C6qCJnRqKVQFaXLnyERp4uTXB8nWccm06WURJZ3LlVRurKo
8tIVz5CI0sVKztyFXTRiGV3tzGRSVcx+UGb97Rtxqtx0ueVHV1p0eSXX7kL0
6VK6plEVp0uPpI5TdT66opJrc5pHVyRD4n5uLlXBGB3U91Oek7XXfjPpiki+
iq6RDAl/r7KoCtOVQtXKPWxWB5yLrkieVJyubKr20LVjD5vVATPpapnG8z+S
J+WnaxZVa+nat4fd8/xfHP0fjg==
           "], $CellContext`i$$, $CellContext`j, 1], {$CellContext`j, 1, 
           Length[
            Part[CompressedData["
1:eJztnV1247qOhW0nNZD73j2ZHsKZQM//7Z7YscUfbGADBEk5Fa1VlUSmSJD8
BIAgJP/nn///v38+LpfL/14vl//599/t8nXcHj/U43q9fuglbsbn/9bx599/
jra+yt9/ft7rv74+/2xavrWffLVynH389nXu6/OHBM+6X1eK0n9d+ZLij1Ti
q8zz2qOOeztNjdfro4w8Ao/atTGWPvsep89Xv4uRuV6Pc7ePx19fY3iX7dHa
7SnTo/Tj6vtvt+e10qy256SxfNZtcXE9fvvEpSxCX30l2nr17eP4q63/6FH5
yXOc7uc/js/vI3Yt6+570zHbSdyVuEglruJdcH3dHCIlUCpNQrnOJzn3/78r
vt9txRgc41yPzDFLz5oZuo5WixpuWum6bF8L02JxVUkAGL9iVgqqnlf29T/r
eX7S0vN1/jmibd2vv9q7Tmb2sy9xK0bmW96m/eeV10s7iP0I6FL1n10v7dyU
WvvJz0PGr3K3gqrr62xL1f23Rlqarqf+qzQDKn1Iinpot4jr6Wa1nKuKqqeU
Al3VJw2L1/pera5rNcAf6VOk/R+tVuzdLiK912vPAGrVkqpvqx3T5x150HF7
lb2VVN3Qb5K0skXqxkakCo1kLTH4rOm9Spf42VHDtZmr8hqLrlvH4q24V1H7
WGeh9kp9ivXl/a/PK/ikqbHXYFCqvq1G231T9fIKvsvequssqnpp5VlFuqvu
F565tiT4tOi9YRnFer69yHpuPuSf3WxX3thTL9+u7Vncvqyz5PZkTdrdCRed
AUsG6cy3JZR042P0hFZvpV10UNVLy9PVj6BN19E/61NuxVj9Ld+FIl2dT1/o
kMODuDWa5SJ6TLJM+pjI0pRn5Xmy6JLkqtcCvbV63pMSHU9ddXhcRx1Pf0uj
qlu3KHTJ2t1L170kJIyvo64H+fm1bMinf1rA5p6Vyfgj/163zdDV2UWCKl37
I7nusRvZvxKpun6vX8u7rF0RslSxFimPrrbVvk6ujn4229rreZRqL9dAZVlE
Vy175z0TYyJJo1PFrwH7UpAA4bMvu3jgd3gLo1QxFimXrlaCsg4mHiu3XZ+3
fPr23qxrwnSV41jzRdFVfCavF2ydZRMmj8CliKHVVB2+1fdZIaYVpaoeBc77
GqermxsYjYLXyz1stJAsYe/J1zVpdKERZemqPTuOKn0N2HxmUvWMRh3UFHsU
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
Hy9cx2v2IY8xurwRhzV0SaN0fbXMrXi042fSpURWLLp6XTZEF2NrmFaWUkW9
c+BvpQuP1zq6rOcV9tDlo+qXLulakSoytjlKF7TI1D7QLLpiVP0UurL3sP1v
4M6hi7fIa+gao4qhy/Dtt9I1bw/b+7xAlC7pexMYizyXrhyqdLpkOUekzqLL
yqTTD4quoNxuugT9xOjOOXTlUqXRxdnHtXSxmXT6cVa6GKrm0DWHKmZ8z0CX
/J2sP48ufiZz6JpLVS1LxLdfQRd6L+QF5mnqx6npCo6T7/M1VGk28ER0Qao4
GS2Z99FlfSdjNl0rqWolOztduP9vS1fX8hy61lJV66w3ostxFS/zOF3ak4z7
6dpL1S9ddhkwkl287Xx02XH/uVT90mWXkanCLCGZ8fMaTLt+unq28ueMKYXy
0c5Pl/fbP+N02Zmp6Iy8qzCbLmlPaa3OsvLRdtOF398X2weK0MVnpsq6A7UV
pctaa+K3tfJtZFCFd1POQZeU1zj2LKOHLv9zch1dalteuvD9hD6vqPrD9SaP
qoPuk9JV/J3zLCNzffw5uTl0mZmp6uc5VDES4nXpG9BFXmMdBF1hqXPpIp9A
MjJXZ1rCWH7qL138z8h3yeote55AquZ0Al1jVOl0Weux/XR5V4x5dDHPguqy
WhaOHaUZ356XQ5WubS29sI+u6IqRoZOjSpJZpqt+wvF5RHcZ7evG6JLOZuan
8nl56+kayxxs68mNdrXnSlmtZ7Bxu7bEmXTlUqWOkWl11tGVkzmoa55XGYoq
PHJlPhpmIrZitHVt7OluTFXGLpKm3/Exly7tW8VjuV02z8dngWhXoaVsin0r
RlvXWnHxKFWlxYzNa+Rp7HhrHF3SWqy/e84T7aotoK5PQMuQKs0TMKNhQG7U
iufpkYgtPwldtUwpuV0UXSGZ25G0NY6+YuQ9AatHms7qqZLsIB59xpafkS7O
exiNR/hXjKgGmTVNSnmV7o16e+myqGo02xBVJ6ZLH6PBeIR/xWhJILGmSymN
ubU68/v0fqr8O96x6O8+uuAYje5gu1eMnNavOeKk1PZQW6riPn1Zv4Mqam8y
Fv09AV2t5qJ0rn0w13tGsl4foqeXRK9LXEchqnBN1P2iUNVYwlSq3oYuSm77
8NMlj6QUe2itpEFX20OVKoUusUSvFy0i9E9jVJ2Lrls3T1Y7q6NdUvT9mB9u
d1FumZs/m662nE2V7WdFqToHXb3PsI8um6p+Z6ddz6FelQdYMbrmSZCzK8dQ
heJZo1TtpQv7DBvpMqiyMyP8Pn10ngo5obYkqaLs8nvQZXsVHF3zsm/sNRba
XWTvgCy6eqll8ndQJc/SLLp4r2JutAv30KZKsD1i5Esfxeh3kGnxBqgrNlFl
7Xtm0eX3KjifN5suhiqBruYMRRelm1Fd1tVoPSpTdax5c6lC9iWLrnhchPN5
c+niqNpJF6THbBFTVe0rJlKF7csoXeNxEc4rGaVLe6/kTLr8Wal6jQRdkKqy
hTyq1JwOoNP6I4eqdlRYryRzlzF+JwTogvezrrMsWwM/h97k/ffB/BqJqoNZ
tOvCzF0OVR1dxr0Zpcte98Xp4r9dg6dLnk1dMzErlU4nDmRCWPtLso9Daa5J
cZEd0a6orP2cjtOlWwSkDeTPZ2VCsPtL0VhXHlV1m7xXMkaXvI/spgvoshhd
5V/sWka9Z3SqAnvWLFVyPhqy3dKRS9fN0PxZdPU7ORGZZ9ClUxWiaxtVGuvc
vOVQ1bY5iy68kxORvaZL23tpW0J3bnSvUf98DVUFXQTrK+hC/sIcuqyVcowu
ZvXZ0QWk9ml4vr1xqux4a6+zdtFl+RMz6CJWyq4+yNn0nJRyvN2r4fn2xqnC
mglTtZouzp/wPEfhoKsblWC0HOwpeuhCZ30a3tNeAlWf1plddHE2G/v0vI2w
Jb2AtYy3D/Pp4ne/vCXWUDWbLo4q26fnbYQqq/MbDrk5Zuni3yLhXTHyJdZS
NYsuH1Vti5iusQwJaw4iVtymS45+iO0HV4xEz7ZQJdmXEbpiVNl05WRIcHR5
51ijS9ey0VVFgK4NVMk9j9DloQqtbV9e1xSf3r46miHR1/ZVk50nMI+uLkq8
hSowyqKE8hGhquiFyPgcn16qRb6rxui6iSO8hi6gLTZRJer0xEi9nu/h97r0
UfRLm0vX/Rycw5l0qXkfJlXt3Z5FlaQBInaRoarog9vr4nSuX9o8ulAMTJc1
jS5NW5gMRXWWTlWe18VQZd8hs336GXTheD3zjrGVdPUSzaVKH2O/T29SRe4X
zNgFYq730lXW0FsBRtYVdGVThdZknAbwzFwOVe9F17EePGqI7GNL5ybRlUjV
tbt/fJFffuayqHoPukqqXtcP7GNL5+bQlUdVxVYo8svOXB5VdYvzol0xuvq7
tb8+Rteqd9XnUXVV+pdJV29941TVY8ZHu+bSdYwrzmwapIvW0aVEzN0Xo4uh
yv/sUIiuchxT9wt209VTVYztFrrKmZbjx2N0Iar6CGX520y6IhTLVLXtzYvU
69cjr/X+m5FzOYcuaablWYnRZVF1rWrJyI/w6IXcaAn2uixtxx/4+mp0Tarm
0oVnGmbjG3ddlKqMb6MN05VCVT0i2r05HKnHkc+KKmwJ0SxG6GKelmbvJ6vU
EFWD3xs6ly7ffoFoF8Ua8t/bxeqsfhZDdLWtK1QZmqux6VrN66iaS1dsv8D2
ukbtYttmRQRFlaD7humSqHqd0/V6x4hU83qq5tDlo4qna9QudpIQRGgya98m
K9Vl0CVRZdRQf3oRszH2USXr2yhdMapsutDuVtinV+aMkVnb9YnSpVNl9Rjv
l++jCulbL11jVFl04ZiTny69ZUtmTXeO0RXbU7Fb2kkVkpmdvRyqTLq6kZlH
F0fVBLqcY6T3qF/JXoRY6GyqZLvooCuFKsIyJn1rniw3zpnx2Kkz0CVabPNd
vDlUtX6LFRvx0hWliqDLOdbWocyFqydnoUu3RWuoen1mRlB8dI1StZouHBuK
2vLjnP4usFG6uDi94FusoErUNFp0SZ+9LKrW0qXFhqISo9HMoouL0yt0LadK
myH9Tvku03mOb0LXMaNdbGiALlGiUbrY+N5cuiJUYYm5SPjVGJmz0tXbiShd
VixVK6+37IulzqJrhCqFLnLucq15nC4vY7YG8tspjS58t7Yth2OpqXRJsX2d
vCl0JVHVsKKsMpoeBjVYlC53LNW0ayjmuYcuY8dI0Wfnp+tBFZXbRY45K7fX
+6HpMuW8OUdqDl3MPqSszy509lsvyxq6rhVVIJ7zIf01my5/LNUXj9hNV4yq
q9rHs9BVy4p9ruIK55izcnu9H+E6Ue+ela4xqvQ7fTddsqzY57Lby6IrGku1
cgHOQlcWVZ5c6FV0aetbzeey20ujKzjXrD3aRdcUqsjsitl0aetbxuey2svL
fv6ZdO2hajZdmsSaz4VbleqPRFTPQhf+NrQ8unZRNYsulaoP6WxNlUUXuzvC
y72Nrg9UMpGuTVRl0+Wn6lrVb9Hl3R1h5d5Fl/Ympny6EFVS7OqSll+YlX8T
oer706Y1dgTfnq4PXJKfK6slNEcgvpCUCaZ5Ldy8ZVH1S9fIXBmSOe1gFlXa
3DDzlkfVL10jc6W15PeusqgaoytClSX/u9Pl/Q50TJffw5RaclI14e2pYbpc
beg6q26N9y3OQhe2W7pd6+mKzFV//c2kquJrClUZdOVQVd/ZvPbfTVf9Rkv0
vhEsJ45JeXtaain8rnxZa82haoSuTKrqO1uLu8+iyxvTbGbR0FwUXQNzdWks
YFHrRqqG6DLq9MvL7AVl0yXMByFxexWWYg1dmobcRxXS51ZvCIkc8sp7Qb5W
vXTh+WCoQtZ0G11qmWhUdIwqPYISoytCVdvSErrg9QxVWXRlReqtMj6vPYcq
fWZ8dI1QdUa6dKqidPHxiGS6NlCVQxffIjtXO+nSMoXidNVrgOM4B11zqJLv
p1Yina4Mqs5DF9zZDdKFVnLPYy9dM6my9q24ecugaj9delw7SldL6VnoWkEV
a/kYupp5GYyLrKOrj2uDXJQAXd04CzbCT9fIdyCspCqDLs73PR9dfVxbz0Xh
6PI+aeahi1vfazp0LVU+upgY3rvQxe6ZsBLLM29LqNPosTQGXRuo4ujSSmVR
tZYue8/kQsa0tW/No+hSysfW9xl05VDFzctPo0vXBRxV3D5QjK6YpcmgK5eq
v5SugXnw7QP56BqzNOO9QrG9Ue/nly6r9tg+kJOuodmK9wrF9th4MidvZOWY
S9crQ0LJv1lL19g+0D669DdZSFRdX7XC86E5tWZnPl2eDIk1dHmt1FnoQlEL
iqpP7bx/bhmpZ9IVyZCYS1d0PbSbLmOlspSqWmetp2skQ2IyXa5+6N/JOIcu
f6R+L1Xr6MrIkDgDXTibdR5dnkh9lTO2mar5dGVmSOyky85m1eiK7TJ6IvUS
gbOp0qWfSdeMDIkddNlRc40uJftG2QeS2wR2Ufe6JlHF6ax8usaiurPfDcfT
ZUV8dLosrSNHDeSxi+9go7lYRVUeXWNR3bF3w2XSxUZ8Wrqi3w0ktea3i5w2
HtVZUSbjdOXkd3B2cSZdejYRvjKWIeGP4ka+eyrPEo5d7acrN2tojC7+vZYW
I/zdPhbt4qO4bA4xkGOpf5VI1wBVvTfDeV3ekbeuf17Zy2PPSx5dI3bRpGsr
Vavo0r0Z1uvyjjy6vm231P/s3Z5Il0qVpZ1n0JVF1Wy65J34Vxmv1+UceaEG
UedVdFH9Go3UW6sJXjvn0hW7ajVdxu4WaN3ndQXsYiVJFdUmn4bPitSbqwla
O2fSlU1VNl3MnukoXaN2EazyVIuYHam3VhPs/OTQNYuqLLpiVPno8uWa29cz
8zAtUl99vouu2VSN0jVGVV37zjg9SxVHFxupv3a1rKKLa3UNXeideqNU1bXv
jNOzVJF0GRLe3COVS9cqqnTpYbajM66tW539cXqeqnS6Bu9+p0ZeTJVBlyyx
O66tW539dPmfTmj5iO4yrqFrF1UhupKoOhFd4dke3WWcTZevlTPRNUrVeehi
e9JqqkPn/dLll17S+vfzKVSdii5qnB496tk6H10Z+0FZP/Wsx1ic3j9y56Wr
XsVI+0dnoUu3Nmt/clmPvjh9XG+ejy55bdzHE6KR+jy69PJ7qNJlZ+mycoTP
SZed187sDTz5ikTqpbqjfTwDXb69FIsudo/6XHRpqzydKqzzGlLNe/dn0cU/
gSDJxMVSL+E8yDV0aXPOUSVYxlA84qfQ5X8CQZJJj6XGqVpMl8mIf6a5ufxp
dMk5e4gDzzvFxRzhQZm30xWUdz1dOftBmVRdi3ak0lhmka7y95QnAn7psn/a
PdX1xUyq2rxLnKEpy9SMXdI3vXf3pZm/fFa6rLmM08X3VNcXWVRJdvAiPu/N
Z2x3sibprHpubEYy6Yp8/1PbHjuXEbrYmmpJ4IwlUdVIp1DFa9ucO0HuA6+5
cuiSiAjTRY6Pny5vT61yeVQVGkulahddsl1mCBmhS41HnIYu3ib7Wkyl6rO/
NjI3uXTpdnk6Xco1++nyttweMbpsqkpLKFFl78/Mpouzy3G6uKcZz0pXrOX2
sEYkTpW8IuT3Z2bR1cgxmDmI6meflNXGfxddeTFV2R7In2srQWwJo/sz2XTF
dlV4uuRsGM+1o7HGmi5LU2AZvXTBqLe1YjSokuzfKFXZdPmo8tNlZcPY16JZ
itHFZ7+N0sVGveX2fD57FlVZdMWo8tLlX/H2EufEGvXvnsIyBuISzqi3JJGD
qj+ofFkyNlaa1PJsjFHlpst9bxTXNmM14kfaXld3HSwH4xLBqHffkiO+YFlM
17wyfoutaeNUraOrH6uIH9m3aNNlleviEso6iNECnYTOqJW9hxgdK03qXtOO
U7WQrm6sPH6kMncGXbakNQUgcuPQAkjCIapSniXUpB6JDbF2eaplbEaI8SPt
Fi0JWLokqvoYwRhdq6naS1d/R06ly7iGG6lsum4KVcV8D9B1UWOhUpQriype
6rHII2uX19HVxSOCMZT6b39cotRc9so/RtdFiC8YUa4UqmypcyKPrF2eT1dO
PKKlC8uhS3pzxpOCussZ5cqiSr6PJZlH6OLt8qo1ox1Z5+jyxiXqErfGNlmz
G/S71NX991/qN4HHqBqIRzjq7y37FrqMHnvpquuJ0CW+aZrUmNIhl2V2pmdQ
heOKksweuizfdD1ddgTGOYKtfiDrLXUm9roz6GrZBVSJOiuDqqM9r0/vporW
9zG6/Ln4Ubqg9THqlXRm73Vn0IX2EtZTheKKhRSUD5y3g+6ji8+QGKXLkhzV
q+nMSITHnqm+5C6qCJnRqKVQFaXLnyERp4uTXB8nWccm06WURJZ3LlVRurKo
8tIVz5CI0sVKztyFXTRiGV3tzGRSVcx+UGb97Rtxqtx0ueVHV1p0eSXX7kL0
6VK6plEVp0uPpI5TdT66opJrc5pHVyRD4n5uLlXBGB3U91Oek7XXfjPpiki+
iq6RDAl/r7KoCtOVQtXKPWxWB5yLrkieVJyubKr20LVjD5vVATPpapnG8z+S
J+WnaxZVa+nat4fd8/xfHP0fjg==
             "], 1]]}]}, ImageSize -> Large], 
      "Specifications" :> {{$CellContext`i$$, 1, 301, 1, AnimationRunning -> 
         False, AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{658., {52., 59.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7305419090993023`*^9, 3.730541939001545*^9}, 
   3.73054207522521*^9, 3.7305514941516266`*^9, 3.7306418951765785`*^9, 
   3.7307050161810493`*^9, 
   3.730800982863092*^9},ExpressionUUID->"bd20ba6c-e4dc-4bb2-ad80-\
18f1094917c3"]
}, Open  ]],

Cell["\<\
Another set of functions were developed to quantitatively investigate the \
generated data. This allows for separation of the generation and analysis of \
data. Using these functions, any traffic data in the specified format can be \
evaluated, without having to know the full set of parameters used during its \
generation.\
\>", "Text",
 CellChangeTimes->{{3.7305421012898054`*^9, 3.7305421281183167`*^9}, {
  3.730542289209276*^9, 
  3.7305424483817897`*^9}},ExpressionUUID->"fa455812-b880-45b8-8b7f-\
73456a97b461"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"numberOfCars", "[", "lanein_List", "]"}], ":=", 
   RowBox[{"Count", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Transpose", "[", "lanein", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"u_", "/;", 
      RowBox[{"u", "\[NotEqual]", "0"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.7305425007503824`*^9, 
  3.730641565658429*^9},ExpressionUUID->"169d59fb-9409-4bce-adbb-\
77cd2b2eb8ad"],

Cell["\<\
Firstly, a function was implemented to count the number of vehicles in an \
input traffic data. It simply counts the number of cars in the given lane  or \
traffic, thus giving a way to extract the traffic density data.

Next, the throughput of the road is measured as the flux of cars (sum of \
velocities of all cars) passing through the road.\
\>", "Text",
 CellChangeTimes->{{3.7305424552104225`*^9, 3.730542544086176*^9}, {
  3.7305425826469254`*^9, 3.7305426593675528`*^9}, {3.7306415884716067`*^9, 
  3.7306415955793867`*^9}},ExpressionUUID->"fd990f56-dfa0-4615-913e-\
fb4825b68fff"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"totalThroughput", "[", "trafficin_List", "]"}], ":=", 
   RowBox[{"N", "[", 
    RowBox[{"Mean", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Total", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"trafficin", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "trafficin", "]"}]}], "}"}]}], "]"}], "]"}], 
    "]"}]}], ";"}]], "Input",ExpressionUUID->"8932d29f-d50b-4740-9354-\
1a172bc4e96e"],

Cell["\<\
This function takes a list representing full traffic data. It calculates the \
sum of the velocities of all cars at each iteration of the road, then takes \
the mean of all the results. With simulations running for a few hundred \
iterations, it gives a good estimate of the throughput of the road resulting \
from the given initial conditions. The result still depends strongly on the \
initial state of the road, which will have to be taken into account later. \
During the traffic investigation, the throughput was the most important \
quantity considered. \
\>", "Text",
 CellChangeTimes->{{3.7305427125939393`*^9, 3.730542924305503*^9}, {
  3.73054296420779*^9, 3.730543008654396*^9}, {3.730543067251313*^9, 
  3.7305431280006843`*^9}, {3.730543320069518*^9, 3.7305433826627254`*^9}, {
  3.730546916671981*^9, 
  3.730546925684968*^9}},ExpressionUUID->"00de7130-376b-4d0a-bff9-\
ea73c3ce17a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"averageSpeed", "[", "trafficin_List", "]"}], ":=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"totalThroughput", "[", "trafficin", "]"}], "/", 
     RowBox[{"numberOfCars", "[", 
      RowBox[{"trafficin", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",Expre\
ssionUUID->"c0772110-9771-4c2e-9c7b-1c52102808f0"],

Cell["\<\
The average speed of the cars is calculated by dividing the total number of \
steps advanced by all the cars in each iteration (throughput) by the number \
of cars.
Both of these functions work for only cars or mixed types of vehicles, as the \
data structure is the same in both functions.\
\>", "Text",
 CellChangeTimes->{{3.730543132889612*^9, 
  3.7305431760247087`*^9}},ExpressionUUID->"5c35e0a9-7a72-4735-9386-\
fb3177155fca"],

Cell["\<\
The set of independent variables in the model are the density of traffic, the \
maximum speed for each type of car and the probability that cars brake \
randomly. Now the model is capable of generating traffic data for different \
values of these variables, which can then be plotted in the desired way. For \
example, throughput of the road with different densities, ceteris paribus.\
\>", "Text",
 CellChangeTimes->{{3.7305472987288465`*^9, 3.730547351481872*^9}, {
  3.7305474965422688`*^9, 3.7305476152764907`*^9}, {3.7305476617251387`*^9, 
  3.7305476883716946`*^9}},ExpressionUUID->"893a0f35-3847-4cb4-b6f6-\
22fd25822396"],

Cell[BoxData[
 RowBox[{
  RowBox[{"throughs", "=", 
   RowBox[{"Parallelize", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Mean", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"totalThroughput", "[", 
            RowBox[{"generateTraffic", "[", 
             RowBox[{
             "\"\<random\>\"", ",", "i", ",", "5", ",", ".1", ",", "200", ",",
               "100"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "1", ",", "10"}], "}"}]}], "]"}], "]"}]}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0.05", ",", "0.35", ",", "0.01"}], "}"}]}], "]"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7305477232927485`*^9, 3.7305477916253195`*^9}, {
  3.7305482067699175`*^9, 
  3.73054820684813*^9}},ExpressionUUID->"a45ebde8-4e8b-4d9e-b69f-\
1730b7c06c7d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"throughs", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<density of traffic\>\"", ",", "\"\<Throughput of the road\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.73054785746681*^9, 
  3.730547902716782*^9}},ExpressionUUID->"53aea737-da82-45a7-81f3-\
61f9ab48b602"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWsmCKy0z3BaysXM5eGwU671deCOdfanmvKuJX73
cXgTuAMostH+SMxF66h7AQ7VIuvcH1Ztsd99fJm+kWqwA9f1xQW2XNvtNxnV
KHP1hDqAjZu5075qwu66bTvCHTRj+g991dhjX+z6PuOnSJTDDrD5++yXPXN8
98syxmEJUPf1xQfsP2x82e1TGAe176D9qufreX01EhxMjEHgsL0wyADJRIca
sP1H7Cuye5gZ/yU6AA0H2nDUvuj6eTHt4iSoe47b/8p2FtZSTXIIAlt4wv6R
dGDCJckkB4h/T9pPfQgU2JTo8KgKZOAp+98g9VcTHbTA7j1jLz0rYOWhgEQH
sPMKztoDZUMlEhKh7j9nvzfq65+tjIkODGBwwd7y+Ht5zncJUP9csK/bFiG5
72CCg8dDkAUX7RUPvHU+ZZkA9d9F++qtr35mGyc49IM9cMm+T8Pg5RWdBAew
d40v23cwTfY7uzjeAeyd65ftp83QrnLPjoeG/xV7kPMahOId5EHOkbtqn9S5
c1H5lDiHw+DwuGpvsOBJ6vptsQ5pYHDNHqR80vRYBwA/ouda
      "]]}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"density of traffic\"", TraditionalForm], 
    FormBox["\"Throughput of the road\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Large,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.35}, {0, 147.5990099009901}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.730547859423453*^9, 3.7305479042792025`*^9, 
  3.73054823087912*^9, 3.730551522603265*^9, 3.730641923784269*^9, 
  3.730705049634281*^9, 
  3.7308010120971785`*^9},ExpressionUUID->"ec22508f-cb69-4443-9b83-\
9d36cc6ba78c"]
}, Open  ]],

Cell["\<\
The above simulation calculates the throughput of the road 10 times for each \
density setting from 0.05 to 0.35, and averages them to reduce the \
uncertainties arising from the possible variations in the initial state of \
the road, e.g. if the random seed already contained a traffic jam at start. \
In the report the simulations are ran more times, but the task is \
computationally demanding, so for purposes of explanation it is reduced to 10 \
in this case. The number of iterations for each traffic simulation was also \
reduced sacrificing accuracy for efficiency. For these simulations, the \
Parallelize function is remarkably useful, as Table functions are \
embarrassingly parallel.

Investigations of 2 independent variables are also possible.\
\>", "Text",
 CellChangeTimes->{{3.7305479583473945`*^9, 3.7305480330269313`*^9}, {
  3.7305480811995554`*^9, 3.730548194308612*^9}, {3.73054826275486*^9, 
  3.730548359634395*^9}, {3.7305485115902367`*^9, 
  3.7305485331515102`*^9}},ExpressionUUID->"004f3c99-e3a5-4fa0-810e-\
6acb30cbea04"],

Cell[BoxData[
 RowBox[{
  RowBox[{"densitySpeedThroughs", "=", 
   RowBox[{"Parallelize", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Mean", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"totalThroughput", "[", 
          RowBox[{"generateTraffic", "[", 
           RowBox[{
           "\"\<random\>\"", ",", "i", ",", "j", ",", ".1", ",", "200", ",", 
            "100"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1", ",", "10"}], "}"}]}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0.05", ",", "0.30", ",", "0.01"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "3", ",", "8"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7305485705631733`*^9, 3.730548676148713*^9}, 
   3.730548732919324*^9, {3.730550139332062*^9, 
   3.7305501452694225`*^9}},ExpressionUUID->"1d8a72b5-e7f1-4caa-9bd8-\
0d239b76559d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"densitySpeedThroughs", "=", 
   RowBox[{"Transpose", "[", "densitySpeedThroughs", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.730551883836972*^9, 3.7305519083508773`*^9}, 
   3.730801053516611*^9},ExpressionUUID->"34ddcc40-bdb9-446a-8445-\
166f592e637b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"densitySpeedThroughs", ",", 
   RowBox[{"ImageSize", " ", "\[Rule]", "Large"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<density of traffic\>\"", ",", "\"\<max speed\>\"", ",", 
      "\"\<throughput\>\""}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"densitySpeedThroughs", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", 
       RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "densitySpeedThroughs", "]"}]}], "}"}]}], "]"}],
    ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7305500714712515`*^9, 3.7305500836700277`*^9}, {
  3.730551669292961*^9, 3.7305517396503925`*^9}, {3.730551799838727*^9, 
  3.730551841574363*^9}, {3.730551937995894*^9, 3.7305519544477654`*^9}, {
  3.7305519867917447`*^9, 
  3.7305519967289753`*^9}},ExpressionUUID->"77375d35-22f9-4f80-bdfc-\
4b05858a2fa8"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJxlXXd8VNUSXpayCYSwkEKABDYBAoQAoXfuoUhHQu8kBFEBQRQBBdFFEBsq
oBQRND5FQQWj2BVZFaWogFLFFvWBIEhRlrIC+87MPTPnt/Pyz/7ux+Hb3XPP
PTNn5pvZzKLbB0/yejyeMuU9nrIe+jvn0OuRNJ/3x086KfMPivBA/M81f1dd
zXUc485La3+/VKWHufYzPn9Zo+fi/uhprpMZ/7Kdv/TiC33MdRrjnUd3+WvJ
3P7mOp3xbsA/cKC5DjD+WbWZN5yNG2Susxhf/dsjM94qHGyu6zHeemTR5hNb
h5jrbMYvTjn4z+EKw8x1Q8b7njuU5ntguLnOETwjzHUu4++OrPFJ1WMjzXVT
xvNOHui0s/Noc53HeO1nP9mZPHCMuW7OeIsRF55YOXCsuW7B+Bdt/xN6aeY4
c93Sfv4jF254+e7x5roV4/XvnrqkbGaBuW7NuKr2cesvJxDexuLBHx56+h/C
2zI+pdv6imV3E96O8Zzn4hpUmkt4e8b/nnzLgQffJ7wD41tbf7nA07aAr91X
j9o89/rRfT26K7qm1xp6GXap18tcxzEenHZrt/W7+5prP+Odq96YeteWG811
MuOfVC2fva4DrZM0xq/2euC9L9NoPaQzvrD+8Ud/Pj/UXAcY33wio8nzh2g9
ZDGeV/zfSW8Mp/tej3G8L+3ovmczXrbM9DqDz9B9b8h47SbPz+45n+5vDuPI
34bmLZdxf6M/Ll+bWGiumzI+77ZI1pC1hOcxDl/r26IJ5ro54/Bx9gwivAXj
O87Wif+5IuEtGa/w9MenDx4l/laM14CJvkZ4a8Y3N08s9/46wtswvn7IP4E5
8wlvyzg+LwMIb8f4ox/8Z87buYS3Z/yPNyoP2FCO8A6MZ8x+ckDBS3K9xakX
m25f/2m13jyO8PG4EfTna3p9sG9Khad/zDfXfsb1p792W3NaP8mM64e344tP
0H6SxnhF2D5Lad9IZzxuxr9L7zwzylwHGJ+qP83inrQPZDGelv/3WyP60fNe
j3GYzms8P9mML9fbcIPGdB8bMq4nYeYNvxCew/jx9G3317u7yFznMn54cfbQ
Vz2EN7Xju56JfL+cePIYPwLjQ3K9xalXPwsuX/WNXG9xqvozeuMukustTnWC
G9aV8FaMLy5Tv9m81oS3ZtyB/a0M4W0Yn7hfv8MHcr3FqTlv33u0xgq53uLU
J3oWpvaX6y1OnbhZr6wMud7i1AN9XjnedY9cb36lN6XEj3wDDE7rza/aniqZ
dxvvS3GMJw7YMHRCYChf0+vsI53bzD9P+08y46dueWzFrx/R+kljvMUXSb/e
1JXWTzrji2/vsaBPA/qcAcbvrVuxf4f19L2yGH8Q5nk9zWc9xsdMTI+b8UOR
uc5m/JnGc3t99QrhDRnf87X+uyrXm191Ars/hcbnMt76z25ja95LeFPGJzyi
N4JWhOcx/l4VvSFukuvNrx7wwL/I9eZXZd+f37v9Q3K9+dXI157b1maoXG9+
9RpsNCPletPzf2Vq96Sacr35VZc22gP6RK43v/r5W20hF8n15lfd9GNU1Fqu
N7+xX3K9+RWY9zL/t96S1eDqv31XuIv2K1pvyWrNM/qvBq2rOMZTG3/e9j+F
tC/5Ge959tYrb28Zzdf0+u/3RZMuv0x2Ko3xyeAnTKHPmc540SUwhDQ/AcYX
LF+1dXT9ieY6i/HvNt6z9KOmhNdjfPmN3yz8MVxkrrMZv3Kt7qdj9hPekPHo
0X2L+q4gPIfxGYcmXDqyiPBcxtGO1CO8KeOw/X+cS3ge43i/yhPenPGeL9+d
tfa0XG/J6m7YZybJ9Zasvk7Z+uKxhXK9JasKtz9+RyAg11uya0fy5XpLVnv0
7Gw5KNdbsvGX5HpLVu/qjzNrglxvySoPNo4ecr0lq1mZTSuvPCLXW5ry9tWW
M4XsIK23NFVNL9s1O2i/imP8sQaf7XpgOq0rP+NNKq9c3Xg02bVkxrWX1s5f
UsjX9Ir2d0GRuU5nPGtt7ombH6f1E2A8Z5i2nN3kektTP4W3fLH7HPHUYxy2
w9ZVaHw242BOK/1J4xsyfqb77vb33U54DuO7H5h+aMIOwnMZx/XcmvCmjF+H
dXsD4XmMN5v3zp9XKhHenPGW8Pe7XG9p6qtX1g2q/plcb2lK71Y5w0bK9Zam
ysN6U3K9pamyT+kPmi7XW5r6/dKT5W7/Sa63NNUfHOjn5HrT89xFH+Rukest
TS2784lfnBZyvaWpmrDgsg0eLGfwc84Eteur8Qe7CdyjthQ/O+tIc3OuDNpz
6M3w16WXwD3qwafK//R6Y3OuDKXy+J3g967sJ3CPim9Q6cNRC+lcmcHj+8AC
9eQL3KPgNJI41fiBxZk8Hj5m58BggXvUznHOmNcTzTkiZM+tne/XD3D7oQL3
qH/h/PKjeY5KG/D4MDhqU4YL3KPG1sxtPuIm2rcb83j0KwaNFLhHNbzn+9eG
Rc3zHrDn2YGL9MTdOFrgHtfP2WDuV7E9574KB5izYwTuUYkf7Xi5Ga3DPHvO
vf7OC/ErXhoncI+CZfgj+XUhe/4dte+bDqcvjhe4Rz098+r1ZRfM58m35188
rj1ZIHCP6gcb8VNmfKk9F9eHfWBvgcA96n448A8x42fYczHa3xUFAveoIeBI
1ZLrOU49v61NqxdWmnUYtOeLl5vpjXi+2Vd5HcapLSO0g5JN9jqDcfSLFpn7
wutKnxfAr/7TzGfInhfQn1lC37cB4/XAsThAz3tjxtFv6VTkXges/w/H+vdW
mPHF1v/veBoiHPL+xrn721h5H+PUBYgbtDN4vvXn10CY5JS8L3FqKByEnpHz
H6dKb+ra9lRbOc9+hXGPH8xzF7R+9aRHtUHqa+aT59mvEuABmEPn9AzGtffT
M7nE3F+eZ7+7H86i72X9ZNjequ0088bz7Fcf6ePsvT6D8zz7Vbv/hF4aMtPg
Aev3wjRXIT+k2Pq9beAfvpXz7FcvHtu/Z8N8Oc9+pa3s3F4j5Dz71Rdjv+04
+pqcZ7+aUvu/m59/TM6z392v/m+etX+lj7NPnDf7XtD6k+u0Wc6oZuaT5zlZ
3V5n8J7zB8mvyGAc40sV6PtmMj7zBu2Y5hq7HLL+Ie4DJ8x4nudk1Qz8imcM
zvOcrHK12xsaavCA9feOwg3Oofe1/p4+Nb1yPCznOVm9DwHNKXKeNQ7xwPZy
npPVYe1+Xmhk8FLrv2G88Ws5z8mqlt62LwyV85zmngcPmn07aP0o7bW3/PND
2g9TGceXc/RcZzB+E6z/uWY+eZ7TFGzPLTxyntPcuEEZg/M8p7lxhjlm3nie
09y42X0GD1g/B46V73Q1eLH1c1oklnt//t9yntMUfK1um+U8pylYnk16ynlO
U494tcWIk/Ocpn6BfexlOc9p6l7tXk3Nl/N8xVn5a61Bhc+ZODbP89/OVnjA
Rpo4Es/zvw7a2Sw619M8X3C2Y/zW4DzP15zXh+0tqHXZ2Gue54sO+r37pB2P
Olf14/VLmM71NM+XHde/NTjP83kHz19fkl2geY44r39+5s2Tv5vnjuf5H+e7
RfrEo6Q9veq8dfKx/ueXSHsadvYXasPzq7SP1x24jb27y3m+5Gjr+MgHFB+m
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
jv+f/fW5+bUl0j56VXW48a0Ernl8H5y65bEucrxPXeqZvPqu3tKeehWkl3+r
KHDNgzqxanK8z9W51ZT21KtQdrdZ2E24Xz+9/vmZj6Q91esQEpC7hD0NxivM
Cx+TOqsEhfnflweK8Ylu3mQL2Smym/FqI5zHPX1icc0z7tuOo7s83leMT1RV
V1Xo93UNaTfjXf3JPVLfleDGee4bLMYnKliery4ku+ZnHjynHxO45kG/seow
MT5RJUKCp7PQiWmevbBfjZD6sQTVCQNeI8T4RHf//4fsVBrzFEGe8S2Bax70
x/yjxfhEhX747WRf0pnnXJ34n2ueHB2Lax7UnT4qdGuaB+NsueS3B5gHwvbd
246LxTUPuOfzd8rxieow6NvZz89iHsxrdCyIxTUPHAefmiTHJyo8J1Jci+1m
vJuX3FQYi2secIfbLJLjExXI3z4cXWTwbOb5B/Khd06IxTXPCjD8JwWuedqB
nrCQeBoyD/pv/5X6zwSF8ZkzAtc878J8XhL2UfPcfFlvBBzXymGeZR/d9+7I
OwSueT7WcI1phOcyD8gK9lYXuOZZ/H6rkUVd5PhE9dSqraPDNxHelHkGFNz0
aIM3pd1McPOevwtc82D8MJV48pgH7ftWaTcTXD/wPWlnExWkE+e+Ke1mvKsH
+07azQSF+aOjcnyi+vNAp53jfpN2M179ro/dwydLu5mgHm+Yd/LAXXJ8ooK0
0pCgsI+a59OXhvwTuEHazQTVFwIEfeX4RLUf7F2+tJvxahMc+DtJu5mgnoF4
Qk85PlEtgnj7IGFPNQ8cR4ZWkHY2QYG87nRlOT5RzQOhAOVH2G7GK71L/vHG
h9JuJqh9kLf6WNrZRPVOS33S2irtZryKgI5xmbSbCSoH/KIlcrx+Tl/XE/GQ
tJvxrn64t7SbCQplp0qOT1Swfb7dXtrNeDf/VVfazQSF526pe4fn9IX4FTmt
hT3VPKUggN4j7WaCmg8bscQ1D8ZP9kh76nfrFFYOisVDVV093r2DY3FPkltH
MIHsFNlHv7oVDgbPDIjFNc/bX+w+93i5gbG45nGni+wy2Ue/2guB8oeFflXz
YDxhybBYXPOg37WU7J3Nv+RDfHKy0Ltqnju0+zxr5chYXPNgXvtzOmclMw/6
e+2FPlbzoN9455hYXPPMgQDZ62TX0pgne90a3wf7Ba554sAf6zo+Ftc8uG+8
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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
          "]], Polygon3DBox[CompressedData["
1:eJxF2nccv2P1BvDn8zwPIhmJzB8Skb2SvUX2lr1FdiUje2SWEZUQsndGtsxk
ZIUkm+yVFUK/6/09z/flj+v1Ofe+n/tzj3Ouc2bccpe1dm6bptm1a5o+v+/l
d7n83h78ORkLBKdH/r9g1VHTbJnylSOvEsyUhp90Jd8V3Je68wanRZ42WC71
/5fytSPfGzyYsvWTXj7yCsGkab9d0qtGXi2YLelNkl4x8krB1Emvkj5WDuZL
2/mDLyRv2ZRNl7ydkn4m6QmT/lKwbfJeT3rSyF8Ofpz0bcEckSfJ70ap/0D6
nyTpS4Mzk/5X6k8UeeJgx1F9ozHnH779/q76vjA4I+mZkp69qT71/UHS37FW
wV9SvkbSyzQ1R3P9KOnvKgvuSfmHXX3bncHdSZ+aOj+PvHD6etf3pPybSV8W
XG5+Sc8T+Zrg6qR3SHr1yGuYQ9r+KOl1Iq8bLJH0q0kvHPnG4IbUXyXppSIv
HbQpfyPpxSL/CVL+etKLRr4Jkl4o6QUjfyt4KnPaNW32jzxv5H+lfJmUL9JU
m7eTt0DS80deIPhn0m8lvUTkm4NbUv/tpJckB7cm/ULSc0f+IyT9zaTnairv
3rR/Ken5Il8XXJvyl7uay/Xykp476XmbqvNI6n8n6cWbGvOjpBdNeqHI3w5e
Uh6sENyV77g7WCvymsHDkR8J1h5VHvnR4P629vp0wXeTv1KwYvDX5N/X1p5e
Nphn2Ov6Xj74S1tjfNrVf3N3cH/Kd056zchrBQu2n/d53zDWu139N7cGd6T+
gsGZkaf3H6fe6sFq+k+9u4LngjlTdiX0NecZI8/Q1Lf4Zt8+RX63Tvm3g7Oa
qrPeqLBusNBQNupr7/w1+FtfZesE3+qrzsLBOSn7WvC95P8y4x0VeSH/te9P
erekZ0360b7OnLM3yu8yST+X8m8kPUuwTfI2dg6DJ5L/ZLBo6pyXsq8Hm40K
mwaL9FX2afIvCGYOtvRNwVajOvfPtpW3hfXsqu5OozrHS6Ttkn2Vbe7/66rO
NkMf2prbUqlzibsn2Nle6OtsOCPnJn1W8PtgjeSvGRwa+ZDgo7T9OPh+5O2C
xVK2+ICLmvpmZTsE24/qnnkx+MGQR35pgLFnbarMWGcG4w9jmpNv8i3mumvk
XUZ1jzX53W1UeeSlU/5mW3eTO+pHyfthsPtwL77Rfp5HVne5tLl8uM9+Yi/3
tbfssb1HlbeHPd9X3b0i7xk8mPEf6mpMd5U7y1z+29bZdEYPS/qg4MDgb6n7
cPDTyPu461LvvWDfUeWR329r742Xth83tQe/09dd4X44IGX7B/sFnXOdshX7
uhvdkQePqg913Sn6HttmhaGv60a13hPld/3hP71puM/816cHvwsmdO8H43V1
ntwpv07+ccGx9nryx83vr4KTgnGkg/W8YdbTd6fv1YIbhvvot8k7fuhD25X7
6lMf4w5jnRz5N8EqKVu1rzrXD/fx8cPZ2TD4Z1tn6GvBNs6nPd7X3veW/a+p
M6Av99l4Q59XjOo9mDC/lzn/ab9h0tMkfXtf5+SLSZ8f/K6vM+psztTU2d3A
ugV3p9493iJ7yv+fvMdT/4xhDa3dRMGJ7oygjdx5C/u62+2RI5J/fnCeOyNl
kwWXRb40eDLyU13Jl7gvusqzp5xBZ89e+8rw3ngDLkj+xcFFwdoZZ52+5uC/
9WaZ2znB2cE/kv94V3M7IRh1NUdtbh7eE32dGpwS/D1lj3U158ODlfr6lqar
t88beHTyjwqODD7L3P7X1n/uP1112Avd8J55Y63NBcMa+Hbfsnpfb7c3/LTR
533qy1g/oJNE3CD4b/JvSv5vIi+lTl/7YvykJwg2Sd4RabNZ5M3dryn7Xurc
1pR+ckPKrx/VmXAWNgjujPznUb0zzwdTJm+n1P1n8GrkL/XV18PB05G/GGzq
7QiejDx+sFHkB7WJfFD62LipM+FszDHoP3S8ezLOV+3ZyI8Hr0Tesi9dkk75
95Rv2pduRcf6S9LXBtcE06Wf/ws27EtXpbP+yXoEN45Kj3qWLpXyfVP2r+AT
Z8kd1FTeHzOf3ye9c+Rd/H/eqtTZJ/ILwUeRp+6r7Ing9b7GvjqYtvt8DtaS
zmdufwyuCtZN3fX6z9fY2lr7TYI7mtJ/73CXdXX+rNkadMGkt4y8lfcj6Qfd
9cGLzod7NHhoVHrQPMH4bemZdOGdg7tTdteo9KrZ7XF7PVjQvnO2B/3NHrPX
Nu9LF/Wf3Jd6/aA/uXPcPfMO+j2d/+FR1flrsNnQ1n9oTGP5byfy5qbuI8Ez
9IdBH6KzPj/M5bFR6Y3m5D9+NNhi+O9PTt72qbuD9yffNUlfa/Fo8Fzk05yB
pvbMwW3NyZpYC3OdvK+2/whe6uub2RZsDGtxQlf35bbeK/dHX/JjwYuRJw22
tvfMN/KvUn87/0Xwk7b+i/tHpZf7T/yHtwcbD//tzV3pywfYj6n/8qh0MrrY
NsHTo9Kr6bWvBO9Hfi94M/JU+f00+GRUevO/g/9E/mBUeu6K2oyqT31tO+Ce
pvRLZYt3JdM5XzTP4IVR6cWLdZ/nkdU19rujsgvMYbu+bDU22+vJ79qyG+ip
0ya9Y19n237tk79SV3fR+sGHKV+tqzJ72tsizzeYu7qNe3FUdsmqXfVhjLF9
fzasgW9/x5uasnHasqvW9G1d3SXulPHagjpjy3ZJHw8N980Ebc3BmMYyt9lT
vp+1CT6N/FrGenVUdtNrxjR28P2UbR/cGvmW4Ospmzk4ryt9d3f3N1uhL/mp
4O3I09DR3IXBG5GnD37orgz+3ddeYTeyRe2ZcfpaP3f63yPPEuxt71lP9TPe
gZEPcl9kvLn62lsvBc04uW9SvldTbS5uaw/d565tam+Z+82jslvHfoO7hw3u
27bqy1ZxRp9Jermu7AE25VujWgO2gTxrI+/NYNmu6l7U1fv/4+C0tsreGJWd
qM5zkZ8dlV35bXNIf3s6y8EHdMfk7eFsBWfRZ/rq65ngvb7uDH1ou/BwB7Kl
2dTuxkm7evvp7GsNdy5baumm7uIdu7oP3CnztqXXzdCUPUTPljcPvbyruvSp
GYOtIm8d7NrX2+aN+1Jbeh9uA8dxXspmph8Fe0T+SV/v/lQpmzo4xvp1dXe4
Q2ZtS8+Ypqk+6JHaPDbcRzMPc5m7LTvfnPbu62103y2U/G+1ZUfOnLZ72b9t
6fp0cLr4nG3xAuzQz7r6lhna4m18E55HX+7QBdrSW9m6dES64vz097bs1l3s
ra7Otj36neTv2dfdak3naqsPbXYZ+p6tq7fdm+3tHte7F/kBd2xfa+pbx+is
ba3JN9hRXa0VeZa2eCF5bHZrZc3Y8uyGr0SevCk7gF0xReSrg7P70ku/QA5O
6UuvnKkpHfbCUdktk0W+Ivh9X3Z1jlFzRnCyt7Abc100p1qPvux+1xZVDw9F
5/o42KEvXQyPMG5TNgvb5ZFUnjLytcG59LGuxmbjXpz0Val/UuQl9NWXXsnW
Z/Of35d+fnkwpfegKzvzq031+bOh7A/0pq7q0IvZxmzkS9K+7evsuwMe7qsP
Z2GppvrWji3OPr0y6ae7ktmsf+hLL2brs/kv7EvPYZuymeiJ07vz2L7J/2/w
5bZ4vOlTtlvqT9ZWHnn3YKnISwY/pYcFq0Re2b0d+QtDHt2KjqXuAV2df3cK
22LxYLHgx+6JrvJWC/bvqu6GdNq29NAJ6aLsr+DIlB0VHNbXXep+3GIo27gt
vXhsHWXuUG0P6etuckdtNIy9aFs8mzksE3nptta564v/WD7YO2X7BBOaS1s8
6vtdvUF0NLqZt2n/vt4Kb8ZKbX2Tb6eD+tavdXU302npttbqu22dI2u2bFtz
MHbf15j68iaZiz5XDPYbxjK35do6x+a4QeT1g4NSdnDwYVu2OhuaLa2Mns52
VWfayNP4fvfyALrYVk2VvdOWrY0zwB1M7ny2xYv+J9isq7pbBlMl/4d96YZ0
xCmSnjiYqC1eeIOu9tZ0bfGm9pg9xNbYvKm9NcnQRt3vDVDGxlFmjCmDTYex
yV9ti1eWN/YOdXe6W9dsS+9mt0zgbe3r7bEH10r+423dH84DLuyQrt4qb9a6
KVsnWLstO+fgrvbmqm3p9faoNX62qTbWfp++bCk21SJJ39uVrXauN4W+nLxv
t8Wbu3T+1tZ75X7ADY4d01jmgnfM0RtzZy3DLhiV7cKG2TqZO3V117uz3d3H
dmX7sIG2S/mOwQ/a0nu/TJ+MvE1bdsgvgsP7sp202aGtNuoo09cezmbw68i/
CXYa+tTXZHSfyLsH82VeRzgDzkJbevgvgxO70mfozLsOdcfq5dro+0dt6eFj
xzioKZ3I2PqkC+nDWOa4ffCzvua+X+R927IrfhssSNdzlwaH+87gGEjdnwdH
Bi+n7BBrlPzT3SGRDw0O8v+1ZZewM6YITumq7sG+wbjBYW3ZzVMFR7mLgrNS
7+yu6piTuWhrzNfS9oim5nL40Ie25qrtEW3ZqWP7UPfwpvo+MDigLbvod12t
oTUeu7bHRT42mDb9TRf8KvJJ9lj6/kVf8lg9Vt7x+X07fR9nzyf/gvRxdFOc
L+73N/7rtvTaGYKz29LbFk3b4/rq842m2hjrhOD4tvTm84PLu+r7WO9vW32q
o8xYp1ibtvTKi4OThzGNNWNwiX3ZlM/k1OHbftGW3u0bTwj+nbLjvafJvzK4
oi27/4bgQt/Ult58dXCNfZi6J3gD24I6Y8tOTH/vNFXn0rbWxDf7Vmt1Y+r8
qqk33dt+XnBuW3ruzMEfIl/WFq8wa3B5W3nk2frq8xLr0NdYVw1zNtcxfSfv
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
s8HZ4jh4XLx33ruP58Z9u8Pd22LY+dzxoLjW2YY6ytztvomvkc3gW60NX+Sh
g54kXkKsBRuCLYGPYMuwacSjiVcRu8OGZEviR+jWdGyxUuqIXZtzaMu+Fdsh
Zoh/lj1Kl6RT8u/rgy3IJtS3mB2xOzgOvIU1ELuGE7A2mwx1lOE29CFWgI2r
b35gsXpsRrYjHyRfJLuALbNnV7o5HZ1vnL1Ct6Pj8YXaI/a+M2DvyONrZ7eo
Ky5MrBkbki3pm4y5zvCt1oxuQ8exltZEmyWHtTImX/1PhrnwYXx9OGPOGn2Q
LkYn418GvmY64r7DN9AN6Ai+jb7B14ajxlVbE7YTG8pa8evwJXkn3VNiCvh9
2Xm4DDFgYsFwDrgHPnW+dTY+W58fnC+eTk+315bvmI2oD48XXyobla2qL7F1
OA590p+ObMoHxxcnBk4sHJuZ3ScGViwszgp3Nd2wx+1tuq0YU7GmeDTcmj74
Eulk5w5raC357PnuzVNshpgaNggfIF8gvyJ/o3uFr5bP9oDh/uPL4pPjb+JT
51tnM7Od5fFFuSOvHPri6+Sj1CefEt8SHYuu5e4R64vTcgd5M8Wq4hynGeqc
2JTPS1v/GV8SndF/KaZIbBG7lq3LXvQ2P9+UvjLj8J/6L7099FW6GJ2MP1bM
o9jHMTxYXzEM3fDfsf3U4bul42qrT7oQm9RYYvTE6o3hgfq6s37dDD6yvjhu
XLd3jK4gZlyMDJ4VDyumXB4ZNyuGUyznGN4w+H+7Sg4+
          "]], Polygon3DBox[CompressedData["
1:eJwt1XmwzlUcx/HHfR7THUtIlhhk6Yq6pVLNvYMbakJNC6mQa2vRImY0pchE
lkbuxLSMlmtJQ2VXSHLrpqksxVCRikqLlqHI2G63Xt/5/f54z+d7Pt/v75zf
7zznfJ/Ww0f3fTAvk8nciZrYanCcvpjLZHrVyGR640g2k2lOd/AHoFp8Ke9s
ul7dHvo19vHq0Eo1JVgpXool+EauNu2nvkJcIq4Sr7feu+jAa8Bbw9tCt+IR
Xnu6i9ddTQ/swklzv8zrG/NhLsqxR30+vVGuWNxIvEH8M/0Fhbyz6Fre9vge
lGIwtslVmbdYboc1TojnpXtyQ3wT7wNcHO9iPIeu8Eyx+Jj4VbmF2IvTninn
DZK7A3/ij0B9E3qP3GK6CHt5tWhfXu30/d8Uz6cLUMCrT1ebsxAfi9vw6tG3
1FXSD2Pv85L3n8sbajwsfht1XekJ3kr5VXjSeDK+kMvRXnKn6Ekc5jWj9/G+
p/vxW7qPI3iP0Uexk5dHr+G1Ep8pXm7tjtgo/ht/xXfLNaUj1eWLzxDPV9MK
r8Q+4G5sl6vmdVG33DsuQ0Eueffn4nvkW4u3iFvItUQzXl3eKt46+g4G8Qei
Dq/QeArtp66FeJP5r0Zt+Um8C3jfyt9i3B9DMQR1eRfJTaWz1XUS/yi+X+4B
NBRfEufJXBMxileMorhEcgVy42kO54u/Y49BT/mb4mxiczY5w5er6WncA59k
k3vXiTdB3IG3W9zHc9fhVl7LqOPVM66PEnRDjVxyTybEuTGeh7a55GzOovca
j4xncsn3TI+7Y3wzauWSvXiCNjZuFPffWufyxvKax17HfUh/g4d4HdBNfNT7
Po/VsW+x7ziWvucYNW8Yv47zxF14z8beGheiWl073jjeaXGb+N60D7WSX4e1
6JhLesULdJG6K+JciZ+Rm4V28a1x9uXayj0s1xpF4kPmKsNL8gvkO8d5lptm
PB0txFfGfGpmYDZvqroL44wbl0a/45VhZuxDLlm/LM4Xroq7r2YONshPifuF
Jrlkradjn8zXWPyemiL8Hj0Ob8f9Ss9wf3UD6O3R97JJ/yjifRq/Nw6kvbGU
d1f6nZ/HWbNW+/jN0t66LO4PXRG9lV+TLubNiHeJPpCX3PlFvKl0Gt5HBX5I
e8pAuafijODLbDJHb96mbNL3amiIm8zzERqkvWtp/NbRt3AkL+kNr8U5po9H
D0zP02ZeU/lzsCabnInjvCXGS/FVrIlf0/+WYXIH8pLesCDOcfSm6Fm8a+P7
csk9mUhnZpN7u188XG4E8sUdw/P8WFzP65724I1yh6LnRR9L+1QF7yj9B33S
XljJq6L/xv3y/Hg05l1mPCP2Kpv0mn3iwXKlOIj/rLcM9TE67lI26Q074y7I
d8XhuLvRw9Q0xDjxZ9iGn9L/qiHqR6V3ZUes65nOKM8m73CQN8l4MnbjlHkW
Ih+3yf8PHfLzMg==
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0bkuBUAYBtBr3/edSokCCY+AjsQjqGgoUSCxb/farp2IiIiIiIiIB8BD
oEBj36mdmyjOfPMVk/wzU9rS0dweFQgEuokmsq+z1NNAiT4nw8xTq9/IW+5o
0isdrKKaNr1H9tLHgD7IPUMM88AIj4wyxhPjPDPBJC8EeSXEFG9MM8M7s3xE
ZiTMJ/N8scAi3yzxwzIr/LLKGhfmPOeM/shbyC46adUrZDllNOrX7n3FJTWR
uWSIIMV6EacUUsAJ+RyTRy5H5HBINlkckMk+GaSzRxqp7JLCDskksU0iWyQQ
zyZxbBBLDOv///sHtZs8fA==
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{327, 714, 324, 1073, 716, 330, 719, 333, 1076, 722, 336, 
       1077, 723, 339, 726, 342, 1080, 729, 345, 1081, 730, 348, 733, 351, 
       1083, 735, 354, 253, 357, 738, 360, 1085, 740, 363, 743, 366, 1088, 
       746, 369, 1089, 747, 372, 750, 375, 1092, 753, 378, 1093, 754, 381, 
       757, 384, 1095, 759, 387, 1096, 760, 390, 763, 393, 1098, 765, 396, 
       768, 399}], 
      Line3DBox[{397, 766, 394, 1191, 981, 391, 761, 388, 1189, 979, 385, 259,
        382, 755, 379, 1187, 977, 376, 751, 1090, 373, 748, 370, 1186, 976, 
       367, 744, 1086, 364, 741, 361, 1185, 975, 358, 736, 355, 1183, 973, 
       352, 1182, 972, 349, 731, 346, 1180, 970, 343, 727, 1078, 340, 724, 
       337, 1178, 968, 334, 720, 1074, 331, 717, 328, 1177, 967, 322, 712, 
       325}], Line3DBox[{405, 771, 402, 1099, 772, 408, 775, 411, 1102, 778, 
       414, 1103, 779, 417, 782, 420, 1105, 784, 423, 1106, 785, 426, 788, 
       429, 1108, 790, 432, 990, 1200, 435, 793, 438, 1110, 795, 441, 798, 
       444, 1113, 801, 447, 1114, 802, 450, 805, 453, 1117, 808, 456, 1118, 
       809, 459, 812, 462, 1120, 814, 465, 275, 468, 817, 471, 1122, 819, 474,
        822, 477}], 
      Line3DBox[{475, 820, 472, 1209, 999, 469, 815, 466, 1207, 997, 463, 
       1206, 996, 460, 810, 457, 1204, 994, 454, 806, 1115, 451, 803, 448, 
       1202, 992, 445, 799, 1111, 442, 796, 439, 1201, 991, 436, 791, 433, 
       1198, 988, 430, 1197, 987, 427, 786, 424, 1195, 985, 421, 265, 418, 
       780, 415, 1193, 983, 412, 776, 1100, 409, 773, 406, 1192, 982, 400, 
       769, 403}], 
      Line3DBox[{483, 825, 480, 1123, 826, 486, 829, 489, 1126, 832, 492, 
       1127, 833, 495, 836, 498, 1129, 838, 501, 281, 504, 841, 507, 1131, 
       843, 510, 1010, 1220, 513, 846, 516, 1132, 847, 519, 850, 522, 1135, 
       853, 525, 1136, 854, 528, 857, 531, 1138, 859, 534, 1139, 860, 537, 
       863, 540, 1141, 865, 543, 1019, 1229, 546, 868, 549, 1143, 870, 552, 
       873, 555}], 
      Line3DBox[{553, 871, 550, 1230, 1020, 547, 866, 544, 1227, 1017, 541, 
       1226, 1016, 538, 861, 535, 1224, 1014, 532, 287, 529, 855, 526, 1222, 
       1012, 523, 851, 1133, 520, 848, 517, 1221, 1011, 514, 844, 511, 1218, 
       1008, 508, 1217, 1007, 505, 839, 502, 1215, 1005, 499, 1214, 1004, 496,
        834, 493, 1212, 1002, 490, 830, 1124, 487, 827, 484, 1210, 1000, 478, 
       823, 481}], 
      Line3DBox[{561, 876, 558, 1144, 877, 564, 880, 567, 1146, 882, 570, 
       1147, 883, 573, 886, 576, 1149, 888, 579, 1028, 1238, 582, 891, 585, 
       1151, 893, 588, 1032, 1242, 591, 896, 594, 1152, 897, 597, 900, 600, 
       1155, 903, 603, 1156, 904, 606, 907, 609, 1158, 909, 612, 303, 615, 
       912, 618, 1160, 914, 621, 1043, 1253, 624, 917, 627, 1161, 918, 630, 
       921, 633}], 
      Line3DBox[{631, 919, 628, 1254, 1044, 625, 915, 622, 1251, 1041, 619, 
       1250, 1040, 616, 910, 613, 1248, 1038, 610, 1247, 1037, 607, 905, 604, 
       1245, 1035, 601, 901, 1153, 598, 898, 595, 1243, 1033, 592, 894, 589, 
       1240, 1030, 586, 1239, 1029, 583, 889, 580, 1236, 1026, 577, 1235, 
       1025, 574, 884, 571, 1233, 1023, 568, 293, 565, 878, 562, 1231, 1021, 
       556, 874, 559}], 
      Line3DBox[{639, 924, 636, 1162, 925, 642, 928, 645, 1164, 930, 648, 309,
        651, 933, 654, 1166, 935, 657, 1053, 1263, 660, 938, 663, 1167, 939, 
       666, 1057, 1267, 669, 942, 672, 1168, 943, 675, 946, 678, 1170, 948, 
       681, 1171, 949, 684, 952, 687, 1173, 954, 690, 1065, 1275, 693, 957, 
       696, 1175, 959, 699, 1069, 1279, 702, 962, 705, 1176, 963, 708, 966, 
       711}], Line3DBox[{709, 964, 706, 1280, 1070, 703, 960, 700, 1277, 1067,
        697, 1276, 1066, 694, 955, 691, 1273, 1063, 688, 1272, 1062, 685, 950,
        682, 1270, 1060, 679, 315, 676, 944, 673, 1268, 1058, 670, 940, 667, 
       1265, 1055, 664, 1264, 1054, 661, 936, 658, 1261, 1051, 655, 1260, 
       1050, 652, 931, 649, 1258, 1048, 646, 1257, 1047, 643, 926, 640, 1255, 
       1045, 634, 922, 637}], 
      Line3DBox[{326, 713, 323, 1072, 715, 329, 718, 332, 1075, 721, 335, 969,
        1179, 338, 725, 341, 1079, 728, 344, 971, 1181, 347, 732, 350, 1082, 
       734, 353, 974, 1184, 356, 737, 359, 1084, 739, 362, 742, 365, 1087, 
       745, 368, 256, 371, 749, 374, 1091, 752, 377, 978, 1188, 380, 756, 383,
        1094, 758, 386, 980, 1190, 389, 762, 392, 1097, 764, 395, 767, 398}], 
      Line3DBox[{404, 770, 401, 262, 407, 774, 410, 1101, 777, 413, 984, 1194,
        416, 781, 419, 1104, 783, 422, 986, 1196, 425, 787, 428, 1107, 789, 
       431, 989, 1199, 434, 792, 437, 1109, 794, 440, 797, 443, 1112, 800, 
       446, 993, 1203, 449, 804, 452, 1116, 807, 455, 995, 1205, 458, 811, 
       461, 1119, 813, 464, 998, 1208, 467, 816, 470, 1121, 818, 473, 821, 
       476}], 
      Line3DBox[{482, 824, 479, 1001, 1211, 485, 828, 488, 1125, 831, 491, 
       1003, 1213, 494, 835, 497, 1128, 837, 500, 1006, 1216, 503, 840, 506, 
       1130, 842, 509, 1009, 1219, 512, 845, 515, 284, 518, 849, 521, 1134, 
       852, 524, 1013, 1223, 527, 856, 530, 1137, 858, 533, 1015, 1225, 536, 
       862, 539, 1140, 864, 542, 1018, 1228, 545, 867, 548, 1142, 869, 551, 
       872, 554}], 
      Line3DBox[{560, 875, 557, 1022, 1232, 563, 879, 566, 1145, 881, 569, 
       1024, 1234, 572, 885, 575, 1148, 887, 578, 1027, 1237, 581, 890, 584, 
       1150, 892, 587, 1031, 1241, 590, 895, 593, 1034, 1244, 596, 899, 599, 
       1154, 902, 602, 1036, 1246, 605, 906, 608, 1157, 908, 611, 1039, 1249, 
       614, 911, 617, 1159, 913, 620, 1042, 1252, 623, 916, 626, 306, 629, 
       920, 632}], 
      Line3DBox[{638, 923, 635, 1046, 1256, 641, 927, 644, 1163, 929, 647, 
       1049, 1259, 650, 932, 653, 1165, 934, 656, 1052, 1262, 659, 937, 662, 
       312, 665, 1056, 1266, 668, 941, 671, 1059, 1269, 674, 945, 677, 1169, 
       947, 680, 1061, 1271, 683, 951, 686, 1172, 953, 689, 1064, 1274, 692, 
       956, 695, 1174, 958, 698, 1068, 1278, 701, 961, 704, 1071, 1281, 707, 
       965, 710}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{157, 1177, 247, 1072, 1073, 158, 1192, 262, 1099, 187, 1210, 
       1211, 277, 1123, 202, 1231, 1232, 292, 1144, 217, 1255, 1256, 307, 
       1162, 232}], 
      Line3DBox[{159, 248, 1074, 1075, 1076, 160, 263, 1100, 1101, 1102, 188, 
       278, 1124, 1125, 1126, 203, 293, 1145, 1146, 218, 1257, 308, 1163, 
       1164, 233}], 
      Line3DBox[{161, 1178, 1179, 249, 1077, 162, 1193, 1194, 264, 1103, 189, 
       1212, 1213, 279, 1127, 204, 1233, 1234, 294, 1147, 219, 1258, 1259, 
       309, 234}], 
      Line3DBox[{163, 250, 1078, 1079, 1080, 164, 265, 1104, 1105, 190, 1214, 
       280, 1128, 1129, 205, 1235, 295, 1148, 1149, 220, 1260, 310, 1165, 
       1166, 235}], 
      Line3DBox[{165, 1180, 1181, 251, 1081, 166, 1195, 1196, 266, 1106, 191, 
       1215, 1216, 281, 206, 1236, 1237, 1238, 296, 221, 1261, 1262, 1263, 
       311, 236}], 
      Line3DBox[{167, 1182, 252, 1082, 1083, 168, 1197, 267, 1107, 1108, 192, 
       1217, 282, 1130, 1131, 207, 1239, 297, 1150, 1151, 222, 1264, 312, 
       1167, 237}], 
      Line3DBox[{169, 1183, 1184, 253, 170, 1198, 1199, 1200, 268, 193, 1218, 
       1219, 1220, 283, 208, 1240, 1241, 1242, 298, 223, 1265, 1266, 1267, 
       313, 238}], 
      Line3DBox[{171, 1185, 254, 1084, 1085, 172, 1201, 269, 1109, 1110, 194, 
       1221, 284, 1132, 209, 1243, 1244, 299, 1152, 224, 1268, 1269, 314, 
       1168, 239}], 
      Line3DBox[{173, 255, 1086, 1087, 1088, 174, 270, 1111, 1112, 1113, 195, 
       285, 1133, 1134, 1135, 210, 300, 1153, 1154, 1155, 225, 315, 1169, 
       1170, 240}], 
      Line3DBox[{175, 1186, 256, 1089, 176, 1202, 1203, 271, 1114, 196, 1222, 
       1223, 286, 1136, 211, 1245, 1246, 301, 1156, 226, 1270, 1271, 316, 
       1171, 241}], 
      Line3DBox[{177, 257, 1090, 1091, 1092, 178, 272, 1115, 1116, 1117, 197, 
       287, 1137, 1138, 212, 1247, 302, 1157, 1158, 227, 1272, 317, 1172, 
       1173, 242}], 
      Line3DBox[{179, 1187, 1188, 258, 1093, 180, 1204, 1205, 273, 1118, 198, 
       1224, 1225, 288, 1139, 213, 1248, 1249, 303, 228, 1273, 1274, 1275, 
       318, 243}], 
      Line3DBox[{181, 259, 1094, 1095, 182, 1206, 274, 1119, 1120, 199, 1226, 
       289, 1140, 1141, 214, 1250, 304, 1159, 1160, 229, 1276, 319, 1174, 
       1175, 244}], 
      Line3DBox[{183, 1189, 1190, 260, 1096, 184, 1207, 1208, 275, 200, 1227, 
       1228, 1229, 290, 215, 1251, 1252, 1253, 305, 230, 1277, 1278, 1279, 
       320, 245}], 
      Line3DBox[{185, 1191, 261, 1097, 1098, 186, 1209, 276, 1121, 1122, 201, 
       1230, 291, 1142, 1143, 216, 1254, 306, 1161, 231, 1280, 1281, 321, 
       1176, 246}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJwUmXlUjO8bxhPRIpT6pihlKxUpUYRbSKRVi2iRZKcUqUSlhRDabGnf95X2
utv3fd9rptmnmbGEpPKb31/vOc+Z88yZ97mf6/O5zsjZO529wsvDw7OMj4dn
OfeZpvLyeAQPAfXe0lkHlxjYSRl8mSXyGSQ+CjV3do/h+dZXO689nMEVEoqh
ub75cFogpPvr0RGUcn/Na7uJhT08wsynj3Ih2SL2e/HEAJ7Ofv4+qY+F5JaX
de72WZA4QVsvF92HCk06TZ+AjYvqrho/Q9JhnaTCrwLJXvRS9osl+bAxQ1vY
69qdVBCoSz/zX1I3bq7e+vxwKRv5Ns1Tjr9MhrmxjkcdpHZcrV8utu8/Dors
rV6ZeygJWuRPMR/zdeLqQO8cRT4Oeop0DRpqJ4LI7jPMQY9WnEgPlrPQ4uC3
vPy6cUI8CFr1b5oXbEH/E6deOBlxkFh1sj5HNB44nQQeEYEWvBbWw+7nrisr
DLy3ehkH4sdusG8T6tHh2XviOj8OrmfsKE0OjYVOc76H80lV+ERJc+v8Fw7e
Mou/cKghFurT/BuF7Rqxn5V33sCZg+RDV84/i40DFQGlwKHfRRjAiX5EHOBg
elI7v6dYPORljHSIPyvFrXFdhexWDj4W+B3l4ZcMC7PGvI0dtThy7Mtzgdcc
/DwkRmGL5EBC2rftEz+bcUVw4UAF93dpK4fd/6f4GbKtrzhL+cejvOq0yJ8O
DkqybDcHXy4FyyzWfzrf61D0U8/Mmi0cdOb/8vwJtQ4uE83dcrWDIfRyx/dL
bDbK7RAs4bvYBa1so5JVMt2QOn9n09kXLFQ6X/7LOKsbovZeSGlVTAPeY6fS
z91l4ZpLr/6QpodARvmE+51Xg2CScjikVJKGeQKvCsTuEWBgjVn5+0kKfHDc
feeD8TRe2P0yfCBiAJpsjjKeyJJw6GM/J7KGhlnr1yX1mhYAr7l9mMVdAv6g
dKzVKWPg6eEf50vv5oPOyzXWxkMTWJ9XLHDxFxOvEluOzXjlQo/fxJVvpmMI
N+b7bONncEJXee1gXRYc/5hhNyI9jO2bS2Vt7Vn48KF3cBl/Bpxy0kj3rxzA
T2NtCnUTLIz4GuHBw58GbMkCqUe0flxQdCf8WcXGX8cOvV99JQVW7HBrfhzc
g+yXt8+t+sBGzufYjx5tSfDzUcWNceduHM9bd45Qw0Y2q1m0LikRzmjkUnz1
uzFIK+BtSxMbWZL59ykZCfBmxSWhqhPt6HegzmSnHAfFhDLTd/MmQNbSmXOJ
L9vRXJZkO7aJg/SOyt5s1QTwNqBVEW414yHxxX4ecw4aHT9b9lg2GWSDrLVP
RlZja/P4yGIcB/92VSuOcXLg+NKvpsllfejfsEr6xXE2xl1WtIxIL4TyLQ/v
DVW2YdOuCy+qu9koI370QPXfGkjUL9/76L8OED3gdkKlio3GCp8S3mTXQHT4
4b0K79qgN/i7s0YGG5fHOnvKVzXAlXY+vX9ByShS3NJaxZ23lZe2q3brtMIf
Se2nB/JqoPRe+GvLLO4+TO+jmcc6oa5kv5utfz9MZDusGzBkIW9GaRuKt0H6
uqm9KWpd8CrE8mGyHgspWleL3AT7QHIi0+Rh+hh0tX55f8uOgSWMpIB4xQFQ
sI6O9PwwBTEa4qsmSqgo8bK1wOroKFTTTTJWPCOAk2lBYvQdEs6Pl1xSNSRA
e3BZz60+Khgr/MdZJzWFpOVJq2bXjoHnxVgF5ZMUfHwvy6txnIL9+3VGDxHy
4KHgMoP+zyRsYNdOWBnQkBqwEeSP5kHpu+DoRhciPs+6ODIgykA/ke7QujM5
cLWv+qRX1xTaDHuJkBSZ6D4+XtwUnQn7R76LxMVM4MaGyJPRq2ewa+pdc/uX
dJCK1Hjq8nsUD/4Q+VJfMYMpj0RuXO9KhaFlDXef0YZQirEjr4t7j6L/FlMW
r6WAKvOLfrXGEELSTkPaWxY6l1ZsK+FNAaunq9Hl9ADu9dd9uvk3C7fAHhAQ
TYbrg7qniLt78SDUyPQ/ZuOINK9e44ZUeDk7N9/pOYj+ce9V3iexMM6M883Q
9Qs8uvCVb1qDiscbjxwtcyLjVk+zlynydXBc/EUH5vRgwWZc8/PIDL6ny99/
HzIImUzJ4NKqXng4Fd/8UJaNNz3S+7WsqqFFZC7fSS4HeD1WcjS4+Sz84OGW
/LvdUBo8tTbkKxl1d23YGOM8hRUL8x+XvKfglV7KieOlY6CX98hUeh0dfcv5
VQsCRyFRx+9FQwUZruRqkQo2krCjRkBjOwyBpKjLxD2lXui5HWmwn0jD0UdT
R+NyCdCoN/2LTh+Gzd5PWiVVaejaIUoxc52C5I5OTQ0lOkhPXxysIU+ikH/M
vncWg1DTfM6o1YoGtZra8nlPR7C4XK1hkTkJBYkZdaJPGCD9PILit6MHoyZy
TmxiT8CV5I77zlJUWLr12Zkd3I3d0Z2ULaYkUJyN0+WNoMPWXPm0SNMBnH1z
50neoUmwPz8/OBbPgBBb/eeXpDvQOe2PU/yaKYjesLctV5CG1W+eX7dZQUZe
steuuJe5sGhVumKtEwW32FlIq5ZRcHTD5oq+VbmQtm/z+S/ryVhxP+gaYxkN
jzgNbDzkmwXfDp/vGV87je8epy1jJ9JRX0/07kx9Bow/sRt2iCRg3KGkvOUZ
DFT8sWdzlHw6nHsU1LjaegpfXfG7t8qVic/OutmztqWB/P7Id2XPJnBDgG2m
r/gM3hfkVzJYnwqs1gXyvoUBbm7qxu7uYWFQGonpyE6DxuQChf6RCWR+2qNl
+ZWJ9MKcrh3R+XBI8RBpcEcR2uXfsO+7zEZnZvvi1z29EHf9mZmF5wgcGNM3
W681gyErJnX5a9tA36njR/3+URSpkPoersNE2Ze2yrM+vWBnucnPrpmK08kf
BL6/agTfaj2vS+EkmFrUNd2uPQkLr5ddNrbqBqGoQwsVLxjgIyFYZH6We76K
mRWeN6aw8b+PsV8M+uHSw+qTfAbd2B546v0+OhGvqnnNXjhLg+31l8V+JffA
v/tOh7TeV6NQ/aoF8TNseP/fEdtyBwbsfiihcLe7AVs999+oVSJAnYUo1Th3
Gt6u/akd5TSA4td5vFQ+UED49iqVnXd6wPuJ+cDW0BaMK6Lc/MhgwSyvZEeq
HBNeLfZ16pGGcKf9q/DT6wbh9cGNqudm6PCPPOKqyuVJmLdEYO6DCdifuhBa
2MCEFx+nly3OteOdHRz1jSvHQIguvWbelgQT34VchOeKkZ9f4wTnIQ1upqq1
RmyhwNDirfV162vw8tsq/uI0Ctjq/q6X+DMDrx+Iz357jzj24fZX23/D8C9Z
+nzsVgYy1BzXOVoT0StUZibodjYMeK8znL9Lw+0FKm5JISS0X7daJHljNjBb
z//sEqdifHt6aagEBSGWAce5c4XyO6r+fiKhZHJbMM9tGvLFVoutpKVDsucl
sTfLSJhx5/Uy4xka3hnRqtvUmAaBwwFbhfkIWFHW6clazcTFN+Xeya1p8N30
PwdvQSLO6j54M2LJwIzlOQvL83LB4/b3UHLGGCrH6XNzjYHD6heIVb2DoDvu
qH/CJRcpbS+U7x6j4Ka7qzoLyRTIzotw8g4fB53n3kZ0HzIe/7z9zk5/Ioj/
zd3WLMIA/4ZHlE37+9BCefz0f3KT0H/gD7nSaQrCeH+NXR4jYWyK1FrKMAFo
qwLIMRsJMLjN7bqvHhXtVH+6/PEcheiwANFt2X3Q/O+D0wSrCv4YtLTfX2AB
8+SLKo0cMthFrf/0Re0j9J+RWPfXnwr8aibblPVo8LzOn79mTRcuxHXlHT4w
DRH2As2zsSSgVzAoS+d6UXXf3YiL7hRQZ/Qu/JKmwcUDv418BxFSf+pLC6aQ
wPi6jqtWJQHKsp7caz3QBudvLJctyqLDp3q1+8WSw7BAXu3zros73y/SauAc
Ewyp26QeDpDhe/NwSGp3D8x/DJdfe5MMf/V0CnQnGPC+RG/LhX8VGB3kuVQ6
NwXhxz6q73pIBzujP/cLEitxq/naE2PzRPDKsI1kFzEgyLpd58XDbpTbH7pm
JGwChHW2LWyTIQGp1XtY4FsdGo1vPbrajAbSxG1KHrtYEKPN3yS5qwN37Plb
/oLLdbeuDLWzW5joyGMvu2p8Cpd+tx96a5MFPj8v49g3OhbeL/98LZGIxKIj
dRsOZoG/xmPjHV00NF4Ktti6hYRO93JvdAZkQEmf/ttN7hSMPM4siy+hIJ/M
abagUTpY7LUYqJokochqy/l5NRq6WWv+/qicDokrFXFHBxGt7g2v8h6k4z33
8BP3otOg7KHB3q/jPTjG0lu1wZ+NLp4fNcI250C69QnZIuNIiF8ouXBlCxtd
WVp6E679sOdmuAzvt0aQWjH79vozKuz8PqgRN0QCPn09iWHpaWBW17R3LTqi
6oEv7x6l0WGFnXhwM5cvbR5l6ZqvB3FX0UreH6WTcN0xxFOaSATdjC3ez/3H
wUHCYaWCOhkmL9Sc1mc2wKqVdwY//CHjKg5jy8OXFMgQjxi9yCaB6qxovvGD
cfTgMM92qU9D5b/UreGtRTB9byFTZ5iAkk62hOfcnNpzcP8aigcdAjcainOE
W/CAnFuMySEi6KXnz/+IoMBXA5EIGZlSaF5+L6X0BgWc9W6e7yhkgNfJiUel
tYO48s2rKNPlIyAmqVltfnoYYpMesIP+TUAX48Bz73kaCNu9222xQIdF3iAH
KbFUjKvOJihFEcFXluBl93QUhp996renjcDr/3wnyoLpgFlyf3w1Wdz8jHjg
K10LvOe+OBw8OQTmjzdWJpPI4Oiw90B5+gTUN3+ShA8EuCxCVHnrNwOzi36V
QRE1sMYk0rHTfxRamh8vGZwnwcrxLHvXL92Q3b3XZdUaKrSFmKtocnNuYfQA
jqpHoZ5cfsGpMAoUGW94JGnP5Ug3y+bS4Az2m57+dt4uDxKuS5zvNp7CWKkO
wklnJpquqowqscqDI4OMx1LvB/B90fKn0UQW/kj5vGGJPwvm7axuO7BH0XNf
+IuoshmsMbTdFeGYBX9MLXMdw3pR959q1Ko7bBwsZd/QkUwD8eolG6vHgxjw
YUFPo4SFp4b14y6mpUED07BA9U8XEh2zJZN62HiJxpOdoJkMeb8mL60S68el
nxei1Haz8dXqm5XveFLgMKFL9WZnBw6qSlBu8HPwWqd4u8fdRLAnuBqXpHSj
Lr3k8uoyNr5lNVvvHE+EP858d+2+tqCMaUHbv2Mc9Ghpj4bweNhteCA9yqAL
2fyPe5KYbHSLdGk3v5MA1gaWsSrc3ipazP+xk9tbp0o5011hcXA747L1/mft
GB0w6SknzcHTh7YvK9qdABaF5hHVJ2qRX7rM4Wg0B81PyG2zyoqFWeEX+38+
rUfKzQ2Chd4cfDuSLd8qlAFXJP/tUMpowBebZzJfe3CQP0HRfig1Dg6s8/Fw
SutFx5X1O0WN2Ohuc9zaPa4IrOubA5+ElKDu4etG+7o4SFNxvPdrOBHqX7/y
T3qQC7OGN/SvhnDwWIXAnqO6tUDR2C948HcdTrsTJPV8OMjnF2x44HourOVz
OXL4TANcL61QefqdjWSnc5bSZY2w5jnXkeYLcP3K1xXCVRzsq3H68I5SDOYC
K5/MGZbAjftZKdUzbPx5UGeozrYDwrQ0b0qmlOHVjx9qVuzjoCBT9M/5wibw
v7tC/fZ0L5QS7SLVL3A9OeGy04npTri7XHuHh0kH5L38wzrO9aL/1m50Lwjr
hj30xcsvdo3Cxw8ZC16dDHTf2flqz89+OOiSxDCMboLSM4qZlXFMVBo5cXZp
YBy+66rly64hwLdnjq+Y5ykYkOg+eid4Av6G2pjF359GMeMfzqSzdFwu4J3+
0iYXxH7liErFTeHo13thR04xUVR73nbIPhMahJw1q9rH8OJ3L+NtgTO4K2fj
x/gbabCV3NV+s3wIORyOt8pDFjbFWF6rMkyBSlD88iGZ6zEuXi99ySxszC47
FwPJwBsY3N/X2YeCj75/yFVj4wyRPv1pVw7cdXX+rRdPwWU72recEaPg5IYA
dMyuhbKbAsV5q3yhKuxY5LIhNqZWG11ZEuiGZhuetoX8V1ApNKD+O5SNVxIa
jd0negDfWGZ6bYoCBVHjqQ2eDNR8MvjS8BsBHmt3D+XVTIOy4vLRa6ZkvHPo
6M6f5SPgQVn6TdEegueEbNeVV2ionHJX4FbzFFyY4720doEGcR03cjwMJtCv
VfxfscQI9/16nnE9wYAbYc5Pbmv2otGvlM22EpOwePPY6pozNNDONmvpKu3F
gOF3dmfOEUE+8Mi9ZdlkvJZzTc3blYq/a7zdryVkww0Zah8QiTh2R02lo4GO
4RWxdNOwDOBd+5C4rXoKqx9JvfPRYKLQir0aJ9zS4ITw9D+33DHUP+juciR4
Bk026BkIhKfCRbnHDQK3x7F2oUlJy3wGM2V4Whze5sEHCY4jQbQUODkvVhS+
YOMpNeHTIz+64c4/290rLw7hpVPGy+8ymbiQo28V96EXhgqMk3eR6vCN1tUo
Ya63Lpr8dI/cyQbm+nS1/u00MDIz9RAGAma0mIbB7CDI5vt/K1EuhArDP4ee
SfVjoNrFlr3ibCi0+GGTbE4Hd9+aXU6Krfjb6Ba7w4wIP2Ty68miQ7DGt231
3ZxOPKvOKnMNnQElE10D/3YG/LvVt76EZwh5iscLdt4eBo8+7eLmECaEnLUR
grJOPFAveanswhjof6vgW6FIBrXrmrZPSRUo+VU+xPcLFdipg1swl4pbT3S2
lnN75SObMdHajkw4ePhW2UggCUufx8TDIxqeWfy0bGtdOqR6Hou/P0/AieUC
h0/dZiD0LoPg3jToaVruaK5HwPHIYwHmgQy0/qz3l9e6BmbTRFtau6pxTbpt
/AM3Ku75d3554BkyyJvcyDKPnYYPVJW11o0EVAmLlmH+IgBdZLy/eRsBhuvP
FqkZk3CjmbjX6W4CkMU4665w+9+zkbspkzsHsNvbq271HTqMadsX36OTIWS7
j5PwBS8I9BWWGzOhwh/7OqV0EQqc3jzcXKbYgyNb2bttTLif2xLopCJMhYG5
1u5asxoo64gKelFEBnFLgwDfzlH4LpoVEDzH7UXrZD0VBJhg972JtfSLChkK
Ovl/c+shScG7XcWHBF/z9u5pTqXDnk13i5+FVqLqs8c/NpcTYcPiFvl1h2iQ
Mf/a9qpxO3oSEt6NhUyDkPexQwkm3HnVYc0cejyNbwVMoyp1M2HuKYvjc5KC
R7oidpxiUHBY6tM6J/10MOrB4wZu03in49zNAUs63uUVNSjsTIPy9F+El9Ot
6HPjs9smbq7yLRflrBupAu0uCY0z61rh4mX3sJMyRBAOtkvy9qLDk0zPp17r
KfDkdMaGi0E1qPKwF6zzKZA898bUu2gaLomYeKW0jcC9gzttBi3J0DGvN9Ob
OQreE9IHpISnMSz5+gOnDDI8jWrlKyZWw2ftY2IFXgR8k37ZYPMtBpif+CLs
v4IGvMTdCXekXmDrqAbDZhsZAp+fOLjFkAF+P0/7bvJqx3+5snmjaVPw0Sh0
Xq+JCt+eHvqkKFIEV/xP8fynQQaBAg27voRp8DPifyOUPwAmR6nvHoRSQOZl
/+LEaipcvVW+IGk6BvKTn6svSRCg5HfU6+PudGDn72Bc822B+diK51LqRFip
9WGs6Nc4KnnyuxipzmCvhHvUmUt5QJDcpSsuz/WBXJM9vxtY3HsxuWFIIgti
r28/qyA+gK3+HPF1SyzcNeixfMkvDTKdtyzyT3XjyT2Zn0by2BiocuBirlUy
3NmxqP1kvgtX+oZ88Oxl4zLB8DUlNYmwWtn23cYdbVgU8KShUJWDlqyZTVLs
eJgIEjnVYNqOVzRnCOqyHPT7+G12dHMC5L7bUSBXVYvmsgd5wsM5+Cpo36O+
Y6nwrXqhIL24ETW9lhRJNzkYcFMhYUg3Cebf//lYKFABiheeLs+L5OCnspmN
H+TKIPvP6MZgtWr8/bFiXxB3H72suZ329EK4v2rNBYmgbDhPnWpr0eage7Ga
l5tFC9j/sTn25lEcJjK0u+haHBRjx6nKebVCmIvwg9++w1C489OGhhNMfOsr
Ls3M7weNFnh+j9wNy6gHq7IzGbjed9rh+OMJ8NvTcO0tLxH1Cy+R2m0YSFz/
+6fzZC5sPfXrmEj0GE4zN5435uZtsqjY5cTLWVAlKZV9WHwUd/KopG7+MYPO
nVKB+dz3XNzRorXp8QAGLykWBM6w8FD2XwFDgxQQn7RWs/rQjzOXJI8/kWCj
NeVsW+TKZPimZi1YnNSLF6fW2uy4xsaFuW3mBx0zISXwjsFxVwqK5vySkOXe
p21uv6qGHGrhncvMfJ9CFqipGyk+6uRwz1fIxzOvCOQylcJievvxzHnfM7zD
LBTT8DNlfK+A5O38blv+toD8oS1VQgdZmMF6UHVcfwCGv3qnNg90QOnS2X7h
fyzUk7SqZ23ogjsUm6QfVr2gHGf1u7SHgcIqN05KC46DZTXEPOucBCnZdJXR
SjruaYo59bi9D94F7nt3/yQdKiUeEi5rDaE0sbi1Z2oCrv44fTR1JxmWn4kT
MG0mouzP7ccuEcZhZe1XvesMErp5XFTauZWGn3a73PiclwPLTZ7272FMoXFx
8JYjG5l4zeC85mHjTOg7m1Awwj+FlRpilZ5JTNyo+v6ZekIabBtb5rLecQi9
aw9sZDxnoa3EhQUNwVQ4/DSW/37iOIacOHdsn+4M1nJI088N8uDa0Nacv/Fx
eAXN3+2u5KBITUdr6E6EPJ+4mdaVo3hz0gs83Zh4imWR1cHlXlTGC7Fhrxqw
2ZpiR2wdQ0mzlfxP985A2oAP72xfIiyaahqa3Gaj1KaGmJ6MXrALzTS7860Q
ay//uPjKpB91S3fY7RFggy7Zmd+RmzcuL7KK1AuJuOyRwfHt78bgd4/nsr1e
vRD7s+eSmdsghnwmmXnKzQAn2mpF2xM6GP69r6ZFGsOKKnrM8oxhWHOnhZZy
iwkWS/f31rl34eobe2+y3o6Bm2sJ9TBSYL/2j++FVa0oIfnAU+sGGS6LVYR7
tVOw/03t3caLFPzX7nA4ITkLej3PNN3bPY0pD5dRzr+mo2yu789PTzPAN2+F
dpg6AfdeLjTJZTNwTnRwroyWBs7OzZ0r7Sfwdo+2r9EoE52HO21JH6tApf+z
4yb+Klzft76X00HDER1tcmrnNAS4rbUTmuuBwUTVr0qbmZj77dRXVB6D3iNv
WL9NpqCy14Vh6UjGOPtsbZYOAdj7UibJ27uw7EyjHI9REwSRpuKardngfzLt
WJM1HS7TOAHRtEl0IHcmTLsNwOu9cYO32vvhRGzfprLscfR3/mSaqcSAJy7s
RAEbOhyIsGstkS3D1aHWyNg/DSvPKv5t1JmAtx+pPCOfG+DEX4s9XVFM+Ht+
3+LFC9ynb6jXYGYvjspOjFTUjEC+ssfZozF0uGez+9zc9xosk/uicT+MCCId
Kq/v65BAN4px47FqFd7P/TFieYcGNkECrY3JNHwdJv91mykJCx5Ka2alZAKv
p4fK40QSGhLZxxkONDQhKv5L6EqH47JIc1CZxrwFzsbQN3TcsILZVpaZBpTd
2UR64yiadHWo7Hs0gw1HYoq2l1VDabj8+ceaRcBDNopK45kGYwePF7vf0iHL
gqVXsn0a9o5fqp/UJ6KKeuhWxZ8EOCB+Ju5l2TRksIUYvbMjAC/ljjqeIgO5
d3/8M30ujwhLC2Z601hQWZlrVTQFFW/PGOv/JUNsIbtN6GgAbFKfNKs8SgXS
rGpsUTQVfoet9z0VHIPn+gwOiIWQwZVscdXLmQKpLwgBGzY0g+TmITNFNhlK
3eO9SRdosFMFdyzlh0Pr2YsKYkiCzJtGOTPBNBi3VygZ3dsFpbpJfMEDRODX
+e0S/I8C0g/s9ArujcDdgYSsVyQCbDS6Ui+4jw4zWj8T2t/EYUjT9ZD07Gl4
9sr4xpuqCbx3dV/H2G8mVkZti1Pwy4dcTYsZLdMpNHTeMTd5m4kduwyYG7zy
QctpTNlCm4Ch3lctM4cZGEVY9+fJvXw4t/iYt2gZEdV0RlOFLBi4tTSv4+BE
Ach9fFoftEDEtFebZDQT6egTTrMITSiAgvlfZ0K+TuOKO5vmNtFpGL1Hc3f3
pQIIJ6Yf2PFlFKPyKVLv6mfwbVWXoZpPLnygfV4uuH0cmfsVLm+7OYNF5QfV
9z/JBZ/bpR+OBU8grRLlZQRn8JHqR3qIdy7QWRcnNT8OIeHsse1znix8ub6/
TzswC7i4dYk0HMHO+I9Dw5tYqKR3fTglJQve3S0TN1saxZR9h9WuF82gabfG
tpiqLMh5SVLwFBhArdNzETu4eZ75PWXySFk6fF5kMXqdB/H0xR0xN0tZGCOm
alg9lQ7lPuGqEwNDeGa5U6+rMws/SOCve7wZoGwnYqUFfei2zsD+mAkbtSdP
Pd8Vmwq6W/JS/tr3Y9VcsvSYDBs3LXVYlXSlgt7sJKXNfwB50p86FtNZOLzj
rOyKf6ngtTpfomihBycuB8SnPmXj1usnTl/vSYbeiRL6xrN9aHjU/KMRt6dn
BjrM1v6XAmdTnf34kvrx1Ytv2w+JsXEy+8y305Yp4GKRuMlUvAs/SF8k5H9j
4x4FvsnEW0mQthTrNrO/G9WgIvVpCxsbHvqfrf+QBAtwmih8juvHFSoHvsSy
cQuh+apQXRIEHzz4gSrdhfFaqZKnufscvERegEuJwM7wfZxV3IWPLf6dTBpj
41R4/VieTyI46Wb9EDTtxsvqH2ahkctlto9+QkwibAgcMdQtbMdR+Vd9VlIc
9BUXO1a+JQFMu8Sf233txPWdBtJdv9h41XfwsaB9AmyIjPJgr+/GQY6jfFEX
G7cV5/lWxSRAFJyLfybcivbrXkq+4vpMud0KqQmbeDB7rJqXsLYNJbbcuL1t
Lwc1ajc5VKbGw4sKnRZdkXZU5NMe37eN62PPDKsMf8RDboyWuPuWVuT3slT/
cJSDaX4Mt7K18aBtRrt5TqsNG5yqhEv3cDC8arNZVVg8VJri62Suv/0yLvym
xfW34w+27L0qkQDbvRn3dRYb0F/vzq0HrhzcOEHpcDKKh7c+X4w+bWjChGPv
Yrde42BZWnhXr1AiSPXW1TrsbUZ+55t/N1hycL9QgVdtYxLs+ZyiY/+jChfE
j1CCcjnY8Om/j21+STDLN6V15Wg1urZ+47+UzsF7GwfDZo6mQ73E8wSeV9VY
e0Kv8kECB8lb/J87L2bDbGjRQ3pCG+oaKXoobudgUK7+3wuW6RDL0ByWZXVh
hMyR7htNbHwtdsHayzcPjI7cSLvn3Ysr5c/z61uxcbdz8M7Kzi9g3mS98Y1u
NWav6nU/GMvBlYeJjYNb8+FnzKvLOoENuKvW/PBPYw7etXzCH7e3DBpVhCsp
Ra14hMQrZkVn49oFyygfiRp4e7V+YONVe2A7jR0ppXLwNv+Tm+tyCqDStW6V
yFQZfBua+rIhmoNbZ3arLLLKoKtSgKjm2Arr5q4MiHHYOOiQ6S/IrIbC7WIW
yusS8Japrvd/PRyuV7aZjZmVgM++8ts2C59h4VGAAe8HDiq27mtrv1ENXvTv
d+9GNkNUSbSC6CQb11js1NMg18OaoAjpwIJaFPNzCt5+iYMhQlpn969BuNB9
m98jpxQjS4m+kQ5cr46zibnDrIMPdRIl//IzcPrzMoVfOhx8kn1WM+JAC5iM
O3X5XHkLpLpQLxr3/f/ntHHlwx814NT9vujpnwL4OUGd9jfgIPXWvtNCsU2Q
a1eMykerIdff0EG7jY0uRZKH8pU6IJO/2D3ugjfGH69drLjLwexbq+9s7WqE
tbeDZA1Na0H6Y8TxbT/YKJhZeLdDoQXOWsz7vHzfC39oe0/5prKw01t3M+9A
K2z4cevddbUiaAmO5KmNYeODtO+CY/HdcJZkpSopVw+V7vNHlsux0SCigmrR
1gMlu357XX7O/f6+rOhFFxbeHj2+9fVQL2yaWtWytr8PEm6dKYrKn8GXISld
D3b1wsntj8aFHgzB3ImzPKeKmRh19tfgt/d9cC79bsaV+VHIvGr7mhTJwIlR
saLNjH6oemCqZNDUDAk73gTfuzuDu9cKhu2xGoH3nysJ5g8GgOlc/DHmMwNz
WDDQt2sUvERvxrR7ToJNksfk9CkaqvnLJ2w3GoXEjMXrfbqjULejeX5iHRUp
eLXm0WMCXOONU0gjT8A7YoXE/AwZTYleUz/vEWDli2rN03sI8Pr9gampHBIm
ughfdbcgAGflBYtaDSrcuZkjUW9JxPbS8uIMqyEYWnQQvh1AheMDVqBvSUDH
NftSRkVG4Kaf7/Nz3H4qfda+dNhoCn2Vv4Sol4+CtZlbbfgpIhJqN7TN72Tg
vul/3alK+fD5y01TX+NpbF4tFhJ5k47Vzard7zvywOxcrVqWMQnblAkHxmJp
ONbuMnz8Zh6sdlKeo2dxPee/ZUobDGm4s6Dh8eB8Pgi9l92xyoqMadSe+d9F
VIyTor2RDswHvfyaksnlFJQIeem3WpqKanYNQ4ki+eAyGng9WW0K8woI274E
cD3z3zLFQINcmGgwl3DeQcDiguiF1d8YKMhn0qsslAsBNccafogRUX5Bvue3
KQNfp/FVRT7LgWK/hLb3WeNYT9lt9l5vBoeTD8VnPcmC1vLNYuxzk6hkPVT+
3yATE7aJkYvks+DU9pzrKY+n0Dk69aWJDROvPz+tsLeR628h/I9l/EdQrXne
1Xg9C99TXG/P/EkHwTOu1PojY1hr3rL1XvoMlm5oqRsipEOkon644I9x1C2W
slmmNYP0y5TxyNp0UJ5I1DQRGcLFf1UjWyJZuDeaGT20lArn2V+v1H4exvWh
d/97fpyFG2wymr6zUyGy2y92j+koUuamt24hz6Dkha0U6ZFU6PgUaj+VNoCn
7qlWLCOxML1GlbLvWgqoPz+/0SZiEMv8Nj01+8LCYoHz7mHXU2Bb8klbm+dD
mJ2+mqfOn4U6Ok8+3+eukw9YGgYu9aJuBOkCw4aNz3ce2FwokwxLXjFDV+r6
8T95q/D9a9kI50SjVJ4kA8lylPQyYBCj2F4Hp0pY+Lo236Z4IhlMH+Wd+pTe
g4FaBbciwrl8b+B8EFiRBH5NNQICKn3IE9isY23BxmUw/GbmQRIc0gjdYpjb
jwTZS3J669no2uO+/iYlCZzdH+e/qO/GuEf9+R2FbFTcGBgc15gIIobhex2t
e3DIec3qaG4OeBF/SwzuTAbBm48Xhr/3ILXmq1HiMzaSmhWWHr1MgQvKm8aP
ELtwr+dy+/heNoraVCZeEUyDCymet86m96KipIjpKXs2ukutdtbRyQWTMw6/
dl4bwBhNKdrySRYSnN4qaC4UgO3hYytVPAbxkv0P1egcFq57Lf722mQeRC3k
e3/4NoWa49YBZUwGwl+p69uYZXAl8kRGYjgZW4+5pXgpUfFU/R5OkH8NHK2s
7ImobMNPUmPrOpls/KHj0rJicxX0yRZGnTbqQsO/K586r+P6hoD2rpIz7XBK
d8H5qHAPSr7890dsYAbz6YH7LEX7AT+LSdB2f8JcL5nrJgQOWt+sspAU+QKP
2OaeE5cqYMrwbpntJw62HDhjsn97GaQcFrgUcLILFAhW982z2Dh3s65w+FwV
BG92LfINbMOQxGUPpohstPE/ntnzpBrmUsKiUuTK8IfeSOgrNQ7e2tjq8Gp1
M2ydeE1dtfIl1CwvV5CcY2PCX5KPk0QXvH1Hy+j8NYASmarr5ytnsGLdi9St
B7uAZtXmeMRnCl+Y3byv94mGMUfFdN1UhsAi0iBsNoaEdgl/Hfn/EZFu4Paz
bmACxhxM/qVV9oDMm9y6f/UsNLufNya+tw2G67y7KhUGIXwd31S9zAx63Xhz
NIHRC7+cnrjMao7CmQU+asUKBkrEWpeI3R0GY4Wr9w5dGIBLOZJ7n69g4Y2F
wB/nNDrgHW+7YPjcJGRUSUr4/KajrmSH+fIbvWCfYOzecIQENnaCy65+I6PP
O45lDP8gzMfx14r/SwKDq38+n3RiY5WMsrBDeC9s95xWkH1TCz0Z7hceZM5g
tZm/1r4sbl/xiteSDO8CnQGrQYdNDFS3XDpT9XwKmPUjBxRcWsHZfPX0wBsW
ugl+gzj9PkgKHKriE+qFzA4X15eZTNw5X/BTjTgMTpy2sxkCQ2Df/6DniC4d
B3/3aq7gm4RXBW0JODoOtM4Ro54lBiY0+da+WN4Nk//U1axrprm5ft6tbTUV
iyVU3nce6IPE1aOeid1UcDv3KfqGLBHHBDMbX8YPgCjt3/PqjGGYcTRO0shm
4MrkiMKNp4agzuTN80s2RHBb4fiV8JOMRQX3Kac/jsE73S3a72kUuPmzeM51
bBJLck/eGzSbBPmROn5bJSJ8+76Zf24NFQPXWhMM3YfhL93VqdKOAidUw77Y
dRPQIq3qhGLuGKywzzWxCKFDMsFgt7LtINJGF1NswifgTNd8/bNaIjyR1+Dx
f0vCWLv1jX6+kzBzuF9rjo8MAf18+lW8U7gj/7IGVYgIuYXfPCWTKbDnDM/b
8r5+DE/cLt3UOg01vsrBTb3TwHLf7n71IhGD5nje3ZUlQJJOvUq3GwX8i1et
pa6dxP6+Nf5KmVMQ6LxPprORBkKlxckJ5CHk835/yZozCQXuUtq1JTRQvB47
brN1DCdPSUQdMByH1UoXu65n0OHeDYl35d0DqFRWWrAqZQIUv+ZsMrzGgKQ9
Q0+LDbpRKYh3fyVOQmaBa/s3ATK6En2FXVfQ8Mm6P1dsV+XBgWEPoU9vyXg8
eEeWeSAVj+vrEceTcyHqqXrdVRkKPgrqfygkQEXnEza6m0/kQuxxqf7hKAqa
8dUl9z+j4B/yXZZDQh6EXVWL37GLihcaNMmx3PNaGfjo3LKDeZCn2/amupiK
a9Z6n5u4SEY+v3CvvvZc6Ix6Pbg0S8SEOuFP27/QcVeAt9q7hWw4IRDevLZl
GneGdDQcWk9HQmRPaKlzNuC1bqWmjyTUt+O9ePMmDR0eNe/znsiCwyKJVm1H
CAjb1Ha9IjMwK53gtflhJjhN5x48NkvAwtn6UCFHBkqrDhwkambC1DhfdEAy
EWckJVSrvtHxzM8Kx5ffM2CLyeH5NJ9J/Ez5OyLbwcT5MKWUluh0SNs/9w09
pvDG50SV5fZMbIosycu8nw7bWo03G+0hoKn8FpO1XO672gohWScdLl1J3vR2
cgyzvkS82+A/g7+OG00WTqcC1able6jtBFYflyoY3jyDB1dJRVjzpEFyme12
raFJTNgp0xxSyETqbu3K1xvSoP1IRPPev8P4M+EFR3ofC02zpdAzKAX6PY3i
7KtGMY6vQnqhdQZVbCwNxutSwL5+tkPcexz3fS9f/GU1g3ICn5M//k6BB+E2
P9sXBvFOd+IujzgW+sq5Csm9SYFntYdjzLhcPhG+tfjhZxZmq7x/zHZPBYO+
2u63GoO4pVnHdHsjCzcHXFznap8GpnZxv605g7hePrZSKIGFea+2WYr+TIXx
023dhMQRPEULj5YTYKHad0JERFkWVNuuJsaeGcf17AcCvrYz2CspPPJHMw++
5n9dd7GzC59xfh2oK2Fj1Nqwi+r2xeCS21HnY9WMWodTzv4ZZaNMmerWzvsN
4OeZ3nGgrQqD5Z1XrEpn4865Fr4e7S74QhZmlee1o5bHB558Khv3uwR5SOdU
wN4paYFzRSGwajVUHgviYPWLyVxr03rY+bd/rb5JN8weGZctEWcjrwvpU7tv
CxzLKt+0J5WMszxfLbKbKLiB986WutlGcNq5TuN7AxFPh241y22loZtsjvgj
iQ74lL01QPbgJNJkDE2PuTKwpMDmPInWDaGkeiUlTa4X/eqaT8igofHXpHS9
cxMQFTs1f2wPCeu6L7Ztqh1Hv1X0W1WT0xCs0cGuy6RiIe2v5JhALvJNDW58
7ESGPaW199oOjoB+8ZofllZMnIl4lOhu1Qdv793oNEgmwJBb6GE6YwpldnOY
L5NIEDRk75YxToAzxde32gnHolugrZv3MwacMKmXuTbRAtN1hU69tSwcEGzf
HqPbC/3p1nW0j+PQXkALbj7JwE81OdOmV/thf9gFx9tUMphTVhq//UTCRcvb
7K7xfugKijQI7JzG4cN0So0mAXszmjQ1DIggphkotjJxErvX5y5u1yRi+Wp5
388ryJC9S0yvd3AA30qdOuzTTERNodt0xaNUmNG+Vf3g5hgonQyJXXCkoHHA
1NZLowTYuG0+4uihEUgboLg8fMS9Z72OYoviNFiS1xJGngGQrlDO9jjVgzZd
2SmCsTNw0TnkD0uYCpNhqSRVJODnh3v1dyaPwNqz1aHh/TT4KXp9sah2BD9r
F6z+uW8CRrfzbdNexgDlsfH0Q/rdKH5TtNE6YArEv1m93eM3CKNGYw8kxij4
TjB7488107BEb6LutJmAlfFjYewhIhLTuy7f4pBg26X2RlkuX/gfSg3euz2G
G7KrM2d3UcD02MX71zy5nJTZzvxbSkbzX/+x1pVPQ1+vZSt/2SCcmg1wrvo4
hYcutn99kEyD4rkVvy+U90E4Y9LcXKwfreZt9U9cmoGF7S6hp7k8OnBk+1Fq
9AQSNo4EhBkPwu+EjNmgvQyIjTwX3nFvDK/tSxnYA4NwVZBP8GUrAybMLwlq
Hh5BuCunEb1tEF7y1H9sT6dBqUWokmDWMMqsaNq9PGMSjGQeFr5RpEPQaJo7
8fAQlvDOmfscmIT7ZiofDyXRwfGHumtRM9ebamzvRFdPQIxHzwfDagZYSz8t
Kg7uRu1bFhyNqxOwonWAV2EnEwrLdtd3hHch27VBccZ7HBRZuyymg5jwsUaj
O0m5E486uI1JvB2DlhxzR0IOBYyPpGjar+jESlXGkRBVMrSqr7p/gkQGv7Ae
lWtLjejz+FeIxWsKVA5TH1b9IcFN37Gbc71VeEsu0UiljQoX4zZvfLSDDqFV
gS2a3H6w7bZMGO96AkR8rRrauocG17c+kynv7sSr99rVGy5Nw+mAaYPyPxSY
2xY4bWzQiE9fSVrEe5OB+u1uookcEw4+XVX1/lErEg3k3JfxT4K4nobYBJkJ
Vscc/IQFG3Fc90yVvMI4eC4vKc59PwOegfdnlz+rwVGxyNg96qNwwuvM6WX5
FGz9NZ6V5U7BoGSn/tm+HLhuG7+0yYKKvb6zicwOMirHXDaxOJwD+Xb5AQY/
qVjhwz7rKkvG4QgPP96YbNjX73Iy1oSGha8G3GLySeiU+SQy8HIuuP2xHLdZ
ouEpm8k5HuI0dsq8qJ79nQPnHtT/U0yko1avx7VCoWmsv8yz1Lg5B/xGDv7U
tCDj7f+++cs1UtFCefPpzwZZsP8781/7HzK+sH1Uy9lDxSptUdM7DZlw4G7r
gt5HChZ89U80fUfBQI/S7JwDmRBpK0W5dmwad4XeiVHypuM9reCg1IwMmKzb
+NcPp9H5WO0Doc10tClevX7L9Qzw7L1qVHeQhPbLLl71L6fhQRmC0pJcBoSv
DxJQZRJwMzu468IDLn9fuMjlyqRDQMUEJzGLiH4JBirxbDqXt3p+TivSQWtG
UEf+9jRuaK8UMbhER8/oH3LvSWmQn33f38h5Co2FHfmPXGdiS5FE1Z8DaVAQ
ql5wJnkKxZbfa1zUZWJ15NY+C8c0EFRLcxUY5frZC7cXFvLcHu1wy8EsPg2u
ZjuMSh+ZxFttgs7biUwsiZRx/3U0DWb/BkgZcHuBUcJry3PWTAyysWKuUcmE
qNpfLrtsCLiLV3VSrJOB/RJVGcPiOSAnp/kbxgbRV9b5u1UQC0+vOHnQ61YR
6I+QG0UmhnHPfPNITsQMzu6RLBLubYKBD6M+a4JHUfkF744sfSaS+8mOwsM9
sDeYb8TJawxXuxs8ur53Bt2li9f8d6YORl7FSbzh6UfBx7v8P2QzMXSeR7iT
68PvyO73tSYacbGpcxnNgo71J7o3z38iwqpA5vk7zu+w25acEiTExr0/L642
/dsPO49LJ5F31UHGgdvSgntm0GrsbiMreAxU/DY2JZj2g36swvKvP2hI/6+d
v+3nFDBmVlcNxExAoNgLc98mBh56lpRuudQFd1xNTuuokEBWaEA87DsZf0c3
rrY+OAhb2idPCi6ngcbenNe/3CYxc9zn+ImTYzCuftpOcKwPTd7PpimunMHG
9rG25pYBMG1NLT/6MgqX2LsTpJRm0Gwo82y8EZePV4JXDmr3wM/yUysPHqKj
v+AbgZuOBBD0cfNdxSKjtaev6ffVX+AcbfdQqgIVDCX9bN+MD+BsImMu5U8P
kkPbwt+fm4Hzky6MCOF6eFMzSlS8ScLGtX/+9YvSYPcV1gWdVRNw/cJvg3X6
XdDu96mMfy0TVDTeWFJ6R4CwubY9emsrDG8q+Ma1fKAaJw+ddxsE3VVL3vL+
9cD56mAmcIoFa6p+rC0KoEN40J6hxJPjqFxw+2ym4jC0Rhwx0DxIh+VXWNUq
or0oFJ+qq3WAAIcLbtMzi6hgV9CIVB7EvV9kXu+RI8NU7aHN++7XYhI7zz2x
j4irOCHKDjfoIHlCPl9Eoxl4WOIBNF4CqhJf1Z22ZkAynd/4tg4BjlRHu270
HMZhy54t1uVUeDzyZ2ljWT/oPdk9Ze5Wh5tua+1TTGPBNtHLo/HHxmFTpfLV
716teOSvJ3Exigm13j5tLGki2BLPfLXh6Ub3ALtvDnM0aPgid5B6nAEvj/96
bSFeg5el13fKFxLg7BPaKR6kQ/G/uMmMhRQcNli/t/4bEVZu99Nq+k4DW4O2
IrveVLhlcrgnb34a/PyJd1Z2T8P3MwvzRvt68PM25dyNt6ggQgVSdvY0fDWU
a5l+UoYB7wPsiEs0sGRf5fs2TgR164An9GsFIOARvsazjA6CwWnZPRG9oHp+
RlFGugaXurSOPN/Mhq5Y21Pa+wbA2OkpIUcjFv44jll+WmJBXoyR8pDsEFxo
95vZZN8CltmHzbXJM+DRlZ1TY8OE7BKnXUvifdze/+SG/NURmB686yA0wYDM
zk+lJuqlaLA2J2aHKAGCVT2aFnNpcEuMr73teyUMLk2sn/s7DX/Fl1m/lGHA
OYNXfm8U+/BLQMb94sUJYGibwBc/Bnjt3yiQ5NSJJ1seuKdJTkGp/VejkjoG
iAf2GitcaEA+nVXfC6On4FLyZMOTV0y49bzoIk29Dd1vHuN5aD4Oy5XXZPvQ
GfBUPkT8WV4j6nSVb044MQXb1ak/wxQYcKRPXJFnfS0ee1C3ntpOgOkNRY9p
58jA+Fmh+nSoEkXgY4jRMyrUi7+0ff2WCstyz7ne+dKAce2dNl8mSPBmbmxG
wJMObR97jlVyfXlOtHG6Y4oAFCzvBC5/1WZKi3Wda5A3bbTGiECBMGboXV8d
MpxYfX452bIWn5yaWPfkBhXuucgMUuJJcHx2XcGGw3W45t/R0acsKrQLtac1
rmTBzZn+f86R1SgylZij+2AY+lfqH5OVZYFJdkkS75YGrPw+HaIqMQQf1elK
Wcrc+9Qe9iY+ugUHcwx8TmQNQMpnc8eNL2i4rJavsfAeCft/U4Qm1mTDiNnW
R1l8dFwn6yi/a2waVddrrTjTlgUGkt8exj2m49Z/BL187Wn8ZEgOOR+QBfX3
nwcoqjPwy0mHp5QTRCxcFlhmbp0Nvs3t3UkBDHzL01txvoOAr3U921oEsiF8
3cJroX4GSnVXkS5aEFDktGjq2OcssN0jJxKjRsVafV+iGZefjk0k+ZyaDGBI
EKVuV1ExP7nlUB+3z7rGRZzkLcgAary8n5EeDWO1TRsKa0jYPcKvVhidATZt
1w98LiWhos/9zr9czpfXBw1/mUyHqwuvQjzOktEkszj7VTsVzb4tOx9TkA5v
Y2+bLFLI+Gbfp3dXdKjowBfSZu+XDnNf/I7HryVhODPV6NcUDaP+nLqT354G
JzkxWonmJBz+TOotT6HhoMum/7ax04C+W39oBdfjT69b8Ky4Q0MW6YZko3A6
rOzdv0l9CwFD7F83PplnYEttlfTn5jT4bsJsGcsnoKfI5RtPIxkoxql031eZ
Bmd/CSu+1CbiLmMDUR8tBvapGDQ356TBbukHeq+CCDgR51F5P4uBReG8dTLp
uaBsJzh648c4+nxkhN9Vn8GWhLsKi3dzYXKJmmLrP4SmxwVkwh+zcHZGSuSl
aC4oXU2yvvprBC9UPPe34PapbT8ubi8dHgR3M6ngh93deNF2kPLpIrfPrihL
7o0dhMJr8YaxUIV9S5JHTKJZGEWKCj7WOwDbTR+U871KxwcvLtHsSkh4sHdV
nZspDe4suB0x400Ak4ht4fGcTsw+Npkn8ZsN0WsObSzvrYIJiqbYA60e0A9W
d7xgz4ajlywp1LcTwLQIN7j7kIRVgDX22tPQ4pFNz/YkwJPNu++IU8aQ89qp
uT6UAqozBWoWHUT40nI64sr3dmwoFC4nNdFgb4n7OekVDJgc4hNVvt2HpI1r
f7xUmgSm27M+00o62A+ruLh69GOB69Gju2wnYd8mvs/qD+jgn3dYfNR/AOFp
/OOFV5NwvKlE1eIQAUy3VRw3tp7GgFcKjSm1RAjsHlNR/EiCvh8eO3x9etBD
LCc4OZMCm1zy1jUbkUEZvHgnmoogiHGxyiyHCqv0n3aNeU2BmPKzVXCeipea
5Dsqq8dA9qt1d7XlCLg9qiz7Y82dN5VmusR9AqQ2FbzZLtkLofKP1+ymUvBY
tR4rRp0Erzcwnp+0H4D/Djqqy7UVg0qjTOLjbhZ0xRzRKs6aAH2SvEO9UjFe
2H1ltIrJhN9/NvyKKCBCUUHrh9eGPVj0WqckQ58GiZGnAtW/keBr0JBcSXIg
vjX7la6jSgPFlT0Cxtwc3fdp/opVaQtWKPGi0AADakRWD8t29ELBbZL9oPsw
nragESvimaD54kT4og0NUuhWJ+MqOnFrT6uUhOI0bGBLeNxHGijVtHp0jrbj
DnaC8uIYEV447GjZJEOH0y5PnNx/taL7uuypwldEaNxeu7ljhARrz/RL3Onq
xoLIk6eGwyjAuFqIgW1kUHz3n05jSS0ir1ZUL4UCZT6GGHyZAqFOfp7GpAjs
V5V9KjZMAQeCZkq8Dw3CLx1KtpIrhmsmCgcVrUmwoUUtvlOIAdS3usSlDbmY
uyJFSt6TCOmHmcQD7QxQ2H35Ver//w/Pb06KXZwED5E+S0UPrkcoGbp9u9UB
tFVNSj8+0yHL5NuU7/IpCDoYoTuR3gfJfreeRXPXD9tUb/jdMgaTbdEWIbPD
EFK56fBZ7jzxTSu7pkuOgl163v8qNO94qv8vjks0kFmRikJZWYVkdIxEi6Jh
ZX+jpYymSlKSUFE0kL03UaRj7723ey93u/eGppSf31+fx+P91+dzPue8zvP5
+HxqfQL7oEuk/ULuViYY29WOMK+SIE7ejMM61wLK5Du6ihZ0cJr/MhuUR4Ex
/eNPaJ0loEn4O6l6iQL7XSkmDe5kKDcYPiHt0gtPYmY26X4mA91z9bq+1VPg
2LHqE2wagDut7auD9ajg+Csg8/0tArROr2wmxC/nvvjXUqGHNGjXM7ktJcEE
/1DL0dmOT3jrrjZhsIwAwmu+tbaKzQA33XFQb1UktpgRaDF5E1CYtPP4yZYZ
mPQcrOedK4CyaamYzXGjYNpQdy47hA43rc9vSj7yAfc/23fDW3IKXrie5VQd
oEPlj4N16RUVUMe+XedkPQUvvc5ZX+GjQVHHkmSBUi9MdEjxLnST4BeNdsHs
NwM21/e839/YicQYjc2uYROg362ytneRCZHRMtVJQV+wYuFm12OxCeB7dh74
H8xAWYqlhSHPU9ASVv5hLjQO4xs2yMbDNKzN66Ose1SNuQGg9MSNBiMuMhF9
edMgEKHzUd7vOHzZ/zqLdIEGDsnxtn/LpiF1i/Sr6blq2G0o+OjxLyrk5o5R
LL/PAH93epdzSRuS6IFtW3cMgubx48JK15mQsVZb6ERnHeYOygx9VZyEuC0e
naln6GDX5FAm//kjskXK+6iHp8Ck42BghiwR76q0ZD+iM7D04rbZJ8+KoSPy
7Kfog0TUNrVvi+tjIAp/5zNaVwwPnXY/cT9PxBMuEqFByMCO4q9mfaFFIG4b
0yYsPoGvS2ajuBRn8I1Qoesqo0LAn7StWh8n8HHyoRXUf0xMOVG56uT7Ajj7
77bHMHUErzMuFh76OYPCr6M4U7/zwUurxnsqfBQT1SHYqHsGXVtTEjJ+58EU
in5ZtWcMbdsenDHLmsEXazVve/7KhcTVV1e4Rg2i6RvRE1JFLNzd9Cg0Kj0H
Emser9hrNoRTtlJvHkSwsP/KS/F4ZjYYf1hMVF4Ywk2X9Nr7zrOQ/YZPNVU1
G85HXqcUxw4g7ZrTx01kFn4XSKCMbcuEvNW7H97/04uKgvVKFAc2VggH+u/d
kgHvtsQ2GC37S7BhiY3pXjbmbtoR+ak5HXIMFF+RK/rx5tHzkrzCbIyVybL+
di19uf7WErXsbnysuulKZT4bSePJBk2WaTB8dMPx0zo9uHDUmyycysbB7PW8
u9anwcmK0b2dgT141m9mlc5bNvJqefddGUqFXq4cvc2Hu/F6YhLzehMbCeLq
Bb75KVA/z+5QEu3CC78rxrnn2bj2EctzvVgK2P7zvmqc2IVhWeuUtQhsFKkJ
mL88nQwVE172K9S78VBOs1JNGxs1d5YyHT4kw79tqtT+121oU+4XoazMwQ+W
kfaqP5Igy8hhcotCO9Z97b85JMPBGqN12zS4koE+YCfKO9SMsW+mFUNPcJDz
T0+cZyEJDhUpz1LTmhHe/khVtOagmDX9VYJnCoxqind8utaMV4zOupSc5ODo
xgfpaoOp0IDmRef21iJfrSfx+GsORlHtv3uoZgE9e26cRKjGKIq5WGgCBw8G
vF3hvZAHAfduVDQJNKHU0ZrFADcObnRxOmDWkQkD2+I88p070e59fXbYHBuV
A2syTrkUAiMkddz/SC+uZXzYmerGRg7/AXml1g9w+FqZ3ZJ4M36z0Nxz8ygH
L+r0VLnOFwJl/ZAad2MLbjG8tL56MwcLnjhtzxOtgAoXvra5i23YbCLLNppk
o3Rm+Nm162vAdPb+vtfBreB+UuqeHZuN+hc0K4qHq4Hxbs1A0AYbNH3+3e07
gYNUV6GsBeNSKB6gD8gtfAINMdubJc85OPfn7lbrJ1VAsyp2/8XTAs+Psjaf
GWWjBGnx2u/Kelh/ZsX1QtIXnA29HGAexcGddPt69Z4KCNkVvhjDU4rrjkk8
c7nDQd8cjs6HVXVgMS/jskYuCy8fEDxjdYiDFU5FqT9EW4B1YtTPm4Tg6aXk
bDXMxqD76TssBTvAmtik0jBVApu0kgZCX3CwJ1zevVqhBqQU9/h+CWgGvTK+
83z9bHz4jTSxcaoB+q/01blv7IO6BTHhnncsPPBNE38bt8KSkfSpuYWPcGt4
LoJaxkZ+Xg33nx1dICF4u2paph38Kle5pEWzsPl0FVdoaC843HyWHba8dzZI
JAb9t8zX9eHp/cKz/aDcPUS5c3kA3l+4f8lkwwySJ7bcY3L6gL/VUvtJ0Ch4
XDY4FXeIgV6nKwuHfw9CV/8G0b1yBKBLbN1xWZWGOfwLz1I+j8Diwv3ZNuYg
PIgNNBKg03BL9Zp3WrIE6D319XZhBgHISfMpBoZkpN++6LpqFxFaXvf5S/dP
wuq/YVKpUhRME9hucbKBAE+P3bTnqp8CxsuAH6HJUzh0kJEbdn0SFFS+avFr
UuHQ2/QeKCdg01v5td8KxuDB5J7jRNNpdNLJt0hPpWHNJK1UpbMI2PVHFKz9
pnFqipcpFUjD+rz6ss2KRbBC613T9aRp1NqoH6bjQMOOPU/Tax8UwkUbQetx
KxJG/pK8dU2BgazvqoIaS/kguv3C1ythk3hlzp2kU8/ExrZ/jYK0fBBMO6hI
0SIgaU7VRjGYiXcuUY7TQvPAsphv4EkKAfd2sHisTJk4+e7arTrlXPDZOC/E
TRtb9hBzIZF7M8j61cox4M6F7c4DBL6EcTzUFckXbzmD/tq+3pPrcuD+rn7R
0dMTGCP6+vK//3+fytt39ZRENmhnyXMpxY1i5Pc8WaveGdSbnuexkMgEvex5
tbpDg/glqk9Tr46FFf0Nyc0JGeD69RzK/RxETZufz5WSWHhMz43EI50BwqEf
iZ+Sh7DoCE/FloDl8wskW+/YdHgfXGQnrz2IBnIOFjrNLATLlzsHVNMho7jq
2in2IGY77jFqSWHh5lVXaQFC6ZCrcGvTzd5+nAu8w9UrwMbwm/TJ+3xpsC4v
79YdYjeuL2C6QREbvzRubfz+IBWehAV65l7qwQmJmLfjsWx8zdq/WzAmDTR8
buy5/bMHbd5ctOsLZmNVFcE8Jysdjvo2iEp19qH+WLCQpAYbX7ibKUb8VwBx
cpedEj4NILGgxf1MJwtV7kgPOPCUQMCtPwe7xjux+rBz3glkY7chtcpQGsGq
co14wr5ufCrXn0f7xsK2qORPfD/agHhbbIfM8R70JQwX9bTPoCpV81w7bz+k
OK/vJJWVQsK+pIqhMg7OHnp+RkLpE6in7qFzJXWCZpchmfmFjRrDYcqr1y/n
iZOHqn1JKdqqBFs7ZHCQaVL5kJhWCe/DJG1vabzD1pzIqEXf5dzOY3JZnWiE
G0cPnW91SQK1g3nagYts3PN0lF8usRNk/Qz1zfePYjzVVP2C1gyeXvmhW2ZH
C9RZ2agsfiHi1OijNd6aNFwHQbkCewag496r5/Y/p/HS7XEh/nESFtRfHv6t
PwGtZYM9TWODIPJud35WAQPnBXMqXvOOQOzw8G77uQHYrFMq/0CChf+Kjc/y
iLZCnEf0NmflZR/Z3Z79g5eBbfvNo+pu9YAraTiMdHQarj/0/6P4g4z2Gwz+
uNYNgE3L71RyWCf0dUoNtZazMNPOtZ2S3g2F2wlEB89uyK0SbyAJzWCMc/7X
VvthsLx0xaKtogd0b9fhPRIdBWiMjXInCLBxQjF8R9EASHczJIWi6PhgSDxI
S2gSXKOUtHcT++CvyRljlboZvCZhVPj8Qw90hMR5Ut2J8F/2Gsf3L2no53RX
ozW9H/pOykO8CRW+ygQHHMomod8djWuwaxBOMLVbvkZMATtma3zgCBm/v3py
JOvtMAj3TdvZ6lPhuRQj1aNhEm/seqpx1HsCRvccdhA+TIRxMSnzm/8ouFL9
pIr/qjEQeX/60oDbNLhtifqyIpOIQqrqB7fuJcLJ4A1Pzz6lACm4NSJ3dACv
B1/7Tns/BQr8h9VXHqXATyeeE8OaRHzqxVDc6joBCrjL7EYDDQ4ecZBSpQ7j
N68ueSW5SahQyORJODi9vIf98oZjiWi2it7b8x8RsmbL8r5bU2Gf8UuugcOj
uE3Zc85ThghiWptLYrrpsG5TZJxmag/uXvitZuxDgCMCribEYxS8aMkvfXqQ
gtx8bimBIYVwQLLwW54dBS8tXuWPaKNg5mHPndHfCmBm5TexKx4UDEk/seVj
NQVLruUaJjgXQN+Ov8oC3GQ8T/Pw1xKmYZu8R7KwTx6sKm5m+TwnIXFv6PmQ
f3SULI8TXJ2cB9uK93fkVpNQVWf/F+cxOpbdDQq88CQXxNqlbiTOkVAu++Tl
gU907EpZ2ONwJQeOdWzz4vlJWNa3cbKLGBP9XI+9YynkgOgFThtLm4iDq9eN
lDEZOOelv2fRLRva8ytZ164T0avRu8OvloHUq6c2eMVngYmxUuweJQKustin
ohPJxOeaIvfar2aC9DU/uwTfMXxm6rNk9355rst/67JyMyDaS93sptE4WnSr
td69uNxXOitjfHwzoL5N12tw3QTGCYyiqvYMatbtDvu0NwMie5iXd88PYtDV
lMwHy/n5d4r8nj8nA17Bwn0e20Gc7CGpPa1azslWykzltUy45+FGnHTrxa3i
sd5n7dhYXRnrYvOmDDp36X+Sjm/Ds1GtCqEFbByzcdvHNGqA5GsF3UVra9CQ
3KT19v//r3Lv2eCq1wWHTNxvzDTmwN9mgyWPWA76h4fvsQ2vgR9n9idHafcA
q99M5t3K5fwkDXcHODbDHOeYxG0jOlLcCFsGl/vzR23Kzx6dbpg41sIj9ouB
RvVFRgfbenCt1efFVRNjMHPLXiSol47fzcJjdOP8YBc3XhqaJsGJ6pn8vvkh
2FvjznFxPAJeXl/vfrzBgvN3bkdybo/AKdeKAf/nMxhdtb/YntIAH8Ozc3a+
IsFTPnG54W4aZgi7j5lndcLC5iCDMunl+fI7dWFpaAq/HHG8VPa4F46ZRRfO
GB/GUqkyblyu58hTXZ40uSE4aBuysnS0AhMP27zaFsVA2ymJU9n+RDB83FU7
ZdKKnAEriqk0Ba/2KetskKAAVxL5sYtPOezq3yno1teB/fcqdmYR2fAoJrjk
0AkiWPfVnjh/ioJDTnE3T/BOgBBXxw5mJRl2RX8lyKYT8DjHRPBMOAFKcs6s
1xKiQ8Rg/yePuV4c/703+bEOEdJWmN9eoUuGqIPKffKiBPS0t3qRX0WEjKUr
ToEu05DDE1DmsW8Es+McfXLJ02CivWeVvlkvHCmc2Ke30IcCrwsSH6XPwI5W
0UrqOgLwlhRMdb+jYH+EZ0TR7CTQlDTsRhnTIFXHd13daArLH63q/OE0Dt92
hPDoidFBnfhUzP3kBFa/oCuJlA7Duhm+EfcsOuildR2rXDOKiw1B0ou8oyCf
EnWSNEIHtTiFuc2jg4iDsbtTNMeh8aVZX2AaHT5YnswNluzCFRrNYxvtiVDM
XtrIoVIh00T3401mE375nfCXdHoa5M8uFN1tJcP46KBo8b5qPA67ypdWU0H2
FukEbwEFvqREsoQLWtDNNP01I4IMnOHpr9n2FHCLHVLRtapH15An4/kmFOBJ
bo3WcWJAr93xokefejE/TbiI68IE9O6TS3V+xAShqIDrZx92oPlY+27hyTHo
IKnRA+7MgKjflay9DvV4YUfgmO32UTDcMWr5TpyGG7x2npf9MY38Zr/W/rMv
gGKn+zqf99KQp3nb+OWeaexW5P3yojkfXB5ZeiWeoeE24zdfHuZNo9F5yZ+D
I3ngkbn6cuwMBWsuBbyfN6SgBtzLvTOUAy7+Sd1jPGRcGtU3Py5EQ6/otK/S
arlAsLHufj05jZfrxc8lq9NQOOmAq4xTDjyUWjSVKp9GRf+N8WUnaLhZYjmg
IrLBbIlqfe32FA4fl7c4eIqOifB0LpGaBfLmJ9Va6qfwZubnWcvNdPyxxr78
g1kWePYEH96oTMQ+nRKD2m8MvHWD/9gsKRPCQ8P+9UcSMHC74m1paya6yszx
bF32MqJ0iXeCJBH/MCK8LBYZuKjxvsatNgcMXNZLJiUQ8Xalz8/3SQxUf6Ob
8PlUPsSkBu+QkpnApv0ffKYimBi0Zz7M40ETyO94kePqO452J18GLHUx8Hvf
0so9dT1gaRD1fWzZ0532KqRtFmfhTLNWrkdGDQT5ah/OYX3ExB+fTG7OsJDm
HaHJ09EPssFzZlVf2+B8TSR3wGcGHqjnzY9aRQBRPY3Dg2MDwE40GPkpxkDd
TZlRS8t96H95r9aPhmnQCcqTeGZKQp/q9FVRYgRwPDlmU5vchy/X6KaWHprB
VNOn7oKZ/fD5nKm8g38kCm16Hq+yh4UbxPcrkuRHIPfG+n3c1r3wI/SYnex6
Jm51jG+03zQG620+Tip/XfZgSo6URGg9vMvJML33iAP3Fq+v67tNAL2mSO9r
cx1QM+Abu+oEAyJunTgkEUSC6mKHlOm99dCiNX04NoIOCScMtos5TMNiL7eM
tV8pHOgadVr/mAYr4GJpjRsd2gLrO77+msArL9/USicMwproKAHycTpIr8wy
3/Z7GK38VtXUHxpf9rHW4X4SDVrHqyrfvezDrMcmlG2HiMDj/q1zQ+kY5AVb
20oljqCp73bPCEs6uI6aDf/uHgALz/NNmxwrkO8T57JpMQssBz/+9H1AACPu
xEFizRvklhta/egcE868bY6VESKDuMh1Oo9UHtxY2y21i5cGLUvvRHSfUOGm
7B2fjg03kHuxXn59HhnuiSm88Yuchtlq1S3fJBE+nbsYdHYPDVxrx2neygOg
qF55L1agFu/JSK32T2aB95VtFen7JqHIXKNHlfchDPj/Z+DEZkJmX92PzGtT
4KHH03GIWg/X31idOd1BAyu68eNzZ5ngeF7j7P3gbiS7Xxf/T3kMWLzlbTJ7
mEDLrryhxt2Er+wny90CJ+GZyqFfd9OYcPScUPvRtx3IHBj5c9d2DAaXhm0I
1kzgq96tVrmhC7+vOfdvTn4cHhA6xJ3/MaBA9U9B9lgX7misPO08Pw76W651
BKlPA4T2bUnqr0H658/Rzs40OHwkliJygAq9/Dr7A9prsVasN7bOgwwDjTvk
AvvoUHK06dUJViPunknTb2UQ4dAnW6dSGhOkEzvsYuNakZ20p3x+ua/m93yV
Ct3GwDpWPWnWmYRfx9QSL9nmwdp6l1lBEQYmx8W9v3ODhDqNunOff+eCt/rr
1oAVDJRZHW7yO5yEo4LvVX+8yQWyoU50ShENpzoLfFWWPVUu3moT7WQOBB19
XCsuQEV9/xC/vu0UTKqKzliTlw1Cg3eKNEcpeO6X8vuxkxTcOrLw7tm+bFht
4xxAyKTgz5t7NW88pmBCv8L+Z3VZcNi8Ivzmh2k8XUgvKzlNQxkLL2Z/YhZk
cJrfpbQse65M8QbiARombhz6a+SRBf/+Bn6WfUnAt8QLoyetlnMmIaDnwHLO
FIacki59NYZbbm9c3Rw1g18Gj12ZXZkDj2wMd0HHIEYcb9nhlMpCp+1u37Sy
c+FaVwHVznQQezyO1Rw2Z+GbVascJq0bgKyct9WEqwFlJ10aZM6xsfSDh8fv
gi6I2XKVvE3yNR6WLd3Je4OMlz9UzL7+SAW1/F1ezStbYDzusZB32yQKn1bs
i1liQIxIkEPzilHwmKs7qD7Vhd8evnVwrGaCYFCTywE3Cnxs5vvt4TaBLl76
l35vIELExXN0RsYkPBfNveO/koyjA5/nvPaS4O6btqYtJsPA9ORK3vCejP9S
9LgiZ6bANEz389o7PfDWqbJ0ZpaMvKf3lSU5k+G0QdeJdwtTsHv+5PzfZCLG
CX5M7vpABHpx+oH89X2QYnxvr416GehGSmwb3M+GnILLHxgHusBuwlBbk7sa
+a3PV1ens0FV1knWYqIBZiq6zl3FATRqOXWdbM+C+Snaq4sOVHAurM97fScf
2/tuTXY0kuGgt6b99hAa+HI+l2fxVePtz3802jdNw5DfOZ4H/lR4qBPg7d0R
iKQrQi3Zn8mgPz7Pm72RDCuSzk2XF/YiT53tXbkfZFhfoWctbUyFT5lQrG7V
j55Ev/1HdaYgRnBjwt0ddHihWmv1O38A/yZe2nJ1LwGITQmRfx9Ng/FkpAx9
YzdcqvDht+ahQkqF18aBbsKyjzQ8+u46BC+K49J/nabBE7VEoRfGwzASdu4/
guwA2K+U6xM0YEKMGtGbyjcCByJnexSqByHtjMW6kA8MSHW+a2XWNgLDFRez
tW2GYadSZ1/eTgakOUUauojQ4fgomSviSCd8qZwnHTlEgtCnFy4qOTBB3cEr
r8OjGT6U8Ekfy5qAYlf+swZIh99RSU923inHRQcHF+1SElzvnmSbzjNA1Seu
fFb/FfLYz5rGGxAhMP+9VQ+BCcYnL09fWVMAj8+t6OhRnIQfKdE8fy5TIYih
sPcKfwV8kf69UjWEDGl6vklrjkzDk5KmswGEWrzo+t/ZlQY00B1uaSuUJUOx
flxV/cpK1KUb/bmPy/my01iOj00GO3HLrkbVIozjDm4/r0GFZ3p4juU3jo9q
zUqVrWaQRLIa3kkqhAzbGzuWzPvR5a9GsosMG8dlh6I+i2fBy0dBQnvm+9HR
7w1q8Syfq+w8XhSbCYaUolbatU6UlNyWEf6XjXu3Al4XTAVSm7sQ4UEXvjjc
OZc0xcastR98XSZTIFEi1eb82jY0dmn1O7WHgysUt0aIziTB03XzBY2yrahh
Z5BracjBZIr544ZLScCnrBIsqN+G5BcrLV6oc9C5yrLrfkMSTG6oY7HC6vA6
dXfJ3QgOVjXQXmx0SYVVOcZlQ+cewl1dtY0EBgcvRej9R9EoApT0O/t210e8
vP9Ot2YkB3eeeugWvKYaMrUGpTYLPYfHp1lGn65y0JMdK8Nd1QhHs9NWtNFr
gWGcfKlJk43+FY36mkk9MPRk0fFjTQ8Y/tEijvTM4A+rsoNvg/pA5OfS24sR
rSC/JJhzJoOJu4dOvKwTHwcZN5f8d4VEpAdXW8tGMtCx00cq/Ush5HGHrGjo
H172qftuFF0WdptMWSrcyQJmzqj+ofIRPCCnsrSwmoUxEnPrlloy4ceJt/TQ
+71YMo0pYT5svLH3z+bhyVSIWfOSfymrDyu71FS2GLFxMOPSYe0fqRC1zrLK
dKIHfTWvhu1/wsYZct/q9Q8zocNZe9+dq4N4QWDNwJlCFkqeDctKmygEtX3b
pbh+EXDnrybORSoDpQ0kf0otVoDXO8Gs7ct55Pdlo7f8dio+XbvlbvyzGqiv
XOcUf6gIl9S5t7cNclBgxaWDOx8XAudHw+OvL7LwJ/neiLEQB7WVKl5/E+sA
L4nV2qqB9VDARz1j94GFgRFDq2u0+4FbOIE//kMR5M51/CZcYWNjvqDt+t29
UJ6kaarK1QZrI7qqtt2eQcWkLIOpuGF4E9ct1zIxDhenoFb9+TLXpao+U172
NXvat7japlFw7V347cvPwADFzjO3S4eAHeA28tZreV78PUpUaFPIoV44SVsa
g0O9Dnzex6fg95s7nBheMvZpp/anMcbgfqjREjZMo1nvgyAHoCGNTOO70lQA
20S/bvafnsYvA5FAlKfh/e62Z61cBSCkfXWdOO8k/tS42vvzKxP3XhNzP3sx
C/L1+VKO505ibIypysYaJvJf/FMTys6E4HemD8vDhvDwoy9j+UEsjIq1MSkm
psOp35b5aXeHsdZEs4JmwcIfC17P93zIhIfB4VLzr0bRULUsdFfXsu/XJOkH
qOQB7/6qLpE39dizI6T96CUOqoQ2BJzp/gBnyrqvPjk8hAY5W1lhJ1nYt35K
kH9LFYjfuCdwKGQYhwlrrDhZM3hV5UmCMl8z+Kxem2W0zHm9TYq6lweZWPRM
eY0BswtSvxvIxXdV4+sExe083HQs+fDBzuz6FMgWzmb7mhHxRfrFOqczk9hl
fHCBQCXDU4+XshJdbXhFr+FYMWcIzzXXjNdHzUDH3wsZD+p6wf131koxFQom
JvR6ew1Nw96lJ+4x3H2QemR3pFkJAe1n2AEsdzosSaf6rnClwye5A03nN0/g
710D0do4BHvOXml/Jk6HrdItny/5DKENx5yZc2wSKqosph33MeCf+HjBeWIf
7v56BTfLT8Dl3LncST0mmLxPUv2q3Y35au9PGY6NwdXEGovsHxTwvWD1YHCx
E+taVstatU+DxeMoHrWHFKTbasfypFOwKxqfVwbnw31/I6m0jxT0VGnx0/Oj
oI9n3K1ZtTwgZKfLvX5CxG28rdeulC1z1nuX4CNbskC0gCHiY0fEt0W5K00G
GPgwaVNxw1ImGO/cm/vWfwJFX8XwRf9j4jfTF7tLk0sh3mGIsRL6sTXw7VzI
IAuvFNHZhQo1sHhih+am1E78XPHMTvj9zDIPfJzfMTII7L2NYceqanBnxYJG
wls6nhKu2rg2jgQDgso1LKkU2H/WdvA8lYXWfH9PBqYMwG8/2Wq/sFHQf7XU
xn7BRI0LcrPy+7phlfNdRYGZcXj0avKV4XM6Rj81E+vRGYJfm26+e9w8CaIE
38uLm6joLnLQ/1//BMS6jrorBE2jypmFpdPBTbDwnPvk8yYqMPLG4wMi+3B1
1vrCxNwmSGhaaqjOYsFm+lfFv69qMdr8iW9OIQkdgrs2PQ2kw9qwGH+P0Dr4
+USLk9ZOwCfpU+3JXxhw5sZd0aDPdBjYIzv5PasK1wYYOvwLJ8GY5baVbY5T
cG6fJ3Lt7safE3JFC7+pcNpHoEOvnggq9SXr34tk4Aree7sGXzBgeKhOHQ2Z
IGyc/mxn/wDeM6YmeUcOwZTcrzD173QYvc/n8Eu9D+0Jl9M8giahJqGx+wKb
Du6PDRdFYzoxq+eO/q0VRDj4RCJr6xc6OA14POuIbsBsdZ/QCztJIBx2x0TW
Zhp45Z40aIpX4IPAp8Ovb9CgevMXu7/XaVjC+5NSHjqNq1IDtjvM5cKl0Oe7
Z17S8L/Q6o98ntNYsXpavkY2F1xiNZr0E6bRfuRO8zVPGlZAis+psSy4R9s/
m8OeQv5Thye9/tDwTL1zEFd9JsjHXS55+WwKJXVrJLQO0pGiWv/n1TI81Urd
7mjiJ+JXz+vx3+cYmDDxd7/o1Q+gui9K0CpxDAVnnkbf7aTh2R8+TxRDxmBb
iihXkHc/6jcEZq/N78VNx+NiigJmgBlY199Vk4idazO9IrYPQaTGRRHBeBZc
qkxtPyIxCW5WzvvXLPNqDZfmUOc1Ekgfkb3Zv8xH9wrVfMU9urH5dXTedWMC
bMoaWHB9QAc7H949/gVvsbNR97XbsSmIXbFaVeYPBWRjXc+En26H6GtH3SJX
keGlXCx/uycRuuqd47CXgu/mHqU3m46B4qCMhEE7CbilpLQHbKYxiKGy7ttK
AljQ1p3Za06D3o1H3Cod23HfxX+bLgdOwQGhpKNv+Wlwifz8/tmML3i1Jdwy
tHYaDtuGpN57RYX3koO66Us1oOX3dHPdJjJESvpH33AkwXT52Ordu1vA1avm
+aIjHXKbN1TvPUmGP/dNw6rMEOwNNk04hFDBykHfQpdMBYtcoQWLjcmwvVWl
X9aQDHG2+VVwngI/fk903jnRA/+pS/XUzyzvm03m/0JHGeBdF89aCChBnTcX
titqESFy1kC/W40BFmx1ue8Ln+ECOhxatYYE2aS+deH+NND+m2efeLsXtF/Z
q2cqkGBYLSPkTCIDyM8EKDOfO/C7wb2L1xYnYYNMovrfp3Rw+HRA/FRSIQro
WCQw5KaA0L8v4aztBO6JWXuQtHEGd5+LcpV2KYRygYkDsduW5615c1BxOBOv
DPCWyp0tBCWdlYt56kMoMbevnPaChT1u9S2xqrlQXuvR5UwdxlItbQkLTRZu
tH7RGGSZC8bdCtvuvh5FJZ+htfbL++hO9EE1oQu5cNKuJ+ql1iAGP/9TZdXI
wgevJJXVkzKBoCdXMyrXg09jTTaVprOxM1zQYe2FNMgNg3uf/XtxIs5lx6dl
nskLMbgjV5AGM/Hq7vpdfag0V3z77z42Xuh5+Or6fNpyvR6a83t1o7DiRMDR
Wja+rOCOvNiXAnqiiVmVnHZUFbFLZWzkoFiV4cWq7ckgT3C50rK+C7vJB3S2
zrNxwtm0juycDNOMgu9zGnWYUuc1HvKMg89/mulqfc8ARQHagrJFPfZV9Cdc
fMDBd6HC7dVFWfD6rdNCL7sVd9ivm6pR4eCuv92iWcY5UBwj+8srqgsDs6xs
HHrYKOmidvHzzSJISv2s2ryzF/npVy1eLHult3NAU0RDKfycv14e+7wInps2
va5+xcEcjBmZPVkDb6vyL6T/V4rsrLfP5Is5GGN+X8Bhshze9WrGrzJKgGS6
TXVzOgfZnc5a7w/VwF+9ZzYKh2pBz8n9hv5WDtrOOs8LjC377F7PVtWOUjge
IHx9YSUHDbZ32oU7toPY5lzpwySE8d/5K1kjbByT2Vz/fb4dTEjNOe1z3RDi
FC3DzmXhUcLZ3vjUTrA/7M+z0nYEihviquh8TGR5YVpeXz8gqV/c7+EgVOjM
DVffoOPrN7F/97RNwJZHtqQWbQJEKIq8nmdR8KoALSw0bwLE+G0CfQWmUKtY
MkYvkY72F7YuLQUVAFPpsPW3w+NoksDddt99Bg+vXK+72TgXrmxnhQ/8mMD1
oi4hvnNMFGm1VHtPz4HUBYV3M8cIWPYssHDzbSaeDNhomBSaA47txjEnpMZw
9rHz14/FM6i66w/U+GWCnuRgzdjlQbRYHGvV+sLC1GNNV2ct0oGkdTVX9uwQ
holeWbcUzsKz8d4KkpbpMJg3q5g4148bUvcXSa5m48pcT7/OTWnQ4uC933Gp
Fwk6irKVZ9j4TresJMIoFyznbps6v+xDZ65+dS8DNkIOl5hqYh5IJAiNa2zL
guOe5VaeyEGfbd+FuC0qYUvWQYmUS6/gvAR9x0o1Dt6QUZE++rYNRtd5P6gL
6MbPu/gc7riw8Q/1g+HrxloY9yU4WE7Xos41qXDtYTYe6a18MPquFdT+i/+q
cy8Rrbb75zkv939rQ89J2TvdEC/vXHlcqAxkxaQfKGQyUbF9nXdxxiSEV9UV
J1/qBqKB2z3qKxa6iR+bOircDS8GiLaup0bB8cGJodP9DLRotpZJSuuHh9e+
02zkSWDZ4bKbKULFHSns7o23hsHzeefHyJF+0NVvLgnPpKNUb0+MhtMk3A9v
//knYwr+GD/4SvCk4BpaPnOvySDkFJnOcTKo8F9//L+XjkTkqQ85+u3eMNxJ
3yOrJUCBjNa7f5lzBLQu2rCYnzkJlzR74lraqCD41uNU08wg/jCy4susIMJ+
UZ2FMTsyCnjM1eZXLd+PKjbsl8iHdTeO/vdPkIh7RPlH1XmYOFW2lCtyIAd2
tO7oOFBPRB8v6/Nz4QyMaNTT2s6TA4zjglYuN0mopPbr/bQoA6NNkqjbMBvS
I/s3MawIeJ5fhUd0ua/if582VI7MBIdjJr/8x4cx6576/A49FnqWWF4Y0csA
g++x9tbJoxhqGtjmvux9/xUk2JT5ZYCOhJpYztO72G/yq3JFPAcpTiqv0stq
wUKyTcPheD7IpW1WWrWOg2Vs/48tnHYoerHSwzI6C2Pq9c9x1YdD+ufmsvXf
OMt1qKffl66BxpyL+cMTLPxUUq1cJt4P4YPrf3sPDEPvVncBTs0yT5aaJmz+
Mgiibn0pR32ngex1DSptyfh23dhju7tDkC5SpciTb4MD54YDjY70Y6Gt3Yyx
ChtE+S3NdcOpUK562Vq8fww/OLgfKlEmAOtX1r2PIzQYMIum0Xx68c4NVbX0
dCIIVd10E8rtA9GJwfqnb/pxhF9e+s/hGag9f/2gOpEORmverVd4OYorLfNX
YPwwOBrdKuW7yYA6i7pPq+yH8dCGc45KD4YhQaW6E2IooCrYIXbcrgVf97zx
vJxPBjGDbkuRz2QQmur0PmVUiw9+taQOLlJAgt9nSlSdijctEiVWL5BRfFxh
bfyRXIi6WfdkOHsK5YZ9fGNV6VhuKRRxxyQbuEJErv8nP43WSTfyr7fRUPIH
+2Dt3+XczuOl+zgQsfTZlv0iy33O3hqeNjudCWpE705H30m8oyewkBXKRC2m
I98PgWrIetb6dNNbAk6pJ5Zv+8fAL1tLpIWbq+FI9UDxVfV+0P/EaThwmYHu
58TcufaOQ8pHhUlRwiQ0uf7XVyRKQf2TJzNGugiwi+d2neZQNTybbMpwTCtF
v42k+ohnHHhIsVmRcI0OVeLKXcKyE+gm8rEsyX0IQgtqBltN6LBOaLPqfsE+
DH34rLmeRIDkk99qvMaoULyqfrQiuRqfS0lEPx2bBt2D92LMB8fhlORzRXPH
Eezw2iC8YR0dVparD04M0aByVHQfVT8eGXfZ9x/KTcPQhngJ+29UuL2BtWSw
oRAOeuvZSGwhw0IcZcLoJBNufctqTSW0ode5O7aLS+Ows8agUkCSAQ27VnUu
friF/0wTbHoekCCMi9ytFEuBAQvDu0oJjahqO086N0YGOb8AL6shGt6ILjkZ
t3EaTwgJ924KzwGZ7ec/PZEio/sf0qOSP1S8Qjq6bVdeFjiPy6fsKSGjZDmv
e6cfFSO9FmbtArJARFrOLOLFMHJTivPPc7GwYsFcbE9aNdg7lK/hG+7F3qL7
8Z+2sNFX5wgt9GQ1dMhfNi1SJYO23a7wJ5GDqK1gZNg/NQ2dwtv+LdkTod/l
5hdTqymspwXENRaQwDh4w2KvKxHiVpvteqnUhHlJ8sHGKgzw2DsVTikagJ0u
uv7m3kPIfCs8fNqSCUP83uTv+VRIyWFdrr8di3rcwzu1A8hwMH2nQHsnFex2
aQt5Bn4CNfqG4OuyZAhW2L4t6y4dDjYbPbRfXYjuev7KCrpT0BKzWvW6Eg24
NNZ+8entghCFPxo7907Bf4J1JQvcFFjnV5Y/OtoLXwlej+2XpmE8x/vsZBAd
jsQvMlN7i8B/S3CKhvIUGA72q//sGUPz0yfWfrszg+s3GBT+W+a68WkNL6OP
fSieQNEx0Gej8A7jJYUjmXBB5mWR5mg/fvtzrK9oDRu90sNuVN3OhM5zBb6z
3F0obGJ4O/MbG92+sjYFPU+B8O9KL1viuvCa893xnQQ2Ji14lPMXpEC3bLVr
yFwrNvT2Z6VqcjBdhHZNYTIJ/A79SY6RaUVdzvo3Lww56NbUaKchkQSErtNn
bui1odKsomaxOgdtzPkdtWOTYF0Zzx+uyFq8uv1u1uXXHPzZ3p7IupAK/5UO
nbJg+4Npd8mG63TOMg/EXrpHLgLV1qvXlvRf4XS2Uj93FgcfmlIeH7KogWaZ
phXGHUkwfvBbooEnB9f/vc5IFGmC21sn/Ys5PWDc8omjt4aFCy/b5HS398LV
euipSBwAh9gY/Co5g7c4n2wevu4DRQNuuHm8C1YYnops+LU87+saSdEnJ2Cl
+McH5WJEXDIb/btngYEGybMz73cWQkn3L6t3HUPo8s4+zNuPhUfK0v0exGfC
C33lju4rIzjuY7hx3yYWLkrKHXcMy4Qh/SQlPUIPuj/3idYJY6ODy9P5LXqp
oHww7T8T92VfTo39dewYG6MmfjU9zU2FlLNZaeKhPXhzNlRPPZqN9J2cuhNX
M+Ht6rshe0MGkfG0Zv39HBZOeUh9vcguhGLzyuLpvwQ0sZaZippioOf8isGP
Kz/DA3lR9Z/vydjm63PCdhsVy/RHaNLPa+BT4+j5vMwctGUrblYc5+D8Z1tp
lYoiWLtaPGGxFGFJXvC79/J7r3JOVl2b0g4JAyrvtZWb4fuzT9N/w1h4QXBc
SGVjP5zWtk+3fV0Pbh/BwY3GQvqERWj+2j4YF7wyt6DfBSM7v956JzODFt7Z
whc7hqGiK8ffPnwcnCt5FUNeMvDMveRoX0YvlKyI+286hghFV7z+Gt6nYrPH
gJ3ZzWG4tstc1vonGfRDDilLGJKQy2fYLmhyDOQKdgp9vjkFfu9GWrncpnGH
qNaFBbMJEM1PuKE+P4VnDVzCJb/SkI/+oJm2uwCMDbdk1VdPY6qV/9k/pjQU
c9Lmf92VDyY/33ealYxj2bFmbTw6g/56xVsf+mdCxMivY2fUJ/HTbNBCEZmJ
KsLcaQWvMsFYUiMmN3AIQ6hmKVzBLJzcsNXccTQdbr38MPDzyBBW7JPrXvOc
hXdTHk+ayGTC9vUvNNhLIzjvIQGU+Rl0SBV8p0PNhVrOGS4h80Z8mGVpVmnN
wd+ffIwkU8vgTst+7m+ryFi84cQ7/nNUpDyUGSz1aYQr9EO6HutJOHn97ZEm
WzpeEHpL2/uoHZ51x1nTPo6jQvxkC35loEdw5GOTmG7olZu6vfl9AfDWZV6p
HmTgu0vVs1+OEOHc3wV3fupdfJFsV3KylLKM8S+Gg0IpkMsfaT9mXoijx6ae
BnaOYe4JXgWRezOwPltydE3ZIAjxa7x42EvGam6z98W7puF0MfMTV88yj9ze
/iL9GQHzv/1p3rSVDqp/CkjMo/Rlr85S9r02jh+fxpttHxyGcO02V7dgBvy7
Ftn4MLkHIyNXaC09n4C2xZvfRGYZYPolTGEhoxvNVcXW6+WOQ0T9WFDKGSYc
lcwR/JTdhTez+ycYdWOwbXAhJqGACjTrPhdPk26UNqq9ebVkCjScZd8LcMj4
UMqhfcU+Kka4dHQMXMqD8rz5n80RFGxguzoXxVPwl+KxUHdCLsR573ykM0BA
FcWBo55KTFzZ+dB8zfKcnrrvFFjJR8TOL/YVbmuZeFZU3TEfMyHsxeaLBc/H
0f7+8+sk/Rnc4M/9JbGuFGYaMhUWSCN4anFkZ/3rGdxpOX9FZ08dSMX4NjUI
9+LvPQcm9i4y8eeh3fs/LvOY6itHleGhWtQ7fuPWj0A6Hptfu6owhwQeRsom
5g/rYXX0+1qNNBa27xifUQjthxdcmS/VS7rx7Qr5DW3Plv3a+154b8sAbHkl
f1tCLA4eGdmsCjo4g2n1c59P08eheHxkh1l3P9goj4f099OwYbNv/uoFApzX
3j32qKkR46MeVFDWdUNjxq2GAhM2/Ik++saA0oH75u8JTH1vBml6qpiSIxvM
842eNZVXQ6ShtvzI0gB2z4tdEAlhwYnUB/3FYt3AcLvyeMZ5FLmvflF8mcQE
gVoj40NudFg4w3XXVLoGQ/5zPyIwRwK9kc4Ph32GwYPziHs1qwFZImvF+Ntm
wONfP+/H02OgO2s1rx55FN/rY5Vs4QzsP/C79AAfEwqXuJQ0Dw3gs1D+nsu/
h0FRkjUXasOEqrRSK/Gf7fhdrV4zKXscJhzqb8aXMKDpx+d+Ad9m/K1wRmSr
NwGoBxvofN/o8Fav+OlETx1+tV77ePcfIsTXh665QZ+GzYX8mXyxX5D3cqga
mUGFn7KzxLI2Kl52uq+Rf5yM/2B+WK01B2Dy3pl9p2moObyERsXT+GbgZsXl
0hzQvXwb8qOnUVGwe+T1VRpK/RNp8mjJAqyjl81vJOGWwB0/umwY6Ki5rTq+
KxM2dUrf0Ush4ffsBYXs73QcWHFsTLYqEwKu3bfIv07AmPhMlqgQE1/fdWh0
1q0BOS+36aycKrxk4KRgl0HGYbVU5/tqVGjNPUL4dTYT9b/qJfbcaEI2MzA8
35EDwqTUpTZyNmybHuD4+w7Dqe0ZYVstWRDSLTUkEjYFi3tXBNSNE9FL/7h1
0w8iFHwxZQkvX50SXwnkVZAwirD7TOBHEnyYf730wogM4btPj8PjLnS7qbom
0IcC7OtpJW8KyeC+/z+SgU4V3A0VUeLZRQUXomlneBABemMj3RcuDOERl9JX
dqE0yE8vOCpaTgINiWs7228Rl3Og/rGZ6hRcmNia5XeYAmP5fRqk1114NZ9Z
J+dJBmVqgqXS8vNtAlyxRagaHdPr1JnJZFhjt5XbcZQC55yWXmJMHTwvs7Cr
aCUDpZ7YO9g1Dj7RJ98pvuyBsJPD7IfIgK3ce+7o5k8BGD05HfqnHjTi/4Um
vKcBn2m69K0cKri5vprd6ZwOAyK1PEL+ZBBY9RFRkga6YubCPiON4NJ++oOO
2jR8vfufjchHOri/qbXkWfsBSWZa4rGjJCgNuSBf40MH3viPzvfefwZPa3qa
s8gUlIoqUP/bTQNiSTBvz9VeSG2TPnwwjATHBBTKgr1oEBtsppTa1Yzirk+F
5hKnIEvssi1uo8Onma8nHtDyMdh2quFl6RT8D2fSqrg=
    "]],
  Axes->True,
  AxesLabel->{
    FormBox["\"density of traffic\"", TraditionalForm], 
    FormBox["\"max speed\"", TraditionalForm], 
    FormBox["\"throughput\"", TraditionalForm]},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->Large,
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{1., 26.}, {1., 6.}, {28.74554455445545, 156.4188118811881}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{0.2382852507424665, -3.3151021466219395`, 0.6350731428277516},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{
  3.730550084357466*^9, 3.730551644633814*^9, 3.7305517044170127`*^9, {
   3.7305517409634485`*^9, 3.730551756621002*^9}, 3.7305518443226757`*^9, 
   3.730551912120984*^9, {3.7305519439323034`*^9, 3.7305519553384757`*^9}, 
   3.7305519977445164`*^9, 3.730642040236296*^9, 3.7307051679814854`*^9, 
   3.7308011314086695`*^9},ExpressionUUID->"d5b75eb0-a782-43dc-b7dc-\
428e1aa2b380"],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf7G9IsDPd2WfjABVwUOC8J/XYwRHK53CwXzLn
8Xd+FyhfwKF2ouY8juduUL6IwzELgQffFnpC+RIOtlF2b3uqfKB8GQcnkH5/
fyhfweGQULHre45AKF/JYcajzoJNCUFQvoqDaUTSuhd7g6F8NYdvWVc/X2cL
hfI1HLw+XJNgbwqD8rWg6sOhfB2HbRGS+wSfRkD5eg4GL6/YnLCNgvINHORm
7zsh4h8N5Rs6GIV/6ZvmHwPlGzkcNV90YElxLJRv7PDtxhfXZRVxUL6Jg2pF
dg+zYjyUb+rgILTH9FgijG/m4NBwu33KZxjf3CHLaSkX8ykY38JBax6HOncV
jG/p8Ckz/UrrDhjfymGv6bFGBvN4BwDFnGla
       "]]}}, {}, {}, {}, {}}, {{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf7NdV/bt1wcXZASrgIMnOdMdOxR3K53BoyM1w
WnrKC8oXcLAV9BMr2ewH5Ys47BNkVZtrFQjlSzj8cW/afkwiGMqXcWhWfdZ1
72MIlK/gsO6FrO78a2FQvpKDwYInqevDIqB8FYdvN764LrOIgvLVHJgZ8+SD
3kVD+RoOcrrzy9xqY6F8LYh+s3goX8dBQPP5j7/JCVC+nkN1zi+l4DkwvoED
yDkXkxKhfEMHkPHnAmF8I4fj7+U573HB+MYObFP2vLl6C6bfxEES5OG/ML6p
wzpDPpYdc2F8M4elwZ8VymthfHMHg5dXbE74wvgWDl07F5Vv0YHxLR2er+f1
XcEC41s5yJb1+8YviXcAAL6RZwM=
       "]]}}, {}, {}, {}, {}}, {{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf7BfrHVl6UMjDASrgEPct6+rn6z5QPodDq5co
25Q7AVC+gMNnhfK/OYbBUL6IQ980f+vFfaFQvoQD1z2pxw4PwqF8GQeOgt8T
it5FQvkKDtlA09vcYqB8JQeJgE+bwr3joHwVh2CQBToJUL6awyTNeRzq2olQ
voYD0LHFrvdhfC2HZzL761UqkqB8HYfrbWohqxhgfD2HZ47vft2cBFNv4HAD
JH8Axjd0WHWoYdL0szC+kYP4zEedBUkwvrGDDSiAHGF8E4c2RlX9alMY39TB
XmiP6TFGGN/MIfky0ISdMPebO5RvqbklORXGt3DYB3Rttg+Mb+nwIk22rF8W
xrdyaPJc/szxXLwDAHuxato=
       "]]}}, {}, {}, {}, {}}, {{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf7MVKNvPtZvd1gAo4mL/eUJ1jFQjlczjw+a4I
SVQIgfIFHMpu2JrVfgyD8kUcXqd3T324OxLKl3AwOir8MMUxBsqXcWjLd2n0
VI+H8hUcapS5fKyWJkD5Sg6tjKr61UsToXwVh+hkGY6C20lQvprDTO0q99PL
YXwNh3NngOAPTL2Wg02U3dueLJi8joPpK6cYqRoYX88hsXPnonITGN/AYTu/
5vMfa2H6DR2aGEAiML6RA/OOWg/Ldhjf2CFi9bz9ZiEwvonD6ufreX0jYHxT
h9c/s52FpWB8Mwc7s9qJmvtg/jN3uHfxU2Z6C4xv4eD07tfNJFMY39JhnyCr
2lwrGN/KoSK7h5nxXLwDACtEZJE=
       "]]}}, {}, {}, {}, {}}, {{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf7IPEH11KOBngABVwmDUTCCRDoHwOBzHtw+aL
EsKhfAEHt/cZP7dsjoLyRRx+30xK/bEsFsqXcMh0WsrFnJUA5cs4JH2/8cV1
WSKUr+DQOGn63ijVZChfyeHSysoJu/VgfBWHSX5nm+98TYLy1Rx+/lU+GH0Z
xtdw+H/rQovXVBhfy6HgWuL3Gy0wvo7D8/W8vitUYHw9By9Rtil7dGB8Awen
d79uJrHC+IYObssqlOa8gbnPyKFiS80tyVQY39jhjOjexU+bYXwTB7b83kIF
BRjf1IHrntRjhwAY38zhHND1m6/C/G/u0JCb4bT0FIxv4bANaHxpIoxv6WBg
dFT4oQuMb+VQqqjHO+1GvAMADZJveQ==
       "]]}}, {}, {}, {}, {}}, {{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf7Jm84r5liQY7QAUchFjV5s46Hgblczh0qx86
2ZQXBeULOOjyTpuhHRUH5Ys4NG0/ZiGwIQHKl3D4rFD+N6cxCcqXcVCao/Mi
rTcZyldw0AqVCPjkBOMrOdz9uvnoqQ8w9SoOylw+Vqb8MHk1B815HOrcr2Dy
Gg7vnE9Z1uXD+FoOp5ryriUeh/F1HCb5nW2+Ywrj6zn8u3WhxcsVxjdw0K/e
+uonN4xv6GAMAo8ToXwjh9PL5waKH4LxjR2ynYW1QiNgfBMH1vzeQgUHGN/U
gXky0EIZGN/M4fH3fpb8u7DwMHfwaVZ91jUPxrdwuGu3ZM7jdBjf0mFiUd99
eyMY38pBqlRRj1ctwQEAAdBkQw==
       "]]}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->All,
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.730550084357466*^9, 3.730551644633814*^9, 3.7305517044170127`*^9, {
   3.7305517409634485`*^9, 3.730551756621002*^9}, 3.7305518443226757`*^9, 
   3.730551912120984*^9, {3.7305519439323034`*^9, 3.7305519553384757`*^9}, 
   3.7305519977445164`*^9, 3.730642040236296*^9, 3.7307051679814854`*^9, 
   3.7308011315336905`*^9},ExpressionUUID->"89d5204f-b9d0-4e75-aff9-\
d26d332a43c8"]
}, Open  ]],

Cell["\<\
This method can be used to visualize data in a 3D plot as a function of 2 \
variables, or create separate linear plots on the same graphics panel.\
\>", "Text",
 CellChangeTimes->{{3.730551775495958*^9, 3.730551793131238*^9}, {
  3.7305520403075857`*^9, 
  3.730552120753829*^9}},ExpressionUUID->"55ee5eaa-c195-46bd-9fe9-\
91487ceb5d68"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2018.Feb.10-11", "Subsubsection",
 CellChangeTimes->{{3.730614382439476*^9, 3.730614383581499*^9}, {
  3.730614506454915*^9, 3.7306145200983286`*^9}, {3.730615536458322*^9, 
  3.7306155378806353`*^9}},ExpressionUUID->"70a62a86-d02d-4441-bf81-\
2322091c40f8"],

Cell["\<\
In February, multiple attempts were made for extending the model to multiple \
lanes. This proved challenging, resulting in multiple unfinished functions. \
The model works by keeping track of he state of the cells of the road, and \
not by handling individual car objects. Therefore, if in one step a car \
arrives to an already occupied cell, it overwrites it and all the information \
about the car previously occupying the cell is lost. In a single lane, this \
is not a problem, as cars only have to check how far ahead the next car is, \
and make sure not to run into it. No overtaking is possible so cars do not \
have to \[OpenCurlyDoubleQuote]compete\[CloseCurlyDoubleQuote] for the cell. \
With lane switching, on the other hand, it is possible that cars from \
multiple lanes try to occupy the same cell, which would result in cars \
disappearing in thin air. For this reason, the next few unfinished attempts \
proved unsuccessful.\
\>", "Text",
 CellChangeTimes->{{3.730614577436693*^9, 3.7306146156740956`*^9}, {
  3.730614671314085*^9, 3.730614835660209*^9}, {3.730614958752771*^9, 
  3.7306152221045585`*^9}},ExpressionUUID->"e7207977-4a7d-46ae-8901-\
9375061c2b01"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"wannaChange", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
       "0"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"l", "-", "1"}], ",", 
              RowBox[{
               RowBox[{"Mod", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "+", "j", "-", "1"}], ")"}], ",", "track"}], 
                "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
           "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"wannaChange", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i", ",", "3"}], "]"}], "]"}], "<", 
             RowBox[{"(", 
              RowBox[{"j", "-", "1"}], ")"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"k", "=", "0"}], ",", 
              RowBox[{"k", "<=", "cvmax"}], ",", 
              RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"k", "\[Equal]", "cvmax"}], ",", 
                 RowBox[{"CHANGE", ";", 
                  RowBox[{"Break", "[", "]"}]}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"road", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{"l", "-", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "k", "-", "1"}], ")"}], ",", "track"}], 
                    "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], 
                  "\[NotEqual]", "0"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"road", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"l", "-", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "k", "-", "1"}], ")"}], ",", "track"}], 
                    "]"}], "+", "1"}], ",", "2"}], "]"}], "]"}], "<", "k"}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"CHANGE", ";", 
                    RowBox[{"Break", "[", "]"}]}]}], "\[IndentingNewLine]", 
                  "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", 
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "2", ",", "lanes"}], "}"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.7306377327256413`*^9, 
  3.730637749085633*^9}},ExpressionUUID->"56e7cd26-97d8-49bd-9a7d-\
47ee879a113f"],

Cell[BoxData[
 TemplateBox[{
  "Do","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"i\\\", \\\",\\\", \
\\\"1\\\", \\\",\\\", \\\"track\\\"}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,113,17,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7306377522759686`*^9, 3.7306420403769197`*^9, 
  3.7307051681269083`*^9, 
  3.7308011315493145`*^9},ExpressionUUID->"2c169192-b3e5-4061-94c6-\
bdc5e033a1eb"]
}, Open  ]],

Cell["\<\
This attempt from 10th of February aimed to nest If-Else statements to decide \
whether cars go ahead, or change lanes. the WannaChange function would \
contain information about which lane the car was aiming to progress in, and \
the checks for safety would be performed accordingly. After some trying, this \
approach was abandoned.\
\>", "Text",
 CellChangeTimes->{{3.7306153888630805`*^9, 3.730615396312789*^9}, {
   3.7306154878022647`*^9, 3.730615552833273*^9}, {3.730615587042205*^9, 
   3.7306156625210857`*^9}, 3.730615885442995*^9, {3.7306159312422633`*^9, 
   3.730615969453*^9}},ExpressionUUID->"3374a20d-ecc3-4874-a591-dcf674b9ffc8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"road", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
       "0"}], ",", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"road", "[", 
             RowBox[{"[", 
              RowBox[{"l", ",", 
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"i", "+", "j", "-", "1"}], ")"}], ",", "track"}], 
                 "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
            "0"}], ",", 
           RowBox[{
            RowBox[{"wannaChange", "[", 
             RowBox[{"[", 
              RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"road", "[", 
               RowBox[{"[", 
                RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", 
              RowBox[{"(", 
               RowBox[{"j", "-", "1"}], ")"}]}], "]"}]}]}], "]"}], ";", 
         RowBox[{"Break", "[", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", 
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}]}], "}"}]}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", "lanes"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"wannaChange", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
       "0"}], ",", 
      RowBox[{
       RowBox[{"goAhead", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", "lanes"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"wannaChange", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
       "0"}], ",", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"l", "-", "1"}], ",", 
              RowBox[{
               RowBox[{"Mod", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "+", "k", "-", "1"}], ")"}], ",", "track"}], 
                "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
           "0"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"k", ">", 
             RowBox[{"road", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i", ",", "3"}], "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"wannaLeft", "[", 
               RowBox[{"[", 
                RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"wannaChange", "[", 
                 RowBox[{"[", 
                  RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", "k"}], "]"}]}], 
             ";", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"k", "\[Equal]", 
             RowBox[{"road", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"wannaLeft", "[", 
               RowBox[{"[", 
                RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"wannaChange", "[", 
                 RowBox[{"[", 
                  RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", "k"}], "]"}]}], 
             ";", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "1", ",", 
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}]}], "}"}]}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "2", ",", "lanes"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"wannaChange", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
       "0"}], ",", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"l", "+", "1"}], ",", 
              RowBox[{
               RowBox[{"Mod", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "+", "k", "-", "1"}], ")"}], ",", "track"}], 
                "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
           "0"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"k", ">", 
             RowBox[{"road", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i", ",", "3"}], "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"wannaRight", "[", 
               RowBox[{"[", 
                RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"wannaChange", "[", 
                 RowBox[{"[", 
                  RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", "k"}], "]"}]}], 
             ";", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"k", "\[Equal]", 
             RowBox[{"road", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"wannaRight", "[", 
               RowBox[{"[", 
                RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"wannaChange", "[", 
                 RowBox[{"[", 
                  RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", "k"}], "]"}]}], 
             ";", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "1", ",", 
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}]}], "}"}]}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", 
      RowBox[{"lanes", "-", "1"}]}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"wannaChange", "[", 
         RowBox[{"[", 
          RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
        "0"}], "&&", 
       RowBox[{
        RowBox[{"wannaLeft", "[", 
         RowBox[{"[", 
          RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[Equal]", "0"}], 
       "&&", 
       RowBox[{
        RowBox[{"wannaRight", "[", 
         RowBox[{"[", 
          RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[Equal]", 
        "0"}]}], ",", 
      RowBox[{
       RowBox[{"goAhead", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i"}], "]"}], "]"}], "\[Equal]", 
       RowBox[{"First", "[", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"wannaChange", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", "2"}], "]"}], 
        "]"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", "lanes"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"wannaLeft", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
       "0"}], ",", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"l", "-", "1"}], ",", 
              RowBox[{
               RowBox[{"Mod", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "k", "-", "1"}], ")"}], ",", "track"}], 
                "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
           "0"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"road", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"l", "-", "1"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", "k", "-", "1"}], ")"}], ",", "track"}], 
                  "]"}], "+", "1"}], ",", "2"}], "]"}], "]"}], "<", "k"}], 
            ",", 
            RowBox[{
             RowBox[{"safeLeft", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
             RowBox[{"wannaLeft", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i"}], "]"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"k", "\[Equal]", "cvmax"}], ",", 
            RowBox[{
             RowBox[{"safeLeft", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
             RowBox[{"wannaLeft", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i"}], "]"}], "]"}]}]}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "0", ",", "cvmax"}], "}"}]}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "2", ",", "lanes"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"wannaRight", "[", 
        RowBox[{"[", 
         RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
       "0"}], ",", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"l", "+", "1"}], ",", 
              RowBox[{
               RowBox[{"Mod", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "k", "-", "1"}], ")"}], ",", "track"}], 
                "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
           "0"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"road", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"l", "+", "1"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", "k", "-", "1"}], ")"}], ",", "track"}], 
                  "]"}], "+", "1"}], ",", "2"}], "]"}], "]"}], "<", "k"}], 
            ",", 
            RowBox[{
             RowBox[{"safeRight", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
             RowBox[{"wannaRight", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i"}], "]"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"k", "\[Equal]", "cvmax"}], ",", 
            RowBox[{
             RowBox[{"safeRight", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
             RowBox[{"wannaRight", "[", 
              RowBox[{"[", 
               RowBox[{"l", ",", "i"}], "]"}], "]"}]}]}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "0", ",", "cvmax"}], "}"}]}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", 
      RowBox[{"lanes", "-", "1"}]}], "}"}]}], "]"}], ";"}]}], "Input",Expressi\
onUUID->"643d701e-42f0-4e5d-8ea9-49458426416e"],

Cell[BoxData[
 TemplateBox[{
  "Do","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"i\\\", \\\",\\\", \
\\\"1\\\", \\\",\\\", \\\"track\\\"}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,114,18,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7306377559452944`*^9, 3.7306420404394197`*^9, 
  3.7307051681737857`*^9, 
  3.7308011315961905`*^9},ExpressionUUID->"f8b6e3ce-c876-4764-9eeb-\
13a3caa0368c"],

Cell[BoxData[
 TemplateBox[{
  "Do","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"i\\\", \\\",\\\", \
\\\"1\\\", \\\",\\\", \\\"track\\\"}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,115,19,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7306377559452944`*^9, 3.7306420404394197`*^9, 
  3.7307051681737857`*^9, 
  3.7308011316430492`*^9},ExpressionUUID->"91253b0a-0f8d-49c5-9894-\
c04b2f09bf8f"],

Cell[BoxData[
 TemplateBox[{
  "Do","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"i\\\", \\\",\\\", \
\\\"1\\\", \\\",\\\", \\\"track\\\"}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,116,20,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7306377559452944`*^9, 3.7306420404394197`*^9, 
  3.7307051681737857`*^9, 
  3.7308011316764674`*^9},ExpressionUUID->"880fd6fe-4a04-4a30-885b-\
544e36d85dde"],

Cell[BoxData[
 TemplateBox[{
  "Do","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"i\\\", \\\",\\\", \
\\\"1\\\", \\\",\\\", \\\"track\\\"}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,117,21,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7306377559452944`*^9, 3.7306420404394197`*^9, 
  3.7307051681737857`*^9, 
  3.730801131705844*^9},ExpressionUUID->"4e4ae07a-9cc6-4042-ae8c-\
8b2b1a25c0ff"],

Cell[BoxData[
 TemplateBox[{
  "Do","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"i\\\", \\\",\\\", \
\\\"1\\\", \\\",\\\", \\\"track\\\"}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,118,22,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7306377559452944`*^9, 3.7306420404394197`*^9, 
  3.7307051681737857`*^9, 
  3.730801131737096*^9},ExpressionUUID->"6a11c71b-630e-41de-8b29-\
7413c00ee42e"],

Cell[BoxData[
 TemplateBox[{
  "Do","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"i\\\", \\\",\\\", \
\\\"1\\\", \\\",\\\", \\\"track\\\"}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,119,23,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7306377559452944`*^9, 3.7306420404394197`*^9, 
  3.7307051681737857`*^9, 
  3.7308011317527227`*^9},ExpressionUUID->"2da9e986-a739-4bb6-b377-\
8c3f34c5d429"],

Cell[BoxData[
 TemplateBox[{
  "Do","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"i\\\", \\\",\\\", \
\\\"1\\\", \\\",\\\", \\\"track\\\"}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,120,24,20141218205426587064,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7306377559452944`*^9, 3.7306420404394197`*^9, 
  3.7307051681737857`*^9, 
  3.7308011317839727`*^9},ExpressionUUID->"9c01b1a9-35d5-4c13-9dce-\
ee0f3aae80d3"]
}, Open  ]],

Cell["\<\
The next attempt from 11th of February was aiming to sort the cars into \
separate lists, depending on where they would progress. Cars would \
\[OpenCurlyDoubleQuote]want to change\[CloseCurlyDoubleQuote] if they could \
progress further in a side lane than in their own. Then they need to check if \
it is safe to switch lanes, or they would cut in front of another car coming \
from behind in the other lane. If the change was determined to be unsafe, the \
cars were removed from the list of cars wanting to switch to that particular \
lane. In the end, cars would remain in one of 3 lists. One switching to the \
left lane, one to the right, and the rest would go ahead in their own lane. \
This bit of code is extremely inefficient with many Do loops and nested If \
statements, but most importantly, the approach is fundamentally flawed. \
\>", "Text",
 CellChangeTimes->{{3.730615972845948*^9, 
  3.7306163757050667`*^9}},ExpressionUUID->"9c28f7a3-9a31-4d39-af27-\
55653060ddab"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Violating causality for road safety", "Subsubsection",
 CellChangeTimes->{{3.730616429627412*^9, 
  3.730616445943286*^9}},ExpressionUUID->"e36ed1c0-38a5-49dc-be93-\
09cdac233670"],

Cell["\<\
The main flaw of previous attempts was the synchronous time approach used in \
single lane simulations. In the previous sections, it was determined for each \
car how fat they would progress based on the current state of the road, then \
they all moved at the same time. That approach does not work for more than 2 \
lanes, illustrated by a simple example. Suppose there are 3 lanes in a road, \
A,B and C side by side. There are 2 cars in the side lanes A and C, that \
would both want to switch to lane B. They could both check if such a switch \
would be safe, and get a positive result, and in the end they would both \
switch, possibly leading to a collision (one of the cars being overwritten). \
To avoid the collision, the cars would have to possess information about the \
intentions of the cars 2 lanes away in addition to knowing their position, \
and know when they would also want to change before they actually move. In \
theory it is possible, but the principles of the CA model assume that the \
cells are updated solely based on the current state of the cells. Such \
problems do not arise in real life, where drivers all perceive time linearly \
and simultaneously, and can use indicator lights to signal their intentions.
The solution implemented circumvents this problem, by changing to a \
\[OpenCurlyDoubleQuote]rolling update\[CloseCurlyDoubleQuote] scheme. In each \
iteration of the update function, cars check where they want to go one by \
one, then immediately advance to the best possible cell. In this scheme, each \
car only needs to be concerned with the current state of the road to make a \
decision. On the other hand, the scheme violates causality, as different cars \
on the road experience time in different instances, and cars can appear to \
have overtaken others before they even check where to go. Still in terms of \
the simulation it is very efficient, as cars do not need to check if cars are \
coming from behind in the other lane or not. Instead, the other car would \
take care of that evaluation when it comes to their turn to move.\
\>", "Text",
 CellChangeTimes->{{3.73061644858156*^9, 3.730616879985404*^9}, {
  3.730617184113207*^9, 3.7306173089264216`*^9}, {3.7306180924318485`*^9, 
  3.7306183107912073`*^9}, {3.730618355180353*^9, 3.7306183752105412`*^9}, {
  3.730618410008196*^9, 3.7306185039930525`*^9}, {3.73061925553863*^9, 
  3.7306193688898053`*^9}},ExpressionUUID->"53d6b46e-4909-4445-98b6-\
b5b905541fec"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2018. Feb. 28 - Multilane solution", "Subsubsection",
 CellChangeTimes->{{3.730618514400365*^9, 3.730618525538965*^9}, {
  3.7308002530107985`*^9, 
  3.7308002580427847`*^9}},ExpressionUUID->"58074de9-f360-4324-a2e6-\
c40143262217"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"generateMultiSeed", "[", 
    RowBox[{
    "frequency_", ",", "cvmax_", ",", "tvmax_", ",", "truckratio_", ",", 
     "track_", ",", "lanes_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"generateTypeSeed", "[", 
       RowBox[{
       "frequency", ",", "cvmax", ",", "tvmax", ",", "truckratio", ",", 
        "track"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "lanes"}], "}"}]}], "]"}], 
    "\[IndentingNewLine]", ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testMultiSeed", "=", 
   RowBox[{"generateMultiSeed", "[", 
    RowBox[{"0.2", ",", "5", ",", "3", ",", "0.0", ",", "300", ",", "4"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.730627250613385*^9, 3.7306272509613085`*^9}, {
   3.7306428563789577`*^9, 3.730642857160117*^9}, 
   3.730654610393215*^9},ExpressionUUID->"b4ce99d6-d15e-4939-8e86-\
8e1d623a87fa"],

Cell["\<\
The seed generation for a multilane simulation is a simple table of n single \
lanes where n is the number of lanes.
On 17th of March, a new version of the multilane seed generator was created, \
which only places trucks in the two rightmost lanes.\
\>", "Text",
 CellChangeTimes->{{3.730618594948111*^9, 3.730618661633477*^9}, {
  3.730800200886554*^9, 3.730800232917948*^9}, {3.730800273344138*^9, 
  3.7308003308869877`*^9}},ExpressionUUID->"1d0f5af8-ccd6-49ee-b739-\
d18d4f218127"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateTypeMultiSeed", "[", 
   RowBox[{
   "frequency_", ",", "cvmax_", ",", "tvmax_", ",", "truckratio_", ",", 
    "track_", ",", "lanes_"}], "]"}], ":=", 
  RowBox[{"(", "\n", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"generateTypeSeed", "[", 
         RowBox[{
         "frequency", ",", "cvmax", ",", "tvmax", ",", "truckratio", ",", 
          "track"}], "]"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"generateTypeSeed", "[", 
         RowBox[{
         "frequency", ",", "cvmax", ",", "tvmax", ",", "truckratio", ",", 
          "track"}], "]"}], "}"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"generateSeed", "[", 
          RowBox[{"frequency", ",", "cvmax", ",", "track"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"lanes", "-", "2"}]}], "}"}]}], "]"}]}], "}"}], ",", "1"}],
     "]"}], "\n", ")"}]}]], "Input",
 CellChangeTimes->{{3.730800329277198*^9, 
  3.730800329277198*^9}},ExpressionUUID->"daa2b236-45f4-4d65-858a-\
c94ee07a32ce"],

Cell["\<\
This function generates 2 lanes with trucks, and l-2 lanes with cars only \
with l representing the total number of lanes. Then it flattens the first \
level of the lists such that the road is in the same data format as seen \
before. The update function was not modified.\
\>", "Text",
 CellChangeTimes->{{3.7308003335266604`*^9, 
  3.730800450729811*^9}},ExpressionUUID->"a11351b8-3581-4424-abea-\
7921c71dc41e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"howManyAhead", "[", 
   RowBox[{"road_List", ",", "l_", ",", "i_", ",", 
    RowBox[{"{", 
     RowBox[{"track_", ",", "lanes_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"output", "=", 
     RowBox[{"{", 
      RowBox[{"\"\<null\>\"", ",", "\"\<null\>\"", ",", "\"\<null\>\""}], 
      "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{"l", ",", 
              RowBox[{
               RowBox[{"Mod", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "+", "j", "-", "1"}], ")"}], ",", "track"}], 
                "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
           "0"}], " ", "&&", 
          RowBox[{
           RowBox[{"output", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\"\<null\>\""}]}], 
         ",", 
         RowBox[{
          RowBox[{"output", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "=", 
          RowBox[{"j", "-", "1"}]}]}], "]"}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"l", "\[NotEqual]", "1"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"road", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"l", "-", "1"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "+", "j", "-", "1"}], ")"}], ",", "track"}], 
                  "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
             "0"}], " ", "&&", 
            RowBox[{
             RowBox[{"output", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "\"\<null\>\""}]}], 
           ",", 
           RowBox[{
            RowBox[{"output", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "=", 
            RowBox[{"j", "-", "1"}]}]}], "]"}]}], "]"}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"l", "\[NotEqual]", "lanes"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"road", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"l", "+", "1"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "+", "j", "-", "1"}], ")"}], ",", "track"}], 
                  "]"}], "+", "1"}], ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
             "0"}], " ", "&&", 
            RowBox[{
             RowBox[{"output", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "\[Equal]", "\"\<null\>\""}]}], 
           ",", 
           RowBox[{
            RowBox[{"output", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "=", 
            RowBox[{"j", "-", "1"}]}]}], "]"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", 
        RowBox[{"road", "[", 
         RowBox[{"[", 
          RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}]}], "}"}]}], "]"}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"output", "[", 
          RowBox[{"[", "k", "]"}], "]"}], "\[Equal]", "\"\<null\>\""}], ",", 
        RowBox[{
         RowBox[{"output", "[", 
          RowBox[{"[", "k", "]"}], "]"}], "=", 
         RowBox[{"road", "[", 
          RowBox[{"[", 
           RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}]}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", "3"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"l", "\[Equal]", "1"}], ",", 
      RowBox[{
       RowBox[{"output", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", "0"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"l", "\[Equal]", "lanes"}], ",", 
      RowBox[{
       RowBox[{"output", "[", 
        RowBox[{"[", "3", "]"}], "]"}], "=", "0"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Return", "[", "output", "]"}], ";"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",ExpressionUUID->"ad9e8c8f-c02a-4179-8e44-83f1593b3b65"],

Cell["\<\
The multilane update function uses an auxiliary function, howManyAhead, which \
calculates how many steps a car in a specified position can advance in its \
own lane and the 2 lanes adjacent to it. The function also takes into account \
that if the car is in a lane at the side of the road, it can only advance \
ahead or switch to one side lane. In this sense, the road is NOT assumed to \
be circular. (For the geometrically inclined reader, the road mimics a M\
\[ODoubleDot]bius strip, not a torus.) \
\>", "Text",
 CellChangeTimes->{{3.7306186779104133`*^9, 3.730618699819787*^9}, {
  3.7306187365394597`*^9, 3.73061876566706*^9}, {3.7306188159946203`*^9, 
  3.730618878944686*^9}, {3.7306189198519483`*^9, 3.730618927416413*^9}, {
  3.7306189903526974`*^9, 3.730619014977745*^9}, {3.7306190741642833`*^9, 
  3.7306190797595515`*^9}},ExpressionUUID->"cf27ff4b-a3a7-40fc-947c-\
ce3563b10001"],

Cell[BoxData[
 RowBox[{
  RowBox[{"multiUpd", "[", 
   RowBox[{"roadin_List", ",", 
    RowBox[{"{", 
     RowBox[{
     "cvmax_", ",", "tvmax_", ",", "track_", ",", "brakeprob_", ",", 
      "lanes_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"road", "=", "roadin"}], ";", "\[IndentingNewLine]", 
    RowBox[{"output", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", "track"}], "]"}], ",", 
       "lanes"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"distances", "=", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[Equal]", 
           "1"}], " ", "&&", " ", 
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "<", 
           "cvmax"}]}], ")"}], ",", 
        RowBox[{
         RowBox[{"road", "[", 
          RowBox[{"[", 
           RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "+=", "1"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[Equal]", 
           "2"}], " ", "&&", " ", 
          RowBox[{
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "<", 
           "tvmax"}]}], ")"}], ",", 
        RowBox[{
         RowBox[{"road", "[", 
          RowBox[{"[", 
           RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "+=", "1"}]}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", "1", ",", "lanes"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
          "0"}], " ", "&&", " ", 
         RowBox[{
          RowBox[{"RandomReal", "[", "]"}], "<", "brakeprob"}], "&&", 
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], ">", "0"}]}], 
        ",", 
        RowBox[{
         RowBox[{"road", "[", 
          RowBox[{"[", 
           RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "-=", "1"}]}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", "1", ",", "lanes"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i", ",", "1"}], "]"}], "]"}], "\[NotEqual]", 
          "0"}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"road", "[", 
            RowBox[{"[", 
             RowBox[{"l", ",", "i"}], "]"}], "]"}], "]"}], "\[Equal]", 
          "2"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"distances", "=", 
          RowBox[{"howManyAhead", "[", 
           RowBox[{"road", ",", "l", ",", "i", ",", 
            RowBox[{"{", 
             RowBox[{"track", ",", "lanes"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"distances", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "<", 
            RowBox[{"distances", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"distances", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "<", 
              RowBox[{"distances", "[", 
               RowBox[{"[", "3", "]"}], "]"}]}], ",", "  ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "Contains", " ", "preference", " ", "to", " ", "keep", " ", 
                "to", " ", "the"}], " ", "-", 
               RowBox[{"1", " ", "side"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "=", 
               RowBox[{"distances", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], ";", 
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"l", "+", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", 
                    RowBox[{"distances", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", "1"}], ")"}], ",", 
                    "track"}], "]"}], "+", "1"}]}], "]"}], "]"}], "=", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"road", "[", 
                  RowBox[{"[", 
                   RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", 
                 "\"\<moved\>\""}], "]"}]}], ";", 
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "=", 
               RowBox[{"distances", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ";", 
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"l", "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", 
                    RowBox[{"distances", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", "1"}], ")"}], ",", 
                    "track"}], "]"}], "+", "1"}]}], "]"}], "]"}], "=", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"road", "[", 
                  RowBox[{"[", 
                   RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", 
                 "\"\<moved\>\""}], "]"}]}], ";", 
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"distances", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "<", 
              RowBox[{"distances", "[", 
               RowBox[{"[", "3", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "=", 
               RowBox[{"distances", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], ";", 
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"l", "+", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", 
                    RowBox[{"distances", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", "1"}], ")"}], ",", 
                    "track"}], "]"}], "+", "1"}]}], "]"}], "]"}], "=", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"road", "[", 
                  RowBox[{"[", 
                   RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", 
                 "\"\<moved\>\""}], "]"}]}], ";", 
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", "i", ",", "2"}], "]"}], "]"}], "=", 
               RowBox[{"distances", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], ";", 
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", 
                  RowBox[{
                   RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", 
                    RowBox[{"distances", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ")"}], ",", 
                    "track"}], "]"}], "+", "1"}]}], "]"}], "]"}], "=", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"road", "[", 
                  RowBox[{"[", 
                   RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", 
                 "\"\<moved\>\""}], "]"}]}], ";", 
              RowBox[{
               RowBox[{"road", "[", 
                RowBox[{"[", 
                 RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}]}]}], "]"}]}], "]"}]}]}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", "1", ",", "lanes"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"road", "[", 
           RowBox[{"[", 
            RowBox[{"l", ",", "i"}], "]"}], "]"}], "]"}], "\[Equal]", "3"}], 
        ",", 
        RowBox[{
         RowBox[{"road", "[", 
          RowBox[{"[", 
           RowBox[{"l", ",", "i"}], "]"}], "]"}], "=", 
         RowBox[{"First", "[", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"road", "[", 
             RowBox[{"[", 
              RowBox[{"l", ",", "i"}], "]"}], "]"}], ",", "2"}], "]"}], 
          "]"}]}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "track"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", "1", ",", "lanes"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Return", "[", "road", "]"}], ";"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",ExpressionUUID->"205681d9-a00c-484b-90af-ad7ae6698761"],

Cell["\<\
The first two parts of the multilane  update function are the same as before. \
Each car\[CloseCurlyQuote]s speed is incremented, and some are randomly \
decremented according to the brake probability.
As mentioned before, the next part of the function works sequentially on each \
cell of the road. The function sweeps through the road lane by lane, from \
position one to the end of the lane. If it finds a car, it checks if it has \
already moved in the current iteration of the update function. If the car has \
not moved yet, Through a series of If statements it determines in which lane \
the car can advance the furthest, and moves it to that lane. If two values \
are equal, preference is given for going straight ahead, then to move to the \
lane to the left. This mimics highway regulations which state that cars \
should aim to keep left on the motorway when possible. When a car moves, a \
\[OpenCurlyDoubleQuote]moved\[CloseCurlyDoubleQuote] tag also gets appended \
to it. For each car the function checks if the car has already moved, so if a \
car ends up in a higher number lane, it will not move again as the function \
sees it on the road again. At the very end, the \[OpenCurlyDoubleQuote]moved\
\[CloseCurlyDoubleQuote] tags get dropped from each car, so the list will \
have the same dimensions and information as in the beginning.\
\>", "Text",
 CellChangeTimes->{{3.7306194104101515`*^9, 3.7306195856502314`*^9}, {
  3.7306196915731926`*^9, 3.730619768198086*^9}, {3.7306198943505535`*^9, 
  3.73062006094825*^9}, {3.7306269887349577`*^9, 
  3.7306271479780517`*^9}},ExpressionUUID->"e3e9e33e-7da3-4046-be8e-\
df04c50017c8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"generateMultiTraffic", "[", 
    RowBox[{
    "seed_", ",", "frequency_", ",", "cvmax_", ",", "tvmax_", ",", 
     "brakeprob_", ",", "truckratio_", ",", "trac_", ",", "lane_", ",", 
     "iterations_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"track", "=", "trac"}], ",", 
        RowBox[{"lanes", "=", "lane"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "seed", "]"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"road", "=", "seed"}], ";", 
           RowBox[{"lanes", "=", 
            RowBox[{"Length", "[", "seed", "]"}]}], ";", 
           RowBox[{"track", "=", 
            RowBox[{"Length", "[", 
             RowBox[{"seed", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ")"}], ",", 
         RowBox[{"road", "=", 
          RowBox[{"generateMultiSeed", "[", 
           RowBox[{
           "frequency", ",", "cvmax", ",", "tvmax", ",", "truckratio", ",", 
            "track", ",", "lanes"}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"traffic", "=", 
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"multiUpd", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{
              "cvmax", ",", "tvmax", ",", "track", ",", "brakeprob", ",", 
               "lanes"}], "}"}]}], "]"}], "&"}], ",", "road", ",", 
          "iterations"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "traffic", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testMultiTraffic", "=", 
   RowBox[{"generateMultiTraffic", "[", 
    RowBox[{
    "testMultiSeed", ",", "0.15", ",", "5", ",", "3", ",", "0.1", ",", "0", 
     ",", "300", ",", "5", ",", "200"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.730627264958374*^9, 3.730627265330282*^9}, {
  3.730627750684328*^9, 3.730627751060416*^9}, {3.7306377708720937`*^9, 
  3.7306377726793113`*^9}, {3.730654587835634*^9, 3.7306545911639276`*^9}, {
  3.730654682802366*^9, 
  3.730654683246397*^9}},ExpressionUUID->"29ef70d9-d983-4b9e-85b3-\
e4ed6ad54815"],

Cell["\<\
As before, there is a function to generate multiple lane traffic data, that \
applies the update function to the road a specified number of times. 
The functions to calculate throughput and average speed were also modified to \
handle multiple lane traffic data.\
\>", "Text",
 CellChangeTimes->{{3.730627168963541*^9, 3.7306272103024936`*^9}, {
  3.7306273090854216`*^9, 
  3.730627343499834*^9}},ExpressionUUID->"a5a797fd-4670-481f-925d-\
0e00b23cef68"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"totalMultiThroughput", "[", "trafficin_List", "]"}], ":=", 
   RowBox[{"N", "[", 
    RowBox[{"Mean", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Total", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Last", "[", 
          RowBox[{"Transpose", "[", 
           RowBox[{
            RowBox[{"trafficin", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"2", ",", "3", ",", "1"}], "}"}]}], "]"}], "]"}], "]"}], 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "trafficin", "]"}]}], "}"}]}], "]"}], "]"}], 
    "]"}]}], ";"}]], "Input",ExpressionUUID->"93f7b26b-129a-47ea-8205-\
c5219ec97ea4"],

Cell["\<\
This function uses Mathematica\[CloseCurlyQuote]s built in list-manipulation \
functions to extract the speed data and calculate the total throughput of the \
multiple lane road in an efficient manner.\
\>", "Text",
 CellChangeTimes->{{3.7306399118085546`*^9, 3.7306400238943214`*^9}, 
   3.73064019147323*^9, {3.730641418379395*^9, 
   3.730641472611394*^9}},ExpressionUUID->"edf25d6c-0ae8-41ed-95e9-\
98d5a8e2f7b9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"numberOfMultiCars", "[", "trafficin_List", "]"}], ":=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{"numberOfCars", "[", 
       RowBox[{"trafficin", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "j"}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"trafficin", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"averageMultiSpeed", "[", "trafficin_List", "]"}], ":=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"totalMultiThroughput", "[", "trafficin", "]"}], "/", 
     RowBox[{"numberOfMultiCars", "[", "trafficin", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7306415144564276`*^9, 
  3.730641515504609*^9}},ExpressionUUID->"6841ee82-834e-440a-9ed4-\
7184c292c109"],

Cell["\<\
These two functions calculate the number of cars in a multi-lane road, and \
the average speed of the cars in an input multilane traffic data. \
\>", "Text",
 CellChangeTimes->{{3.7306417078797398`*^9, 3.7306417513146772`*^9}, {
  3.7306543557953777`*^9, 
  3.7306543588076496`*^9}},ExpressionUUID->"16017976-90d6-4e24-926a-\
1ac522bd882e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"createMultiAnimation", "[", "trafficin_List", "]"}], ":=", 
   RowBox[{"Animate", "[", 
    RowBox[{
     RowBox[{"ArrayPlot", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"trafficin", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "j", ",", "k", ",", "1"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"trafficin", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"trafficin", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "trafficin", "]"}], ",", "1"}], "}"}], ",", 
     RowBox[{"AnimationRunning", "\[Rule]", "False"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"createMultiAnimation", "[", "testMultiTraffic", "]"}]}], "Input",
 CellChangeTimes->{{3.7306424758276243`*^9, 3.730642479265066*^9}, {
   3.730642513808259*^9, 3.7306425447948027`*^9}, {3.7306426029720216`*^9, 
   3.730642611361034*^9}, {3.7306426787685456`*^9, 3.730642825044362*^9}, {
   3.7306428837362304`*^9, 3.7306429115670276`*^9}, {3.7306430158009787`*^9, 
   3.730643016439093*^9}, {3.7306430690968475`*^9, 3.7306431148318653`*^9}, 
   3.730643148348056*^9, {3.730654673505659*^9, 3.7306546786540194`*^9}, {
   3.730654748378972*^9, 
   3.730654748650987*^9}},ExpressionUUID->"e880e7c6-e2c3-45ce-a77b-\
2d01685ba48f"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 201, 1}}, Typeset`size$$ = {
    605., {13., 20.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$11139$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$11139$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ArrayPlot[
        Table[
         Part[CompressedData["
1:eJzNvW2WHLnOpKmUVAuZ/72aWUJvYNY5u5q3JKUy3B2APWZg1LTOubfC6SQI
4sMAgozI/+t//z//9//++e3bt//3f/7373//18e3b9+/5f8+/rl+/vjx8ePW
43+eP75fe768/X6h8PNK9ePjz9jvz9k6iv9S+Xrzys3X53/p/p79PvLz/3+/
ee33q/XnleKTky8KV/qvK/q7soL/vyt9zPKk+Rx1+fTz76eP54hq9j9r/udz
xJ///+eVn7//vdH8V+Z/ef9+X8Envf/R9sM++n9fK/ia+6Gxl+duRReuftvo
xyv9Xg9//v+Fj0IvH790+ePXp4ctP7zhr9x+29SrRT36fsrzJoeC248rr3+t
rBl5mbW0jguXnz1/1v4iePv5OsMrvSv/PeXflvV71Kesi17fL08tZ7/11fL6
8K5XWX5JYuL/t43N9lit+FODxbuPej3/0/eBb9eeV6SbfO+JVa80egz560Wf
M/14QZ5P1PvxOsOnfH5r9u/4H1/Y+AdzXih3PvLktFvFo+/3Cklfx98keYs9
1/d/+fuNL/98YucVn/61vf95e8FJ/a/C9L8tHz2lT0sSMnu1oKf1396+rrOY
7yXCdvH+9fOrZf0bHT5pf83yB8++v1Auc4FPGrfnr7j8JcMSPWoOKcKp3q9+
cp2F0H+h8Wrfl/hOLP/qjX8w6lUDP559X5/6nOTFV79/fq4k/rfHLSJ88fES
HwvJ3Cnf6V9xpl1NZQtNj2qe14y046mf/TrH6//fUW7i4uJHDw5e/YX8e9jW
Lc49MpN/Kq6vuv1c2WBVrZ6usfzS4+Pa82/71RuqHL3x+5o/rrNn/1fUedXW
fZfQ8lf42ZdkKr4+Z5qwS8SIIY58u+3S2tW+tv6NcX9s5eOeqbxmJDe+a420
O6OHXb346X309XnWZLkzvVj1La9p4vSFjysW/vPqMy87lDILfeB86Z1fqF7N
KyJ8nVlfbE+h673lKxPu92pqX1/Z0EXeg793GN/1//25tOUSU+84N+25Hhzd
4qeOxM85BJY8/PrLEko/KWyqRu0vbXztTi6jCguqOOz79P/ueNRRUnK8jSsx
8Ne+r0HHKV5cs6vfue4XxSeNCT1e5XvlpZP4t2vd7JJzPVZY63fI9l7fPxFt
4qyrzV3pVn5wfW7i8z3DBdnVjf+f/buSo8r72p3JTQ9PhBp8+fe++qb9wnPv
PKg1PHsOmc0tL/uqcdXWW0XQvk+R2RZ57Fcs6aLsi7V9v0eeKssqJFBb5sUq
myxljBH1+Is0PlQs/PY3OlVV3xu10v6rnhOdeaVV/qCyugefdZ2oHE/w5i7T
L2p1LlbhY7G7edD8fF8jzPWfsv9nFlfQGDKtJr8f7ak/Qakx+FnTnjPGao5H
7fSZGw52qSN6VY15RfVXWlOF79n2WMmPPlo8cUZLrbbm8lPLt5J21Wf6d8uE
C/Sf+XnQq2TVZjQV/a9a1DOj6TObUguPynXPyyDxZpc571NFzJf9LhlhHXsf
OflXvv7g9e6TKHe/1DZuHjpJ8IGWTaWvz0Ou44rT1hrlh1X94bqIFI9dZ6uH
jr+657wD+hvjy1180V9+njPb4bzsx7cmylbns893RY14sP25ljJV2uvs6sLT
UMXqUOvFCprdH4r91xy6jO2NH7Syopr88o7aM//sKxTitZL/XTt+5kxXDb7s
f5rqa4Hxt95sv1Tbv15XT6PmTo0ZKqaPOPM6g7J85vffrjvtV730I350Wp5r
UFV29bBKvavpVjXn4SOmqL3o6362XvuQ/dwtpI1P9J+et86di34PaSj/vlK8
16SvY/vKUBntX7OEbifWeter/04Vm5of5beqX1+L6nFlqi7NVlOdYjQVrCm7
uucZArloJlCgb6OHdk/zOHO5nQ621u0gvh5R3U3oNT35vc6unlG72JMUleE7
irXeArOresfS1lJ6f7xUzdqo+mPC+1FbN4p9dgVifxvpv/aQ3dtKkxrxn3b9
uq9AuqkqQ7fbqp2tTnX9Ort6afvoEe1Oq+AQjFHVmol+P0c9zyXOfNz9+Urt
MY/5ufK8ey++v55rTO5eo7HRF77udkSj3J32nHO3yMbkqzMtUNEC8WmqD4z5
2IxOD1qP7KrObvr9dYN9j/iqbLJEEehn9x60CvmFatd9YdkXZ1dFlG81eK9E
dV6VZ1cv/Yf7bHM21tor2Yk+axXD3mXyzceJn7Uv/lvF+lrVXOdv/J5kVx1n
10pxPe5ZAa45UDj59fkWXZEGexSjyCSeHnjMsqunDqddjapjPKsS9z79Gh/z
/tJXXYF+0hp94DJ6QiVZ37vov+L4yQ2zAjpmztUUBW1rZBfftV1yDyvTGuIS
8I77Wd9tlnJP6u06u8yttsw5yj34G7OreT84UbvvafJMy6uejbkCwFzoB8N+
qcfvjvqlVedqRW5ztUGO6feWfl9R64flgl89nrWZIv/pdzC3vpvsaub2PkPN
T9Ni2WuFQ6TC18X9EinHmgmzc70T7bmk2dVvzLjgfvv9sG+P3fiV42qmnocv
Pvq7Ar0Mixg97o2VVw4z3XDf3B02GNH07vPQ0hZuUfdWtfv87x+LKHTa12tJ
TeO1Gqaq+c962xcteVrZc1nj6C3DVZZTP/X/dHZ1z4qd07Q73cc8INP6spZB
j98n7+jfPDOt3zP9oTlE4pJCgxVTNXdqrT+rPKHH8jZDOpJpudWzPlfYZVdX
n35mOu2sXUZYyHPmaL41xvx3lvsUr78w/pk71buF1x7fvjV7ywKz25UcyK5e
3snsSteaqxbbXss6350So1Fz+GwddiAfVzt/fAL5N4lYnZde7KCKxrfs6vWU
nWisyYLRXQGWaXUt1Ct/oUs5E7H45ywXi5o4uO+Mr3oRp2Wa/pfG/sbBNpui
sn71V36fq6CP66xTrqojT0FvmWmB7MrexT/mGOyCzKr6Xp8fd9R72b3e3qo8
H+UprTY6O6rixofSqaqw6d35yGucaZ3Jriq5xdnVo45UxaH7eMbnxFF2zqYt
Wp1vtdnzV3bVfY8S7JseVAUSqeyq9LNldjVpqMsLa+77zzfLaXbgdUtnVy+f
oS9W0aO+g6px+HP0k14l/eud55f2x7npa3tlYb9H/5UriZMXy5pG3alfe5Tr
N+PMELOj7OprtI4SLU91XJpl9PTcx/6h5mCOioXlNFXMVirtdw7SiDB60Rjr
KFL3KKzG95HkgTIyKgs5NpmnQqFbbjKdAjX++2oLTY0VrM2R4LVdo7Hhs8Dy
pneLTOtMdvWIZ3529ecTqMpUtFp6Q/X6YS9lTkRQ7jF/cefidY3dqGsu8sTN
v3zDW4gKUdzsaqoJTlVE78ZQRafqJ23p7wnha5bhSqlFOFQ30jGV599VTvLs
9Tp79VTdq3ilXkXWPk+dfcGtCk9tac+rLuvoVdiExPnpG/2OJutfaJwt/yrf
q5Sds9iO71cLecXKLP7UtBWdXofTXCTToruYrgfLri69HreeiDW7a2lRqF05
mgHU291My6kPdn72jFKb/N2NLdMoZ51u7x3dLhpPNJ/PXdR5jLrYy5wTleOF
FdcnzXKUqN/9xVHrG099DhFlV48VEnv0su9rfxojOh7nb1Z1dPt1eR7yGDHW
rlRsrSzxFQ8rO52s6hoJ7m97mXXZ5l+cWVSF+14XSQ11zpl+/ftyz72C2hEX
d9xBFbRrS3rcsqvyNn3JTasLVQ3v1vjr7zYobstoWHBnx0SaafVW2/F8ez9k
V3MvPiP9BZI5u7r/NYAJnTqOJsyveCeZ1helV0+e9ucFX+MJy8aSSGzx1slm
472dM9anLMFpNsw7LzNO9nqpntXncmx8/U9XPZ7WK88Xozu5Be8iqyrj7TO7
kruoKprdueljYTuivd1yy67G7/iQDIYgdLPex2/8TuhFrG708yby/fkvPLVu
NIv84Zq3G+eDKHKqLLWmfW2to85816SRa7mDqvmYMy2dmQgMau45aFoPHyrO
nr90+u+n5huRQ12q08mdRtVbRyM1V2Mzprz79wUG4wrvNGP/q8F/Ps/ZFT0T
ZJFxxPxpZP1++lfiY/339coaFrkbGeTvoFLYjj2YXSmOZk7N757DTAtGhkue
xebhnn19nvF6ymqm/l7M6XKeev4H/Wv17xkxhD3SrPmVSyr7Krt68j3P27UR
CdcIoTGI+Vnfo/lNhYcUouyKodCFxvMbk/deej+fY1OjT5H1dxbe0Xz+RaA5
d9To7ET+C0IU2KloTXuXirdvzbcepjW1qxe/efLgyNa4wmMyph/3512EwbMN
zN+KINRwHtR5V/l75EFUflTTL9x+4sDPK/X7HH605DgfZFqLrCjNrmZPoRhp
fOMkzbQMqc1V341nzxg/201vX7VFzv5V9e3pavozEhD+kA0izKj29Juzqk6H
PTfXPv3f5rzizJMmy7T6v1v1ragm3WehGTLx+r6a0lc8aonzmOR4Z09v2rHf
6bzIvPvF2DHTUjXUvveTx7+f4G9p8Ryw+jzMMtZW+/Vk2mJ4rimW1Mabu492
WBm+PykbcND7abPOWV7vXfd4QzWgdHCzgPZkO4mW9NvqbjZD/Pd8lsZ3kDq7
0r+Px3WaZFpF3C1aBjQSHkGzOpnd2dnVzMlVCxVdvUO7rEfmcYo/H1Of/kdu
pwicdVB2yMDufzt3pM/qrdc35bdvK8+6vuvo6jOOdnyT0XUZso4hZN60pjFZ
c23zj5lH3Gpn1ShPEe9xLuWc1c1Rb7Q4OIvac6XaohKqnkQ9QO8Zu+qewrg2
xyyzfZy7vLbMd0aeY+cMOal58BrmYyTMCLtoWdVza47u9F0kOfZZ7qmT/cRz
fP+LA9Tjj2daIybWbY5HVFLWvnEdmWVXd//qY8WTs94irjS72Xz+IkwtckV9
O+Vdmdbf1nskLu/Jk9sb9Zv6Vp7+LY8iu6oz0de/ugN1V83peXAfDcqYhOsi
2srIeUi3K2k8d/RmD1WvvyB7P22rZ+PywHXlx90CXtFacBdZVJW70ihVve3a
CMZpvYdVIutGLpV4ml2pGNrZHMsI++zq5bdkZE35tbX7FmKSg3if593qkwea
aT2zK1rjdnE6p3FHW+JpKvZXz55vPO2so4vxp48VMLtyMpTtPugV43W2sfve
hHoLcPb709Kr8R1/rQZv1vP85eXX1unM94syyEQN2xpQU66wm/P6DuxOZ7we
o45erfqllMle0nyxrmZ385lxbpAc43OmetnRFb+xyrir/8I2jQlPrucolWVa
yE/KWq4fVxUHPJbeZvnI7HKej9pcz6dzSxjWlMGdwjx/mD5vsladaZHfzOSI
SDObQXN/9+m/7q4OaEs8rfery9Pjr6bQOstc6xo5ALFC+//vsdrXtR1cP9N9
UK0PdR6vKhJkZh9n67v2Tzzw/elaZ7rN7p35PrKFe0XCsqeSyui/Ri3/3r/K
WmaNmZnWuMLrf6uVPOiVOQWoYdRZ2cd9xqOZ1nMkqNL0bfdxdVubo4lKIfIT
u1YxccTbnHibxNVZV57N11bnVVuUxGC8LL2+qln9ef6YUG7iiFVgWQ5CkCjP
rlBkQPtsQnOanaLIQyLtrWTf0wg/3um5tm2GItdYUf9Nww4lnZj05KKVA7Xq
enVhdsWtpOe2b3vlqooUdT0SWc1jPS91rPbXGaaqZFMTNb1NU7n73vNdP6fO
JrgHOrjy+jzfs21HD5U8FaNgRcvwwrrFkBz01de2f/Ptl9/CefyKieDgr5Xq
3S5APZlzlfzY1vdsU3nfJq52HGSZZH03gNiijlcdByAPJdX+Y7GM5RZIDsDi
TGmOkYFkVx4e+Jz0T/1pDuNk6nHsm7BSG6zPdbXyZGT0UBmjep+wLapa3Sa7
cjItb/d+i7xDZuNn1vVc17856GVXn/55maOq6lboW92H+F6P6ihOuZgay3zB
9eYKu3kNi+ZtHe+gcjD/jomMao5XZ5h7GTF8p5Vw4PR5kVEZfwmikrn8TMvU
9ZFMi2eSraVZ1VUu3ScH88hrLdONebWlZJmWK4cz1S0VGdzs6kymRVFkOsOl
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
b2OwuWtzsygPBSqESui78VevJc2uWMxSPQ755Z/virh/obprnfIspkH+F2Y7
SyXRRPFOPTFHauJBzUjP2t68W1VZYt2P0m51mcdW/Jfj/lpkWT9Uuu10luL9
vKr+faI3auGM9g7xZsp1f0p347/6vYv+vu8p+liPfpw/EM/1uoo+oB68RDb3
V9Ji2/axMdeGlrQf8exMF2l+zgNyTojkz8XHK/XnX9LNqo28htZpEN3eGU7Q
Ulls44tClj2q8pHna6m+/zBc5LR7e2Kx9YFg8/cff849dW6ywRuJ78LLEHqc
jfhtVY/GJoiQdZxCmYPjoZ7/FtaFbD+R+zTPNI7gAOfiRDznslB93NrFwvOg
Nd94MrIrjI2xNmqeNxFvE006zzmdXdW6eXeG++f5z69wvz6pkWVUgn/Zd6Cv
fu9CVLSIph1M8eMLqLm9OdN6by01sDZct8LSbuxJRb2SlspVLDxUenLxxsH3
wtJWceedYx7v7KzTjiOGzoRUL3yLiNvaPst8K25KGxt3nD4OPFs050kWeaR/
XCGhnwtq67xUx/gEG/Psx5uH8I+srtPdO7MrC9E3lnOhCm5fMc+83Z5CNYh6
Psc2hD+0lkSjg4+NisMJVT2f8NHm2coiwfswK7LqMn/qqU03u5W0lC92J5km
xuA83cy0VnGHjRlvFcHIEWTy8d71yckkN5XBeAjk+xR5bjBUophV2evkvdKD
7q8RzLdl39oIV8xXpk9qjjOZQzUywHczR1G1vK6d5BGns6soJo0rre+mPOax
d4zF21JCN27egEIv63fwsOE2iVVCnlBqdTw3LUBYff/mZDU1fafW9HjzvW6f
n3pd9VqTEpYZmpOnO7JkcYf2Igg59eptLdlt5Og3cfz8pyJqjizcCjW/Eh10
dBG52kbe89pUn3JtxzJzajGuDubInlX/FL54VImkiHRYTlDr3bNRjbWaX792
7tr7YzS+YZ5gMn3LTht5HkMx+2xEma0tzjNkNu9YALIwUNWd5vItl9ZPqVX/
aX3+zcRec5OGhcy83jeOgv2Uep7RP7JeP1ZRu7GpMZ4h+mHs0lkNp+3U1by+
Mzok0aV/7/ul9gYnsnD6ro3PyNJrcnpf1/CIZHt8ITjdzGBptO8VoEfBg70O
LxeLsysa7/oeX/v8yRIo7nC0uo1rvuVF4n9vfZon/kR68V2bg+Mp3qR7nG0d
PRk/2t7ijKKnypHfiRBupY/8TRXPegCPJgq+s9eWGookUf6ay9SjrWwNrlza
97VX5uPXNlJ/TDQ6z0U4m+ijzxhZEmlphNruTBx9Mh7Pzarsx/PnlseSX++0
cp7Twxf9FxW7Fh8f+7fBbTCr7v/xTxJF3xcD1HP/bv69gN89prf9TP7e89br
y5p/+OPn3Z7rexqFq7bMRh6cAL3q73U4FWU6K3nrY+WW1ru8bHsesJGpR7t6
s5VJw8PSx6801oihMwBcf0y52Hy+c2hIS1S0+C4r4blrm8d5uDvkLgeyKzSP
MbJHt67PhvsNktAY1Wh9uR49ax8b5pHviQHq+RFljRODVtNxNILevDpPFTm+
dS5BfgPR47N+0uhxHZv/HdPtM7WR6Q3TdRa90Zw/yDwnzwM8mXpnAEo/DK89
KhMloxJ/DDEA91ZVl0vn1Ofncxq9xr6jZdHPkc+5XrbIXZoeRhWQzIMqukHG
4UY1B0kStH19Pree+vnaxnMVIhGOd4aP9loxMsOOT/vkG/gJ17pnhyIvMHc2
dQ+Hz68nFz2+Hfo7pv6z3GmbFhvl0dE5ehC9F9mVGTct/Jk0ovCKWZfyGwNj
kN6mGaGuMDpqiSmJa/vFf1XquMVw7Tvem+IH+rzxMi+7EhSnSDnT3tVgmQTd
nci5HdrlDbjnHnr2z6IHkit9SvDO2ZP1sjfPSWVGccpPqNZTj6rGMI3omKPH
SSwkK3lbDuAhPsdqjVDf7ueF6PQgw6wdGv53cbN6prQUXs9nTo7FYpSeLOlo
NXPm3vWAidfa+ykG67hDeLTQBUuG8OxYzpnPCLNJfenTS8xvyHlRcIsVXiap
LJNjUhtr7P0D6ef7Ss/h9G7DIxgVnxvdPeqvXFa7tS1SulKcfMTXSGG9pefp
ce9GpMwP9PNk4eOsYP8HvR2OuT5PecV/L+VsDYqWRiyMO7qSm/hrhpV25JrX
5ntAwgOzXoo0E3Z5uprwsPWXibNRVmc+e1V7zbn7F3CbeZBUSa9e1548dna/
idJZtbocG9gdjiLLMekoS/LoFzpcq1rjc+yjCS1No2//92lrD+/47D/PXqP1
wPfHWx8hSMxnyu2u5MzAotBurexq5OfA6fj8ht8foei+iThS4sd2mkR7DYdh
1b3zw5nqwLOz1zqC3Ap/WnrWbQuPK7YP3OUQDMs2dm9H7NaWtD99tWV7rCwi
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
mu5G0GhUt6hZtaW7+t6jVZIhpNnVw++WpzxunNrL62zc+NMGcyuKsj3ik9hv
eTY8Mwht7jg20Lk7i3V8M7n3IPmy/K6Y2a4v1Tymsfs0dq3o/ihX1pxT9HNH
Md7kVs98feZ+yWc9gQqhN8aSo9nu9A5b5iWv+pu3izqVimXVqARLNTK4Psu0
fKLG09p/i2bdmNaq3lJXZl4x5vvxLt+JOd7tjsTeInkdjRvm3O0Zke8b1CIo
7fnN3hPVM+YRxCC3zwahnei9rxmfwWgdH97lMe19DfMum9Nyf5chyg7BNc71
c+XacrwxwdJEb068me/7TPHGlcjvvKo6exYyFFjbjDrixdg+we2J3ksn72VR
oG6ZOejGnLGwzNqJhPw52b2RWb6as23k2crLk0TND5+bogQZRc8dFH88g2B2
xlF5mm+wMVNOpM8KobvMQXpShq/M+yQmj5Xo2/v1CRfJLbLYk2F6higbBN/l
70pbGSZmqBDGJRtl27aT+rn6j/wVimrOpMcxL6br31lfP8I4ldV2q9eXcPlq
Yb5NMGvt+P74oWtNScZGe67P6QNUce3LuTcjtLM+I/K5UnaexcStnXL/M/Qa
39JaVZtl5Kv/+chGPX9+41rL2XimZ3v0MU7OHtzJzDdFFIbmNSc7OdXRguC+
E8kSLE1sevbBqZ7Vj85mf/l8udnHEe3ZQ9ccR+5w5cKiesj6UoupW/QoB5m0
hSUrJBFjigG1bidk8CXPuNytPUOH7s2ZOy+UQ4p6pCKiaGce8s5VqX9bvZ6J
fflnF1ey6JjpTvVNLS2LHpojx7K/np0Vb5HHo+Ri0aUH2AtntpT5HKOhfFD9
XZ55dDw7O7UR0X6y9Z4K8xvHizFV288Sz9R+WlAA57DerZAD1Xi7GoiscI1F
Lpfb0xRe5SVRIMseVA+y8p4rel7uxaN9tPbtVPPoc7ix6vOfvTOezKdO6E71
TTlglt7pnY2gCM5RY5qBrdyVgYtFVQ+KfFyTmc8NKxA+yP/qIePx2kLjWt1a
8guk0+VZmQ95XkypEutL+Js53+pTzbI7jfNXOPmAY4UPDm2kGGi7t2nuVNle
rq3onqwnkh40Eud5gvs2852Tdlrz6HPoSU2fmU8zezoliE444FqYEZ9TyTnw
o9hLa3wu/hxf9UxqIRMnnrX56F2tk55epJHb97lpVPXZya5qCYzasXBzWO1P
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
fx1ynzUQ7JipsDOVnWX4CLCbm/si9e93zQSlb9UpKYKd1fDMH6fqWvAuhmzG
gXi/sijnfkoWm47IBJ7JujHxnOQ9+3W40lRJzb7nkZwjtv2XKODefNjqW9uX
njOdZa6pI+9Z1UzyGZzdCu2l0JisW8nUxf9GV2/Lrpx1D72QpLaWUUuH5r1L
q8S+SJHi5Ez9iRbBWJeP4c3yzKO3tooiplp6Wjb2eFaxiPd7zOcrmDg5KxN+
JuvGRMfu9tEx46pu21mqm8fszqe2tF5aZTUli+9ct94syS029/O5mEZiAPMM
PUqh8TbuUCqzrp5ZFuUtjUIkSp2NUy6OJXnvq5R3OJZ5DluxOhOvem73inpu
avH+eqm1de83VH38yiydj9MxmEl4e1+ko+3NwGWSnT8+3sqokHk0H0uikI5l
D6p2zX6gJbE1sVUfdVTcqahqLfmI47599E78INbn9oxop+XfFIiNOziT8VJo
qZGqXv2vZ/T34/LP3hnSjoP53StPuZUwJEk8MvPUXVycfBT5jHVWbiCpvcKR
S2Rt3fvUxqnU01idjVNURk6XuQ+YW8zw8X2um+7j8U5aqUfzscSvBhxYxZtz
mLaNew6t1IdIjz1+61kS/PEwen9G5HDLI9DU6uDMtY3FaX5LC2YNgYw9zXv6
6HjbI3ubj4KbsYGXH8xaY96Cqnpzrr7EP78/5hf5yew/l55r/9Ijb2PDu6yZ
v0761v0jy7VsQmvKiVhbfn1p8XlUy6skXL/yccD1I0qLUNqiwPMzpvL8a3RS
SySmcN3qWQiSTfTIbfPJ6yiSqP6cjm/hM/1fLWzPi29pnazPbjwpRde+T4KU
gx8U2dW2avouWVocLNGMWXlmTQ63eI4rhc4CQU5U0XuO8Ww8s5TMpno+fX27
FjWfRjvS293Q5T7MpdrLQo/np/R9S8GFGYd8TPCjktZnopkJEZ28xdD2IpNO
vVrxQTQz+cGd8uczuRkyz1NixzoCXbSOI6KDC1le0Vszi+G77CA9LQ/iFK3p
oDtUoLetGxpvEtwMZWHb+W/KOXJt9M5WuFsv37PU/5hPpRzxUdUzPR8GaGlG
vpF+XSNtanooD8ASOUEj8VVN6dfzeCdox4WHgtMMvu/t0LVGgUfUsvw40zYZ
4WiJ+/xZP7h8Dn5lnK1X96B0kgxwps8R8Omjiq/rqOwU9h3I6PTYejzxWqz9
ZbzZSMfhNLdz7m0TZqiV7TMof3anDqXamE9tx57OCfjTxGniObUH7iIJlwiR
P5cqOc28tMtTmxHXjRjO+/sz5OhKThTUfF2r58eTDt3cIUPiXi4epcQPPj/7
33a7t3jnkHwWP/5XLVgew3fVri0k6+HxZVi/3I1mVkB7ZDadR1saj5JMreeL
IctJWWgPEbOHebtAWJqDodmzWuvps8NsLL/74UfXedTMaeI55z9bWRJDyhGV
+35e+zvPpXh/FjU36OpyNFCNolbx3qiM6NwhRGJpRxsf0idrqb452tdt70GM
kka0e/p8epHlj7rfPsoSCjvsLfUhbjBw3u5epbhOTt6SdbIsoJPObFfYv7Gl
CjuNYr/yjbPS76009d2M6n5sFqEyj5d24cZv2+rdGw/Uyxi/igbSMmp/Vwx3
+id7JD8mOByd59Dt+99oyYuHXrToV9VlDRNHDqJrabF1+NF5oqE5/SOdx6zX
ql+CH4kklycFjew0lYYD+utU+lZI4BuJLbAswPWd4jOsBc1vz4zzfCORvh8F
ctTlo0msPYH9o/xQJjPTVzM2Hg4kwbCF+OwJS6We6muZ8fKn5UfiD+wM05aj
eW+KSAajjX2/UH8X84S3dW1+NNTSam2oz8C0/I/cG6bvyv4s7oZn5oxiO/qW
Xd2zrGn+BGVIP/9ujbffSX6nzOMaIUd7IyWzBYqUZO0c/59PW1xwxnm+kUjP
jwI56v5q+aFHd7EP8u0gCPXdqTJg3R5qrdjEoHOR/ISlUlsj8Yy2ezGc4k/d
fvSuRGTDs50lODRgtYr3obd1beuVKH7XN4Lufas+LL5z/FG0fGRINTfgcZtd
6XqQr1smyWSfwebTNL15NQ9JhQPKsvV+6jts7a5H7ywkn93zDSbXsd9RT3Aw
m8S+NErtpe2g4zx/Y524flbT2ejzhKVSX/dloSl9fG97hHv7uc9RvMM27CBD
jwKd76no4WRlOhIlK3Hv/J9GMukZwXm8rhRh3LazC4lTP5+frr2eNSuzHrTU
CrkzOtAN77CQug69x3vqvPAk8vS8kEine73Zb43zJo5CBZ317a/T+DTLcnMf
PuVifwKg7E3MX3y+yOFHK5Vgr7rNEE77OtEz0X53QkHnItZW9/lvbqUWNjRi
CPMYiqHcggEmCTQdJYr20/9F9WTmwJGm9W0CrPOtHdazfbY+/a7u7fn2Tivb
ak/mhQTthX1b2ZXvvduaymShZO1q9RwvPj7OZyA0jnuollB1LVbkLZVcm72S
Qs6U17HnASQj9veytgKzMis6hyGON215I3rusoZCW/EORscEgoN4BmTpbhR8
zqdQP6l8KN5EX/tOMcUW9eZctK76zv1TVNay2/ozw7HWM0XNSnsV0+5ulZte
3n3Fc/aNMCHYgZ+UJYl0dMzWIzlKJPbv0cm8ysUnB3WnsezsMItS1MJoT+Vr
RNYvnz6SXcgWm5ilZ/OMY8z7Uc92vqvO0ERxup2BeM/DImBO6kQ/nhvMaMZ9
qOnR7Pj7SkAwRxNVHZrOOlNU1uvaxU0Hxz7f8pgGuGc7lndVq9b7nXlexJtX
0bI5njFhJ0uGN76EXtb1/RyGqvfuGcHeq85FbIJPPs3L6PDeDUeL82sus6v1
LsTXW4JfyTyPN8YNn5aHvzexrF11sGvWYxNUcuNAZhFAIlFu4PUlvtxaZXRu
4WB5TvPRm58XRkiVazOMCa9v5O/ee9yZs6PY+C5vc9Zw4c5cm3tPTN+bK58O
Zq0Mb4jvvEur0qMmjI1rY++KD/n+NqHPRov4E2XA+1h7pUI9JbJCsPdxvd8Z
t+81zIh+h9udjWpt7u2jBMs7O8mofmls9hDVwraKI+QJlCNS72MRQdhELBNq
MZqHfewh/Wr9KNSaqT8pQMQIzrs3n00NxLer3AyI7sP2Usq8cG5NI/LW2vk4
j04mMS8+OPl01aJjThZlqAx71Jv5SGJti1mzjrdWCE7/qQ8bsy57vbS+8vP8
dlMYiTw8xRbUWwKw7sTCHLSY+nt+zLFccTjaN68SmWfQLCLkNkGfdLbS9515
3Nq9Rqrc1ub57u+SHa4vF6aT1J88yRKaaY5wEr2JDWirdWbYae/5PpWi4Cw6
O6nWkObTxXtpO1NFa7DsYe9F7Wvs2dWMhkhxwlN8K2T5K+Xs8Z7txOB5oYp/
qsKm/Dzx4brlHF772nXygVl/uR9zLFccZvZNUMrjomrNbYLisNKX3PUsz4K6
2d2TrJa/VPPBWZ6fQ/iekPqTJ1mv/xzf9lJybOnzuUereVzGr+VRGPUdVDtg
l8udDecvqmitb2md6OnboZp3q0NdxUryAI+fREIqluywPPOAukV5fJbds4jo
RIJiJUf8eJCdnw1H1tHN2eOFsuvHDNY9jRMRzeUgnaWOhF52peK7x0WGedQK
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
zqQ0c0/4fPr/APlNJko=
          "], $CellContext`i$$, $CellContext`j, $CellContext`k, 
          1], {$CellContext`j, 1, 
          Length[
           Part[CompressedData["
1:eJzNvW2WHLnOpKmUVAuZ/72aWUJvYNY5u5q3JKUy3B2APWZg1LTOubfC6SQI
4sMAgozI/+t//z//9//++e3bt//3f/7373//18e3b9+/5f8+/rl+/vjx8ePW
43+eP75fe768/X6h8PNK9ePjz9jvz9k6iv9S+Xrzys3X53/p/p79PvLz/3+/
ee33q/XnleKTky8KV/qvK/q7soL/vyt9zPKk+Rx1+fTz76eP54hq9j9r/udz
xJ///+eVn7//vdH8V+Z/ef9+X8Envf/R9sM++n9fK/ia+6Gxl+duRReuftvo
xyv9Xg9//v+Fj0IvH790+ePXp4ctP7zhr9x+29SrRT36fsrzJoeC248rr3+t
rBl5mbW0jguXnz1/1v4iePv5OsMrvSv/PeXflvV71Kesi17fL08tZ7/11fL6
8K5XWX5JYuL/t43N9lit+FODxbuPej3/0/eBb9eeV6SbfO+JVa80egz560Wf
M/14QZ5P1PvxOsOnfH5r9u/4H1/Y+AdzXih3PvLktFvFo+/3Cklfx98keYs9
1/d/+fuNL/98YucVn/61vf95e8FJ/a/C9L8tHz2lT0sSMnu1oKf1396+rrOY
7yXCdvH+9fOrZf0bHT5pf83yB8++v1Auc4FPGrfnr7j8JcMSPWoOKcKp3q9+
cp2F0H+h8Wrfl/hOLP/qjX8w6lUDP559X5/6nOTFV79/fq4k/rfHLSJ88fES
HwvJ3Cnf6V9xpl1NZQtNj2qe14y046mf/TrH6//fUW7i4uJHDw5e/YX8e9jW
Lc49MpN/Kq6vuv1c2WBVrZ6usfzS4+Pa82/71RuqHL3x+5o/rrNn/1fUedXW
fZfQ8lf42ZdkKr4+Z5qwS8SIIY58u+3S2tW+tv6NcX9s5eOeqbxmJDe+a420
O6OHXb346X309XnWZLkzvVj1La9p4vSFjysW/vPqMy87lDILfeB86Z1fqF7N
KyJ8nVlfbE+h673lKxPu92pqX1/Z0EXeg793GN/1//25tOUSU+84N+25Hhzd
4qeOxM85BJY8/PrLEko/KWyqRu0vbXztTi6jCguqOOz79P/ueNRRUnK8jSsx
8Ne+r0HHKV5cs6vfue4XxSeNCT1e5XvlpZP4t2vd7JJzPVZY63fI9l7fPxFt
4qyrzV3pVn5wfW7i8z3DBdnVjf+f/buSo8r72p3JTQ9PhBp8+fe++qb9wnPv
PKg1PHsOmc0tL/uqcdXWW0XQvk+R2RZ57Fcs6aLsi7V9v0eeKssqJFBb5sUq
myxljBH1+Is0PlQs/PY3OlVV3xu10v6rnhOdeaVV/qCyugefdZ2oHE/w5i7T
L2p1LlbhY7G7edD8fF8jzPWfsv9nFlfQGDKtJr8f7ak/Qakx+FnTnjPGao5H
7fSZGw52qSN6VY15RfVXWlOF79n2WMmPPlo8cUZLrbbm8lPLt5J21Wf6d8uE
C/Sf+XnQq2TVZjQV/a9a1DOj6TObUguPynXPyyDxZpc571NFzJf9LhlhHXsf
OflXvv7g9e6TKHe/1DZuHjpJ8IGWTaWvz0Ou44rT1hrlh1X94bqIFI9dZ6uH
jr+657wD+hvjy1180V9+njPb4bzsx7cmylbns893RY14sP25ljJV2uvs6sLT
UMXqUOvFCprdH4r91xy6jO2NH7Syopr88o7aM//sKxTitZL/XTt+5kxXDb7s
f5rqa4Hxt95sv1Tbv15XT6PmTo0ZKqaPOPM6g7J85vffrjvtV730I350Wp5r
UFV29bBKvavpVjXn4SOmqL3o6362XvuQ/dwtpI1P9J+et86di34PaSj/vlK8
16SvY/vKUBntX7OEbifWeter/04Vm5of5beqX1+L6nFlqi7NVlOdYjQVrCm7
uucZArloJlCgb6OHdk/zOHO5nQ621u0gvh5R3U3oNT35vc6unlG72JMUleE7
irXeArOresfS1lJ6f7xUzdqo+mPC+1FbN4p9dgVifxvpv/aQ3dtKkxrxn3b9
uq9AuqkqQ7fbqp2tTnX9Ort6afvoEe1Oq+AQjFHVmol+P0c9zyXOfNz9+Urt
MY/5ufK8ey++v55rTO5eo7HRF77udkSj3J32nHO3yMbkqzMtUNEC8WmqD4z5
2IxOD1qP7KrObvr9dYN9j/iqbLJEEehn9x60CvmFatd9YdkXZ1dFlG81eK9E
dV6VZ1cv/Yf7bHM21tor2Yk+axXD3mXyzceJn7Uv/lvF+lrVXOdv/J5kVx1n
10pxPe5ZAa45UDj59fkWXZEGexSjyCSeHnjMsqunDqddjapjPKsS9z79Gh/z
/tJXXYF+0hp94DJ6QiVZ37vov+L4yQ2zAjpmztUUBW1rZBfftV1yDyvTGuIS
8I77Wd9tlnJP6u06u8yttsw5yj34G7OreT84UbvvafJMy6uejbkCwFzoB8N+
qcfvjvqlVedqRW5ztUGO6feWfl9R64flgl89nrWZIv/pdzC3vpvsaub2PkPN
T9Ni2WuFQ6TC18X9EinHmgmzc70T7bmk2dVvzLjgfvv9sG+P3fiV42qmnocv
Pvq7Ar0Mixg97o2VVw4z3XDf3B02GNH07vPQ0hZuUfdWtfv87x+LKHTa12tJ
TeO1Gqaq+c962xcteVrZc1nj6C3DVZZTP/X/dHZ1z4qd07Q73cc8INP6spZB
j98n7+jfPDOt3zP9oTlE4pJCgxVTNXdqrT+rPKHH8jZDOpJpudWzPlfYZVdX
n35mOu2sXUZYyHPmaL41xvx3lvsUr78w/pk71buF1x7fvjV7ywKz25UcyK5e
3snsSteaqxbbXss6350So1Fz+GwddiAfVzt/fAL5N4lYnZde7KCKxrfs6vWU
nWisyYLRXQGWaXUt1Ct/oUs5E7H45ywXi5o4uO+Mr3oRp2Wa/pfG/sbBNpui
sn71V36fq6CP66xTrqojT0FvmWmB7MrexT/mGOyCzKr6Xp8fd9R72b3e3qo8
H+UprTY6O6rixofSqaqw6d35yGucaZ3Jriq5xdnVo45UxaH7eMbnxFF2zqYt
Wp1vtdnzV3bVfY8S7JseVAUSqeyq9LNldjVpqMsLa+77zzfLaXbgdUtnVy+f
oS9W0aO+g6px+HP0k14l/eud55f2x7npa3tlYb9H/5UriZMXy5pG3alfe5Tr
N+PMELOj7OprtI4SLU91XJpl9PTcx/6h5mCOioXlNFXMVirtdw7SiDB60Rjr
KFL3KKzG95HkgTIyKgs5NpmnQqFbbjKdAjX++2oLTY0VrM2R4LVdo7Hhs8Dy
pneLTOtMdvWIZ3529ecTqMpUtFp6Q/X6YS9lTkRQ7jF/cefidY3dqGsu8sTN
v3zDW4gKUdzsaqoJTlVE78ZQRafqJ23p7wnha5bhSqlFOFQ30jGV599VTvLs
9Tp79VTdq3ilXkXWPk+dfcGtCk9tac+rLuvoVdiExPnpG/2OJutfaJwt/yrf
q5Sds9iO71cLecXKLP7UtBWdXofTXCTToruYrgfLri69HreeiDW7a2lRqF05
mgHU291My6kPdn72jFKb/N2NLdMoZ51u7x3dLhpPNJ/PXdR5jLrYy5wTleOF
FdcnzXKUqN/9xVHrG099DhFlV48VEnv0su9rfxojOh7nb1Z1dPt1eR7yGDHW
rlRsrSzxFQ8rO52s6hoJ7m97mXXZ5l+cWVSF+14XSQ11zpl+/ftyz72C2hEX
d9xBFbRrS3rcsqvyNn3JTasLVQ3v1vjr7zYobstoWHBnx0SaafVW2/F8ez9k
V3MvPiP9BZI5u7r/NYAJnTqOJsyveCeZ1helV0+e9ucFX+MJy8aSSGzx1slm
472dM9anLMFpNsw7LzNO9nqpntXncmx8/U9XPZ7WK88Xozu5Be8iqyrj7TO7
kruoKprdueljYTuivd1yy67G7/iQDIYgdLPex2/8TuhFrG708yby/fkvPLVu
NIv84Zq3G+eDKHKqLLWmfW2to85816SRa7mDqvmYMy2dmQgMau45aFoPHyrO
nr90+u+n5huRQ12q08mdRtVbRyM1V2Mzprz79wUG4wrvNGP/q8F/Ps/ZFT0T
ZJFxxPxpZP1++lfiY/339coaFrkbGeTvoFLYjj2YXSmOZk7N757DTAtGhkue
xebhnn19nvF6ymqm/l7M6XKeev4H/Wv17xkxhD3SrPmVSyr7Krt68j3P27UR
CdcIoTGI+Vnfo/lNhYcUouyKodCFxvMbk/deej+fY1OjT5H1dxbe0Xz+RaA5
d9To7ET+C0IU2KloTXuXirdvzbcepjW1qxe/efLgyNa4wmMyph/3512EwbMN
zN+KINRwHtR5V/l75EFUflTTL9x+4sDPK/X7HH605DgfZFqLrCjNrmZPoRhp
fOMkzbQMqc1V341nzxg/201vX7VFzv5V9e3pavozEhD+kA0izKj29Juzqk6H
PTfXPv3f5rzizJMmy7T6v1v1ragm3WehGTLx+r6a0lc8aonzmOR4Z09v2rHf
6bzIvPvF2DHTUjXUvveTx7+f4G9p8Ryw+jzMMtZW+/Vk2mJ4rimW1Mabu492
WBm+PykbcND7abPOWV7vXfd4QzWgdHCzgPZkO4mW9NvqbjZD/Pd8lsZ3kDq7
0r+Px3WaZFpF3C1aBjQSHkGzOpnd2dnVzMlVCxVdvUO7rEfmcYo/H1Of/kdu
pwicdVB2yMDufzt3pM/qrdc35bdvK8+6vuvo6jOOdnyT0XUZso4hZN60pjFZ
c23zj5lH3Gpn1ShPEe9xLuWc1c1Rb7Q4OIvac6XaohKqnkQ9QO8Zu+qewrg2
xyyzfZy7vLbMd0aeY+cMOal58BrmYyTMCLtoWdVza47u9F0kOfZZ7qmT/cRz
fP+LA9Tjj2daIybWbY5HVFLWvnEdmWVXd//qY8WTs94irjS72Xz+IkwtckV9
O+Vdmdbf1nskLu/Jk9sb9Zv6Vp7+LY8iu6oz0de/ugN1V83peXAfDcqYhOsi
2srIeUi3K2k8d/RmD1WvvyB7P22rZ+PywHXlx90CXtFacBdZVJW70ihVve3a
CMZpvYdVIutGLpV4ml2pGNrZHMsI++zq5bdkZE35tbX7FmKSg3if593qkwea
aT2zK1rjdnE6p3FHW+JpKvZXz55vPO2so4vxp48VMLtyMpTtPugV43W2sfve
hHoLcPb709Kr8R1/rQZv1vP85eXX1unM94syyEQN2xpQU66wm/P6DuxOZ7we
o45erfqllMle0nyxrmZ385lxbpAc43OmetnRFb+xyrir/8I2jQlPrucolWVa
yE/KWq4fVxUHPJbeZvnI7HKej9pcz6dzSxjWlMGdwjx/mD5vsladaZHfzOSI
SDObQXN/9+m/7q4OaEs8rfery9Pjr6bQOstc6xo5ALFC+//vsdrXtR1cP9N9
UK0PdR6vKhJkZh9n67v2Tzzw/elaZ7rN7p35PrKFe0XCsqeSyui/Ri3/3r/K
WmaNmZnWuMLrf6uVPOiVOQWoYdRZ2cd9xqOZ1nMkqNL0bfdxdVubo4lKIfIT
u1YxccTbnHibxNVZV57N11bnVVuUxGC8LL2+qln9ef6YUG7iiFVgWQ5CkCjP
rlBkQPtsQnOanaLIQyLtrWTf0wg/3um5tm2GItdYUf9Nww4lnZj05KKVA7Xq
enVhdsWtpOe2b3vlqooUdT0SWc1jPS91rPbXGaaqZFMTNb1NU7n73vNdP6fO
JrgHOrjy+jzfs21HD5U8FaNgRcvwwrrFkBz01de2f/Ptl9/CefyKieDgr5Xq
3S5APZlzlfzY1vdsU3nfJq52HGSZZH03gNiijlcdByAPJdX+Y7GM5RZIDsDi
TGmOkYFkVx4e+Jz0T/1pDuNk6nHsm7BSG6zPdbXyZGT0UBmjep+wLapa3Sa7
cjItb/d+i7xDZuNn1vVc17856GVXn/55maOq6lboW92H+F6P6ihOuZgay3zB
9eYKu3kNi+ZtHe+gcjD/jomMao5XZ5h7GTF8p5Vw4PR5kVEZfwmikrn8TMvU
9ZFMi2eSraVZ1VUu3ScH88hrLdONebWlZJmWK4cz1S0VGdzs6kymRVFkOsOl
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
b2OwuWtzsygPBSqESui78VevJc2uWMxSPQ755Z/virh/obprnfIspkH+F2Y7
SyXRRPFOPTFHauJBzUjP2t68W1VZYt2P0m51mcdW/Jfj/lpkWT9Uuu10luL9
vKr+faI3auGM9g7xZsp1f0p347/6vYv+vu8p+liPfpw/EM/1uoo+oB68RDb3
V9Ji2/axMdeGlrQf8exMF2l+zgNyTojkz8XHK/XnX9LNqo28htZpEN3eGU7Q
Ulls44tClj2q8pHna6m+/zBc5LR7e2Kx9YFg8/cff849dW6ywRuJ78LLEHqc
jfhtVY/GJoiQdZxCmYPjoZ7/FtaFbD+R+zTPNI7gAOfiRDznslB93NrFwvOg
Nd94MrIrjI2xNmqeNxFvE006zzmdXdW6eXeG++f5z69wvz6pkWVUgn/Zd6Cv
fu9CVLSIph1M8eMLqLm9OdN6by01sDZct8LSbuxJRb2SlspVLDxUenLxxsH3
wtJWceedYx7v7KzTjiOGzoRUL3yLiNvaPst8K25KGxt3nD4OPFs050kWeaR/
XCGhnwtq67xUx/gEG/Psx5uH8I+srtPdO7MrC9E3lnOhCm5fMc+83Z5CNYh6
Psc2hD+0lkSjg4+NisMJVT2f8NHm2coiwfswK7LqMn/qqU03u5W0lC92J5km
xuA83cy0VnGHjRlvFcHIEWTy8d71yckkN5XBeAjk+xR5bjBUophV2evkvdKD
7q8RzLdl39oIV8xXpk9qjjOZQzUywHczR1G1vK6d5BGns6soJo0rre+mPOax
d4zF21JCN27egEIv63fwsOE2iVVCnlBqdTw3LUBYff/mZDU1fafW9HjzvW6f
n3pd9VqTEpYZmpOnO7JkcYf2Igg59eptLdlt5Og3cfz8pyJqjizcCjW/Eh10
dBG52kbe89pUn3JtxzJzajGuDubInlX/FL54VImkiHRYTlDr3bNRjbWaX792
7tr7YzS+YZ5gMn3LTht5HkMx+2xEma0tzjNkNu9YALIwUNWd5vItl9ZPqVX/
aX3+zcRec5OGhcy83jeOgv2Uep7RP7JeP1ZRu7GpMZ4h+mHs0lkNp+3U1by+
Mzok0aV/7/ul9gYnsnD6ro3PyNJrcnpf1/CIZHt8ITjdzGBptO8VoEfBg70O
LxeLsysa7/oeX/v8yRIo7nC0uo1rvuVF4n9vfZon/kR68V2bg+Mp3qR7nG0d
PRk/2t7ijKKnypHfiRBupY/8TRXPegCPJgq+s9eWGookUf6ay9SjrWwNrlza
97VX5uPXNlJ/TDQ6z0U4m+ijzxhZEmlphNruTBx9Mh7Pzarsx/PnlseSX++0
cp7Twxf9FxW7Fh8f+7fBbTCr7v/xTxJF3xcD1HP/bv69gN89prf9TP7e89br
y5p/+OPn3Z7rexqFq7bMRh6cAL3q73U4FWU6K3nrY+WW1ru8bHsesJGpR7t6
s5VJw8PSx6801oihMwBcf0y52Hy+c2hIS1S0+C4r4blrm8d5uDvkLgeyKzSP
MbJHt67PhvsNktAY1Wh9uR49ax8b5pHviQHq+RFljRODVtNxNILevDpPFTm+
dS5BfgPR47N+0uhxHZv/HdPtM7WR6Q3TdRa90Zw/yDwnzwM8mXpnAEo/DK89
KhMloxJ/DDEA91ZVl0vn1Ofncxq9xr6jZdHPkc+5XrbIXZoeRhWQzIMqukHG
4UY1B0kStH19Pree+vnaxnMVIhGOd4aP9loxMsOOT/vkG/gJ17pnhyIvMHc2
dQ+Hz68nFz2+Hfo7pv6z3GmbFhvl0dE5ehC9F9mVGTct/Jk0ovCKWZfyGwNj
kN6mGaGuMDpqiSmJa/vFf1XquMVw7Tvem+IH+rzxMi+7EhSnSDnT3tVgmQTd
nci5HdrlDbjnHnr2z6IHkit9SvDO2ZP1sjfPSWVGccpPqNZTj6rGMI3omKPH
SSwkK3lbDuAhPsdqjVDf7ueF6PQgw6wdGv53cbN6prQUXs9nTo7FYpSeLOlo
NXPm3vWAidfa+ykG67hDeLTQBUuG8OxYzpnPCLNJfenTS8xvyHlRcIsVXiap
LJNjUhtr7P0D6ef7Ss/h9G7DIxgVnxvdPeqvXFa7tS1SulKcfMTXSGG9pefp
ce9GpMwP9PNk4eOsYP8HvR2OuT5PecV/L+VsDYqWRiyMO7qSm/hrhpV25JrX
5ntAwgOzXoo0E3Z5uprwsPWXibNRVmc+e1V7zbn7F3CbeZBUSa9e1548dna/
idJZtbocG9gdjiLLMekoS/LoFzpcq1rjc+yjCS1No2//92lrD+/47D/PXqP1
wPfHWx8hSMxnyu2u5MzAotBurexq5OfA6fj8ht8foei+iThS4sd2mkR7DYdh
1b3zw5nqwLOz1zqC3Ap/WnrWbQuPK7YP3OUQDMs2dm9H7NaWtD99tWV7rCwi
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
mu5G0GhUt6hZtaW7+t6jVZIhpNnVw++WpzxunNrL62zc+NMGcyuKsj3ik9hv
eTY8Mwht7jg20Lk7i3V8M7n3IPmy/K6Y2a4v1Tymsfs0dq3o/ihX1pxT9HNH
Md7kVs98feZ+yWc9gQqhN8aSo9nu9A5b5iWv+pu3izqVimXVqARLNTK4Psu0
fKLG09p/i2bdmNaq3lJXZl4x5vvxLt+JOd7tjsTeInkdjRvm3O0Zke8b1CIo
7fnN3hPVM+YRxCC3zwahnei9rxmfwWgdH97lMe19DfMum9Nyf5chyg7BNc71
c+XacrwxwdJEb068me/7TPHGlcjvvKo6exYyFFjbjDrixdg+we2J3ksn72VR
oG6ZOejGnLGwzNqJhPw52b2RWb6as23k2crLk0TND5+bogQZRc8dFH88g2B2
xlF5mm+wMVNOpM8KobvMQXpShq/M+yQmj5Xo2/v1CRfJLbLYk2F6higbBN/l
70pbGSZmqBDGJRtl27aT+rn6j/wVimrOpMcxL6br31lfP8I4ldV2q9eXcPlq
Yb5NMGvt+P74oWtNScZGe67P6QNUce3LuTcjtLM+I/K5UnaexcStnXL/M/Qa
39JaVZtl5Kv/+chGPX9+41rL2XimZ3v0MU7OHtzJzDdFFIbmNSc7OdXRguC+
E8kSLE1sevbBqZ7Vj85mf/l8udnHEe3ZQ9ccR+5w5cKiesj6UoupW/QoB5m0
hSUrJBFjigG1bidk8CXPuNytPUOH7s2ZOy+UQ4p6pCKiaGce8s5VqX9bvZ6J
fflnF1ey6JjpTvVNLS2LHpojx7K/np0Vb5HHo+Ri0aUH2AtntpT5HKOhfFD9
XZ55dDw7O7UR0X6y9Z4K8xvHizFV288Sz9R+WlAA57DerZAD1Xi7GoiscI1F
Lpfb0xRe5SVRIMseVA+y8p4rel7uxaN9tPbtVPPoc7ix6vOfvTOezKdO6E71
TTlglt7pnY2gCM5RY5qBrdyVgYtFVQ+KfFyTmc8NKxA+yP/qIePx2kLjWt1a
8guk0+VZmQ95XkypEutL+Js53+pTzbI7jfNXOPmAY4UPDm2kGGi7t2nuVNle
rq3onqwnkh40Eud5gvs2852Tdlrz6HPoSU2fmU8zezoliE444FqYEZ9TyTnw
o9hLa3wu/hxf9UxqIRMnnrX56F2tk55epJHb97lpVPXZya5qCYzasXBzWO1P
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
fx1ynzUQ7JipsDOVnWX4CLCbm/si9e93zQSlb9UpKYKd1fDMH6fqWvAuhmzG
gXi/sijnfkoWm47IBJ7JujHxnOQ9+3W40lRJzb7nkZwjtv2XKODefNjqW9uX
njOdZa6pI+9Z1UzyGZzdCu2l0JisW8nUxf9GV2/Lrpx1D72QpLaWUUuH5r1L
q8S+SJHi5Ez9iRbBWJeP4c3yzKO3tooiplp6Wjb2eFaxiPd7zOcrmDg5KxN+
JuvGRMfu9tEx46pu21mqm8fszqe2tF5aZTUli+9ct94syS029/O5mEZiAPMM
PUqh8TbuUCqzrp5ZFuUtjUIkSp2NUy6OJXnvq5R3OJZ5DluxOhOvem73inpu
avH+eqm1de83VH38yiydj9MxmEl4e1+ko+3NwGWSnT8+3sqokHk0H0uikI5l
D6p2zX6gJbE1sVUfdVTcqahqLfmI47599E78INbn9oxop+XfFIiNOziT8VJo
qZGqXv2vZ/T34/LP3hnSjoP53StPuZUwJEk8MvPUXVycfBT5jHVWbiCpvcKR
S2Rt3fvUxqnU01idjVNURk6XuQ+YW8zw8X2um+7j8U5aqUfzscSvBhxYxZtz
mLaNew6t1IdIjz1+61kS/PEwen9G5HDLI9DU6uDMtY3FaX5LC2YNgYw9zXv6
6HjbI3ubj4KbsYGXH8xaY96Cqnpzrr7EP78/5hf5yew/l55r/9Ijb2PDu6yZ
v0761v0jy7VsQmvKiVhbfn1p8XlUy6skXL/yccD1I0qLUNqiwPMzpvL8a3RS
SySmcN3qWQiSTfTIbfPJ6yiSqP6cjm/hM/1fLWzPi29pnazPbjwpRde+T4KU
gx8U2dW2avouWVocLNGMWXlmTQ63eI4rhc4CQU5U0XuO8Ww8s5TMpno+fX27
FjWfRjvS293Q5T7MpdrLQo/np/R9S8GFGYd8TPCjktZnopkJEZ28xdD2IpNO
vVrxQTQz+cGd8uczuRkyz1NixzoCXbSOI6KDC1le0Vszi+G77CA9LQ/iFK3p
oDtUoLetGxpvEtwMZWHb+W/KOXJt9M5WuFsv37PU/5hPpRzxUdUzPR8GaGlG
vpF+XSNtanooD8ASOUEj8VVN6dfzeCdox4WHgtMMvu/t0LVGgUfUsvw40zYZ
4WiJ+/xZP7h8Dn5lnK1X96B0kgxwps8R8Omjiq/rqOwU9h3I6PTYejzxWqz9
ZbzZSMfhNLdz7m0TZqiV7TMof3anDqXamE9tx57OCfjTxGniObUH7iIJlwiR
P5cqOc28tMtTmxHXjRjO+/sz5OhKThTUfF2r58eTDt3cIUPiXi4epcQPPj/7
33a7t3jnkHwWP/5XLVgew3fVri0k6+HxZVi/3I1mVkB7ZDadR1saj5JMreeL
IctJWWgPEbOHebtAWJqDodmzWuvps8NsLL/74UfXedTMaeI55z9bWRJDyhGV
+35e+zvPpXh/FjU36OpyNFCNolbx3qiM6NwhRGJpRxsf0idrqb452tdt70GM
kka0e/p8epHlj7rfPsoSCjvsLfUhbjBw3u5epbhOTt6SdbIsoJPObFfYv7Gl
CjuNYr/yjbPS76009d2M6n5sFqEyj5d24cZv2+rdGw/Uyxi/igbSMmp/Vwx3
+id7JD8mOByd59Dt+99oyYuHXrToV9VlDRNHDqJrabF1+NF5oqE5/SOdx6zX
ql+CH4kklycFjew0lYYD+utU+lZI4BuJLbAswPWd4jOsBc1vz4zzfCORvh8F
ctTlo0msPYH9o/xQJjPTVzM2Hg4kwbCF+OwJS6We6muZ8fKn5UfiD+wM05aj
eW+KSAajjX2/UH8X84S3dW1+NNTSam2oz8C0/I/cG6bvyv4s7oZn5oxiO/qW
Xd2zrGn+BGVIP/9ujbffSX6nzOMaIUd7IyWzBYqUZO0c/59PW1xwxnm+kUjP
jwI56v5q+aFHd7EP8u0gCPXdqTJg3R5qrdjEoHOR/ISlUlsj8Yy2ezGc4k/d
fvSuRGTDs50lODRgtYr3obd1beuVKH7XN4Lufas+LL5z/FG0fGRINTfgcZtd
6XqQr1smyWSfwebTNL15NQ9JhQPKsvV+6jts7a5H7ywkn93zDSbXsd9RT3Aw
m8S+NErtpe2g4zx/Y524flbT2ejzhKVSX/dloSl9fG97hHv7uc9RvMM27CBD
jwKd76no4WRlOhIlK3Hv/J9GMukZwXm8rhRh3LazC4lTP5+frr2eNSuzHrTU
CrkzOtAN77CQug69x3vqvPAk8vS8kEine73Zb43zJo5CBZ317a/T+DTLcnMf
PuVifwKg7E3MX3y+yOFHK5Vgr7rNEE77OtEz0X53QkHnItZW9/lvbqUWNjRi
CPMYiqHcggEmCTQdJYr20/9F9WTmwJGm9W0CrPOtHdazfbY+/a7u7fn2Tivb
ak/mhQTthX1b2ZXvvduaymShZO1q9RwvPj7OZyA0jnuollB1LVbkLZVcm72S
Qs6U17HnASQj9veytgKzMis6hyGON215I3rusoZCW/EORscEgoN4BmTpbhR8
zqdQP6l8KN5EX/tOMcUW9eZctK76zv1TVNay2/ozw7HWM0XNSnsV0+5ulZte
3n3Fc/aNMCHYgZ+UJYl0dMzWIzlKJPbv0cm8ysUnB3WnsezsMItS1MJoT+Vr
RNYvnz6SXcgWm5ilZ/OMY8z7Uc92vqvO0ERxup2BeM/DImBO6kQ/nhvMaMZ9
qOnR7Pj7SkAwRxNVHZrOOlNU1uvaxU0Hxz7f8pgGuGc7lndVq9b7nXlexJtX
0bI5njFhJ0uGN76EXtb1/RyGqvfuGcHeq85FbIJPPs3L6PDeDUeL82sus6v1
LsTXW4JfyTyPN8YNn5aHvzexrF11sGvWYxNUcuNAZhFAIlFu4PUlvtxaZXRu
4WB5TvPRm58XRkiVazOMCa9v5O/ee9yZs6PY+C5vc9Zw4c5cm3tPTN+bK58O
Zq0Mb4jvvEur0qMmjI1rY++KD/n+NqHPRov4E2XA+1h7pUI9JbJCsPdxvd8Z
t+81zIh+h9udjWpt7u2jBMs7O8mofmls9hDVwraKI+QJlCNS72MRQdhELBNq
MZqHfewh/Wr9KNSaqT8pQMQIzrs3n00NxLer3AyI7sP2Usq8cG5NI/LW2vk4
j04mMS8+OPl01aJjThZlqAx71Jv5SGJti1mzjrdWCE7/qQ8bsy57vbS+8vP8
dlMYiTw8xRbUWwKw7sTCHLSY+nt+zLFccTjaN68SmWfQLCLkNkGfdLbS9515
3Nq9Rqrc1ub57u+SHa4vF6aT1J88yRKaaY5wEr2JDWirdWbYae/5PpWi4Cw6
O6nWkObTxXtpO1NFa7DsYe9F7Wvs2dWMhkhxwlN8K2T5K+Xs8Z7txOB5oYp/
qsKm/Dzx4brlHF772nXygVl/uR9zLFccZvZNUMrjomrNbYLisNKX3PUsz4K6
2d2TrJa/VPPBWZ6fQ/iekPqTJ1mv/xzf9lJybOnzuUereVzGr+VRGPUdVDtg
l8udDecvqmitb2md6OnboZp3q0NdxUryAI+fREIqluywPPOAukV5fJbds4jo
RIJiJUf8eJCdnw1H1tHN2eOFsuvHDNY9jRMRzeUgnaWOhF52peK7x0WGedQK
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
zqQ0c0/4fPr/APlNJko=
            "], 1]]}, {$CellContext`k, 1, 
          Length[
           Part[CompressedData["
1:eJzNvW2WHLnOpKmUVAuZ/72aWUJvYNY5u5q3JKUy3B2APWZg1LTOubfC6SQI
4sMAgozI/+t//z//9//++e3bt//3f/7373//18e3b9+/5f8+/rl+/vjx8ePW
43+eP75fe768/X6h8PNK9ePjz9jvz9k6iv9S+Xrzys3X53/p/p79PvLz/3+/
ee33q/XnleKTky8KV/qvK/q7soL/vyt9zPKk+Rx1+fTz76eP54hq9j9r/udz
xJ///+eVn7//vdH8V+Z/ef9+X8Envf/R9sM++n9fK/ia+6Gxl+duRReuftvo
xyv9Xg9//v+Fj0IvH790+ePXp4ctP7zhr9x+29SrRT36fsrzJoeC248rr3+t
rBl5mbW0jguXnz1/1v4iePv5OsMrvSv/PeXflvV71Kesi17fL08tZ7/11fL6
8K5XWX5JYuL/t43N9lit+FODxbuPej3/0/eBb9eeV6SbfO+JVa80egz560Wf
M/14QZ5P1PvxOsOnfH5r9u/4H1/Y+AdzXih3PvLktFvFo+/3Cklfx98keYs9
1/d/+fuNL/98YucVn/61vf95e8FJ/a/C9L8tHz2lT0sSMnu1oKf1396+rrOY
7yXCdvH+9fOrZf0bHT5pf83yB8++v1Auc4FPGrfnr7j8JcMSPWoOKcKp3q9+
cp2F0H+h8Wrfl/hOLP/qjX8w6lUDP559X5/6nOTFV79/fq4k/rfHLSJ88fES
HwvJ3Cnf6V9xpl1NZQtNj2qe14y046mf/TrH6//fUW7i4uJHDw5e/YX8e9jW
Lc49MpN/Kq6vuv1c2WBVrZ6usfzS4+Pa82/71RuqHL3x+5o/rrNn/1fUedXW
fZfQ8lf42ZdkKr4+Z5qwS8SIIY58u+3S2tW+tv6NcX9s5eOeqbxmJDe+a420
O6OHXb346X309XnWZLkzvVj1La9p4vSFjysW/vPqMy87lDILfeB86Z1fqF7N
KyJ8nVlfbE+h673lKxPu92pqX1/Z0EXeg793GN/1//25tOUSU+84N+25Hhzd
4qeOxM85BJY8/PrLEko/KWyqRu0vbXztTi6jCguqOOz79P/ueNRRUnK8jSsx
8Ne+r0HHKV5cs6vfue4XxSeNCT1e5XvlpZP4t2vd7JJzPVZY63fI9l7fPxFt
4qyrzV3pVn5wfW7i8z3DBdnVjf+f/buSo8r72p3JTQ9PhBp8+fe++qb9wnPv
PKg1PHsOmc0tL/uqcdXWW0XQvk+R2RZ57Fcs6aLsi7V9v0eeKssqJFBb5sUq
myxljBH1+Is0PlQs/PY3OlVV3xu10v6rnhOdeaVV/qCyugefdZ2oHE/w5i7T
L2p1LlbhY7G7edD8fF8jzPWfsv9nFlfQGDKtJr8f7ak/Qakx+FnTnjPGao5H
7fSZGw52qSN6VY15RfVXWlOF79n2WMmPPlo8cUZLrbbm8lPLt5J21Wf6d8uE
C/Sf+XnQq2TVZjQV/a9a1DOj6TObUguPynXPyyDxZpc571NFzJf9LhlhHXsf
OflXvv7g9e6TKHe/1DZuHjpJ8IGWTaWvz0Ou44rT1hrlh1X94bqIFI9dZ6uH
jr+657wD+hvjy1180V9+njPb4bzsx7cmylbns893RY14sP25ljJV2uvs6sLT
UMXqUOvFCprdH4r91xy6jO2NH7Syopr88o7aM//sKxTitZL/XTt+5kxXDb7s
f5rqa4Hxt95sv1Tbv15XT6PmTo0ZKqaPOPM6g7J85vffrjvtV730I350Wp5r
UFV29bBKvavpVjXn4SOmqL3o6362XvuQ/dwtpI1P9J+et86di34PaSj/vlK8
16SvY/vKUBntX7OEbifWeter/04Vm5of5beqX1+L6nFlqi7NVlOdYjQVrCm7
uucZArloJlCgb6OHdk/zOHO5nQ621u0gvh5R3U3oNT35vc6unlG72JMUleE7
irXeArOresfS1lJ6f7xUzdqo+mPC+1FbN4p9dgVifxvpv/aQ3dtKkxrxn3b9
uq9AuqkqQ7fbqp2tTnX9Ort6afvoEe1Oq+AQjFHVmol+P0c9zyXOfNz9+Urt
MY/5ufK8ey++v55rTO5eo7HRF77udkSj3J32nHO3yMbkqzMtUNEC8WmqD4z5
2IxOD1qP7KrObvr9dYN9j/iqbLJEEehn9x60CvmFatd9YdkXZ1dFlG81eK9E
dV6VZ1cv/Yf7bHM21tor2Yk+axXD3mXyzceJn7Uv/lvF+lrVXOdv/J5kVx1n
10pxPe5ZAa45UDj59fkWXZEGexSjyCSeHnjMsqunDqddjapjPKsS9z79Gh/z
/tJXXYF+0hp94DJ6QiVZ37vov+L4yQ2zAjpmztUUBW1rZBfftV1yDyvTGuIS
8I77Wd9tlnJP6u06u8yttsw5yj34G7OreT84UbvvafJMy6uejbkCwFzoB8N+
qcfvjvqlVedqRW5ztUGO6feWfl9R64flgl89nrWZIv/pdzC3vpvsaub2PkPN
T9Ni2WuFQ6TC18X9EinHmgmzc70T7bmk2dVvzLjgfvv9sG+P3fiV42qmnocv
Pvq7Ar0Mixg97o2VVw4z3XDf3B02GNH07vPQ0hZuUfdWtfv87x+LKHTa12tJ
TeO1Gqaq+c962xcteVrZc1nj6C3DVZZTP/X/dHZ1z4qd07Q73cc8INP6spZB
j98n7+jfPDOt3zP9oTlE4pJCgxVTNXdqrT+rPKHH8jZDOpJpudWzPlfYZVdX
n35mOu2sXUZYyHPmaL41xvx3lvsUr78w/pk71buF1x7fvjV7ywKz25UcyK5e
3snsSteaqxbbXss6350So1Fz+GwddiAfVzt/fAL5N4lYnZde7KCKxrfs6vWU
nWisyYLRXQGWaXUt1Ct/oUs5E7H45ywXi5o4uO+Mr3oRp2Wa/pfG/sbBNpui
sn71V36fq6CP66xTrqojT0FvmWmB7MrexT/mGOyCzKr6Xp8fd9R72b3e3qo8
H+UprTY6O6rixofSqaqw6d35yGucaZ3Jriq5xdnVo45UxaH7eMbnxFF2zqYt
Wp1vtdnzV3bVfY8S7JseVAUSqeyq9LNldjVpqMsLa+77zzfLaXbgdUtnVy+f
oS9W0aO+g6px+HP0k14l/eud55f2x7npa3tlYb9H/5UriZMXy5pG3alfe5Tr
N+PMELOj7OprtI4SLU91XJpl9PTcx/6h5mCOioXlNFXMVirtdw7SiDB60Rjr
KFL3KKzG95HkgTIyKgs5NpmnQqFbbjKdAjX++2oLTY0VrM2R4LVdo7Hhs8Dy
pneLTOtMdvWIZ3529ecTqMpUtFp6Q/X6YS9lTkRQ7jF/cefidY3dqGsu8sTN
v3zDW4gKUdzsaqoJTlVE78ZQRafqJ23p7wnha5bhSqlFOFQ30jGV599VTvLs
9Tp79VTdq3ilXkXWPk+dfcGtCk9tac+rLuvoVdiExPnpG/2OJutfaJwt/yrf
q5Sds9iO71cLecXKLP7UtBWdXofTXCTToruYrgfLri69HreeiDW7a2lRqF05
mgHU291My6kPdn72jFKb/N2NLdMoZ51u7x3dLhpPNJ/PXdR5jLrYy5wTleOF
FdcnzXKUqN/9xVHrG099DhFlV48VEnv0su9rfxojOh7nb1Z1dPt1eR7yGDHW
rlRsrSzxFQ8rO52s6hoJ7m97mXXZ5l+cWVSF+14XSQ11zpl+/ftyz72C2hEX
d9xBFbRrS3rcsqvyNn3JTasLVQ3v1vjr7zYobstoWHBnx0SaafVW2/F8ez9k
V3MvPiP9BZI5u7r/NYAJnTqOJsyveCeZ1helV0+e9ucFX+MJy8aSSGzx1slm
472dM9anLMFpNsw7LzNO9nqpntXncmx8/U9XPZ7WK88Xozu5Be8iqyrj7TO7
kruoKprdueljYTuivd1yy67G7/iQDIYgdLPex2/8TuhFrG708yby/fkvPLVu
NIv84Zq3G+eDKHKqLLWmfW2to85816SRa7mDqvmYMy2dmQgMau45aFoPHyrO
nr90+u+n5huRQ12q08mdRtVbRyM1V2Mzprz79wUG4wrvNGP/q8F/Ps/ZFT0T
ZJFxxPxpZP1++lfiY/339coaFrkbGeTvoFLYjj2YXSmOZk7N757DTAtGhkue
xebhnn19nvF6ymqm/l7M6XKeev4H/Wv17xkxhD3SrPmVSyr7Krt68j3P27UR
CdcIoTGI+Vnfo/lNhYcUouyKodCFxvMbk/deej+fY1OjT5H1dxbe0Xz+RaA5
d9To7ET+C0IU2KloTXuXirdvzbcepjW1qxe/efLgyNa4wmMyph/3512EwbMN
zN+KINRwHtR5V/l75EFUflTTL9x+4sDPK/X7HH605DgfZFqLrCjNrmZPoRhp
fOMkzbQMqc1V341nzxg/201vX7VFzv5V9e3pavozEhD+kA0izKj29Juzqk6H
PTfXPv3f5rzizJMmy7T6v1v1ragm3WehGTLx+r6a0lc8aonzmOR4Z09v2rHf
6bzIvPvF2DHTUjXUvveTx7+f4G9p8Ryw+jzMMtZW+/Vk2mJ4rimW1Mabu492
WBm+PykbcND7abPOWV7vXfd4QzWgdHCzgPZkO4mW9NvqbjZD/Pd8lsZ3kDq7
0r+Px3WaZFpF3C1aBjQSHkGzOpnd2dnVzMlVCxVdvUO7rEfmcYo/H1Of/kdu
pwicdVB2yMDufzt3pM/qrdc35bdvK8+6vuvo6jOOdnyT0XUZso4hZN60pjFZ
c23zj5lH3Gpn1ShPEe9xLuWc1c1Rb7Q4OIvac6XaohKqnkQ9QO8Zu+qewrg2
xyyzfZy7vLbMd0aeY+cMOal58BrmYyTMCLtoWdVza47u9F0kOfZZ7qmT/cRz
fP+LA9Tjj2daIybWbY5HVFLWvnEdmWVXd//qY8WTs94irjS72Xz+IkwtckV9
O+Vdmdbf1nskLu/Jk9sb9Zv6Vp7+LY8iu6oz0de/ugN1V83peXAfDcqYhOsi
2srIeUi3K2k8d/RmD1WvvyB7P22rZ+PywHXlx90CXtFacBdZVJW70ihVve3a
CMZpvYdVIutGLpV4ml2pGNrZHMsI++zq5bdkZE35tbX7FmKSg3if593qkwea
aT2zK1rjdnE6p3FHW+JpKvZXz55vPO2so4vxp48VMLtyMpTtPugV43W2sfve
hHoLcPb709Kr8R1/rQZv1vP85eXX1unM94syyEQN2xpQU66wm/P6DuxOZ7we
o45erfqllMle0nyxrmZ385lxbpAc43OmetnRFb+xyrir/8I2jQlPrucolWVa
yE/KWq4fVxUHPJbeZvnI7HKej9pcz6dzSxjWlMGdwjx/mD5vsladaZHfzOSI
SDObQXN/9+m/7q4OaEs8rfery9Pjr6bQOstc6xo5ALFC+//vsdrXtR1cP9N9
UK0PdR6vKhJkZh9n67v2Tzzw/elaZ7rN7p35PrKFe0XCsqeSyui/Ri3/3r/K
WmaNmZnWuMLrf6uVPOiVOQWoYdRZ2cd9xqOZ1nMkqNL0bfdxdVubo4lKIfIT
u1YxccTbnHibxNVZV57N11bnVVuUxGC8LL2+qln9ef6YUG7iiFVgWQ5CkCjP
rlBkQPtsQnOanaLIQyLtrWTf0wg/3um5tm2GItdYUf9Nww4lnZj05KKVA7Xq
enVhdsWtpOe2b3vlqooUdT0SWc1jPS91rPbXGaaqZFMTNb1NU7n73vNdP6fO
JrgHOrjy+jzfs21HD5U8FaNgRcvwwrrFkBz01de2f/Ptl9/CefyKieDgr5Xq
3S5APZlzlfzY1vdsU3nfJq52HGSZZH03gNiijlcdByAPJdX+Y7GM5RZIDsDi
TGmOkYFkVx4e+Jz0T/1pDuNk6nHsm7BSG6zPdbXyZGT0UBmjep+wLapa3Sa7
cjItb/d+i7xDZuNn1vVc17856GVXn/55maOq6lboW92H+F6P6ihOuZgay3zB
9eYKu3kNi+ZtHe+gcjD/jomMao5XZ5h7GTF8p5Vw4PR5kVEZfwmikrn8TMvU
9ZFMi2eSraVZ1VUu3ScH88hrLdONebWlZJmWK4cz1S0VGdzs6kymRVFkOsOl
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
b2OwuWtzsygPBSqESui78VevJc2uWMxSPQ755Z/virh/obprnfIspkH+F2Y7
SyXRRPFOPTFHauJBzUjP2t68W1VZYt2P0m51mcdW/Jfj/lpkWT9Uuu10luL9
vKr+faI3auGM9g7xZsp1f0p347/6vYv+vu8p+liPfpw/EM/1uoo+oB68RDb3
V9Ji2/axMdeGlrQf8exMF2l+zgNyTojkz8XHK/XnX9LNqo28htZpEN3eGU7Q
Ulls44tClj2q8pHna6m+/zBc5LR7e2Kx9YFg8/cff849dW6ywRuJ78LLEHqc
jfhtVY/GJoiQdZxCmYPjoZ7/FtaFbD+R+zTPNI7gAOfiRDznslB93NrFwvOg
Nd94MrIrjI2xNmqeNxFvE006zzmdXdW6eXeG++f5z69wvz6pkWVUgn/Zd6Cv
fu9CVLSIph1M8eMLqLm9OdN6by01sDZct8LSbuxJRb2SlspVLDxUenLxxsH3
wtJWceedYx7v7KzTjiOGzoRUL3yLiNvaPst8K25KGxt3nD4OPFs050kWeaR/
XCGhnwtq67xUx/gEG/Psx5uH8I+srtPdO7MrC9E3lnOhCm5fMc+83Z5CNYh6
Psc2hD+0lkSjg4+NisMJVT2f8NHm2coiwfswK7LqMn/qqU03u5W0lC92J5km
xuA83cy0VnGHjRlvFcHIEWTy8d71yckkN5XBeAjk+xR5bjBUophV2evkvdKD
7q8RzLdl39oIV8xXpk9qjjOZQzUywHczR1G1vK6d5BGns6soJo0rre+mPOax
d4zF21JCN27egEIv63fwsOE2iVVCnlBqdTw3LUBYff/mZDU1fafW9HjzvW6f
n3pd9VqTEpYZmpOnO7JkcYf2Igg59eptLdlt5Og3cfz8pyJqjizcCjW/Eh10
dBG52kbe89pUn3JtxzJzajGuDubInlX/FL54VImkiHRYTlDr3bNRjbWaX792
7tr7YzS+YZ5gMn3LTht5HkMx+2xEma0tzjNkNu9YALIwUNWd5vItl9ZPqVX/
aX3+zcRec5OGhcy83jeOgv2Uep7RP7JeP1ZRu7GpMZ4h+mHs0lkNp+3U1by+
Mzok0aV/7/ul9gYnsnD6ro3PyNJrcnpf1/CIZHt8ITjdzGBptO8VoEfBg70O
LxeLsysa7/oeX/v8yRIo7nC0uo1rvuVF4n9vfZon/kR68V2bg+Mp3qR7nG0d
PRk/2t7ijKKnypHfiRBupY/8TRXPegCPJgq+s9eWGookUf6ay9SjrWwNrlza
97VX5uPXNlJ/TDQ6z0U4m+ijzxhZEmlphNruTBx9Mh7Pzarsx/PnlseSX++0
cp7Twxf9FxW7Fh8f+7fBbTCr7v/xTxJF3xcD1HP/bv69gN89prf9TP7e89br
y5p/+OPn3Z7rexqFq7bMRh6cAL3q73U4FWU6K3nrY+WW1ru8bHsesJGpR7t6
s5VJw8PSx6801oihMwBcf0y52Hy+c2hIS1S0+C4r4blrm8d5uDvkLgeyKzSP
MbJHt67PhvsNktAY1Wh9uR49ax8b5pHviQHq+RFljRODVtNxNILevDpPFTm+
dS5BfgPR47N+0uhxHZv/HdPtM7WR6Q3TdRa90Zw/yDwnzwM8mXpnAEo/DK89
KhMloxJ/DDEA91ZVl0vn1Ofncxq9xr6jZdHPkc+5XrbIXZoeRhWQzIMqukHG
4UY1B0kStH19Pree+vnaxnMVIhGOd4aP9loxMsOOT/vkG/gJ17pnhyIvMHc2
dQ+Hz68nFz2+Hfo7pv6z3GmbFhvl0dE5ehC9F9mVGTct/Jk0ovCKWZfyGwNj
kN6mGaGuMDpqiSmJa/vFf1XquMVw7Tvem+IH+rzxMi+7EhSnSDnT3tVgmQTd
nci5HdrlDbjnHnr2z6IHkit9SvDO2ZP1sjfPSWVGccpPqNZTj6rGMI3omKPH
SSwkK3lbDuAhPsdqjVDf7ueF6PQgw6wdGv53cbN6prQUXs9nTo7FYpSeLOlo
NXPm3vWAidfa+ykG67hDeLTQBUuG8OxYzpnPCLNJfenTS8xvyHlRcIsVXiap
LJNjUhtr7P0D6ef7Ss/h9G7DIxgVnxvdPeqvXFa7tS1SulKcfMTXSGG9pefp
ce9GpMwP9PNk4eOsYP8HvR2OuT5PecV/L+VsDYqWRiyMO7qSm/hrhpV25JrX
5ntAwgOzXoo0E3Z5uprwsPWXibNRVmc+e1V7zbn7F3CbeZBUSa9e1548dna/
idJZtbocG9gdjiLLMekoS/LoFzpcq1rjc+yjCS1No2//92lrD+/47D/PXqP1
wPfHWx8hSMxnyu2u5MzAotBurexq5OfA6fj8ht8foei+iThS4sd2mkR7DYdh
1b3zw5nqwLOz1zqC3Ap/WnrWbQuPK7YP3OUQDMs2dm9H7NaWtD99tWV7rCwi
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
mu5G0GhUt6hZtaW7+t6jVZIhpNnVw++WpzxunNrL62zc+NMGcyuKsj3ik9hv
eTY8Mwht7jg20Lk7i3V8M7n3IPmy/K6Y2a4v1Tymsfs0dq3o/ihX1pxT9HNH
Md7kVs98feZ+yWc9gQqhN8aSo9nu9A5b5iWv+pu3izqVimXVqARLNTK4Psu0
fKLG09p/i2bdmNaq3lJXZl4x5vvxLt+JOd7tjsTeInkdjRvm3O0Zke8b1CIo
7fnN3hPVM+YRxCC3zwahnei9rxmfwWgdH97lMe19DfMum9Nyf5chyg7BNc71
c+XacrwxwdJEb068me/7TPHGlcjvvKo6exYyFFjbjDrixdg+we2J3ksn72VR
oG6ZOejGnLGwzNqJhPw52b2RWb6as23k2crLk0TND5+bogQZRc8dFH88g2B2
xlF5mm+wMVNOpM8KobvMQXpShq/M+yQmj5Xo2/v1CRfJLbLYk2F6higbBN/l
70pbGSZmqBDGJRtl27aT+rn6j/wVimrOpMcxL6br31lfP8I4ldV2q9eXcPlq
Yb5NMGvt+P74oWtNScZGe67P6QNUce3LuTcjtLM+I/K5UnaexcStnXL/M/Qa
39JaVZtl5Kv/+chGPX9+41rL2XimZ3v0MU7OHtzJzDdFFIbmNSc7OdXRguC+
E8kSLE1sevbBqZ7Vj85mf/l8udnHEe3ZQ9ccR+5w5cKiesj6UoupW/QoB5m0
hSUrJBFjigG1bidk8CXPuNytPUOH7s2ZOy+UQ4p6pCKiaGce8s5VqX9bvZ6J
fflnF1ey6JjpTvVNLS2LHpojx7K/np0Vb5HHo+Ri0aUH2AtntpT5HKOhfFD9
XZ55dDw7O7UR0X6y9Z4K8xvHizFV288Sz9R+WlAA57DerZAD1Xi7GoiscI1F
Lpfb0xRe5SVRIMseVA+y8p4rel7uxaN9tPbtVPPoc7ix6vOfvTOezKdO6E71
TTlglt7pnY2gCM5RY5qBrdyVgYtFVQ+KfFyTmc8NKxA+yP/qIePx2kLjWt1a
8guk0+VZmQ95XkypEutL+Js53+pTzbI7jfNXOPmAY4UPDm2kGGi7t2nuVNle
rq3onqwnkh40Eud5gvs2852Tdlrz6HPoSU2fmU8zezoliE444FqYEZ9TyTnw
o9hLa3wu/hxf9UxqIRMnnrX56F2tk55epJHb97lpVPXZya5qCYzasXBzWO1P
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
fx1ynzUQ7JipsDOVnWX4CLCbm/si9e93zQSlb9UpKYKd1fDMH6fqWvAuhmzG
gXi/sijnfkoWm47IBJ7JujHxnOQ9+3W40lRJzb7nkZwjtv2XKODefNjqW9uX
njOdZa6pI+9Z1UzyGZzdCu2l0JisW8nUxf9GV2/Lrpx1D72QpLaWUUuH5r1L
q8S+SJHi5Ez9iRbBWJeP4c3yzKO3tooiplp6Wjb2eFaxiPd7zOcrmDg5KxN+
JuvGRMfu9tEx46pu21mqm8fszqe2tF5aZTUli+9ct94syS029/O5mEZiAPMM
PUqh8TbuUCqzrp5ZFuUtjUIkSp2NUy6OJXnvq5R3OJZ5DluxOhOvem73inpu
avH+eqm1de83VH38yiydj9MxmEl4e1+ko+3NwGWSnT8+3sqokHk0H0uikI5l
D6p2zX6gJbE1sVUfdVTcqahqLfmI47599E78INbn9oxop+XfFIiNOziT8VJo
qZGqXv2vZ/T34/LP3hnSjoP53StPuZUwJEk8MvPUXVycfBT5jHVWbiCpvcKR
S2Rt3fvUxqnU01idjVNURk6XuQ+YW8zw8X2um+7j8U5aqUfzscSvBhxYxZtz
mLaNew6t1IdIjz1+61kS/PEwen9G5HDLI9DU6uDMtY3FaX5LC2YNgYw9zXv6
6HjbI3ubj4KbsYGXH8xaY96Cqnpzrr7EP78/5hf5yew/l55r/9Ijb2PDu6yZ
v0761v0jy7VsQmvKiVhbfn1p8XlUy6skXL/yccD1I0qLUNqiwPMzpvL8a3RS
SySmcN3qWQiSTfTIbfPJ6yiSqP6cjm/hM/1fLWzPi29pnazPbjwpRde+T4KU
gx8U2dW2avouWVocLNGMWXlmTQ63eI4rhc4CQU5U0XuO8Ww8s5TMpno+fX27
FjWfRjvS293Q5T7MpdrLQo/np/R9S8GFGYd8TPCjktZnopkJEZ28xdD2IpNO
vVrxQTQz+cGd8uczuRkyz1NixzoCXbSOI6KDC1le0Vszi+G77CA9LQ/iFK3p
oDtUoLetGxpvEtwMZWHb+W/KOXJt9M5WuFsv37PU/5hPpRzxUdUzPR8GaGlG
vpF+XSNtanooD8ASOUEj8VVN6dfzeCdox4WHgtMMvu/t0LVGgUfUsvw40zYZ
4WiJ+/xZP7h8Dn5lnK1X96B0kgxwps8R8Omjiq/rqOwU9h3I6PTYejzxWqz9
ZbzZSMfhNLdz7m0TZqiV7TMof3anDqXamE9tx57OCfjTxGniObUH7iIJlwiR
P5cqOc28tMtTmxHXjRjO+/sz5OhKThTUfF2r58eTDt3cIUPiXi4epcQPPj/7
33a7t3jnkHwWP/5XLVgew3fVri0k6+HxZVi/3I1mVkB7ZDadR1saj5JMreeL
IctJWWgPEbOHebtAWJqDodmzWuvps8NsLL/74UfXedTMaeI55z9bWRJDyhGV
+35e+zvPpXh/FjU36OpyNFCNolbx3qiM6NwhRGJpRxsf0idrqb452tdt70GM
kka0e/p8epHlj7rfPsoSCjvsLfUhbjBw3u5epbhOTt6SdbIsoJPObFfYv7Gl
CjuNYr/yjbPS76009d2M6n5sFqEyj5d24cZv2+rdGw/Uyxi/igbSMmp/Vwx3
+id7JD8mOByd59Dt+99oyYuHXrToV9VlDRNHDqJrabF1+NF5oqE5/SOdx6zX
ql+CH4kklycFjew0lYYD+utU+lZI4BuJLbAswPWd4jOsBc1vz4zzfCORvh8F
ctTlo0msPYH9o/xQJjPTVzM2Hg4kwbCF+OwJS6We6muZ8fKn5UfiD+wM05aj
eW+KSAajjX2/UH8X84S3dW1+NNTSam2oz8C0/I/cG6bvyv4s7oZn5oxiO/qW
Xd2zrGn+BGVIP/9ujbffSX6nzOMaIUd7IyWzBYqUZO0c/59PW1xwxnm+kUjP
jwI56v5q+aFHd7EP8u0gCPXdqTJg3R5qrdjEoHOR/ISlUlsj8Yy2ezGc4k/d
fvSuRGTDs50lODRgtYr3obd1beuVKH7XN4Lufas+LL5z/FG0fGRINTfgcZtd
6XqQr1smyWSfwebTNL15NQ9JhQPKsvV+6jts7a5H7ywkn93zDSbXsd9RT3Aw
m8S+NErtpe2g4zx/Y524flbT2ejzhKVSX/dloSl9fG97hHv7uc9RvMM27CBD
jwKd76no4WRlOhIlK3Hv/J9GMukZwXm8rhRh3LazC4lTP5+frr2eNSuzHrTU
CrkzOtAN77CQug69x3vqvPAk8vS8kEine73Zb43zJo5CBZ317a/T+DTLcnMf
PuVifwKg7E3MX3y+yOFHK5Vgr7rNEE77OtEz0X53QkHnItZW9/lvbqUWNjRi
CPMYiqHcggEmCTQdJYr20/9F9WTmwJGm9W0CrPOtHdazfbY+/a7u7fn2Tivb
ak/mhQTthX1b2ZXvvduaymShZO1q9RwvPj7OZyA0jnuollB1LVbkLZVcm72S
Qs6U17HnASQj9veytgKzMis6hyGON215I3rusoZCW/EORscEgoN4BmTpbhR8
zqdQP6l8KN5EX/tOMcUW9eZctK76zv1TVNay2/ozw7HWM0XNSnsV0+5ulZte
3n3Fc/aNMCHYgZ+UJYl0dMzWIzlKJPbv0cm8ysUnB3WnsezsMItS1MJoT+Vr
RNYvnz6SXcgWm5ilZ/OMY8z7Uc92vqvO0ERxup2BeM/DImBO6kQ/nhvMaMZ9
qOnR7Pj7SkAwRxNVHZrOOlNU1uvaxU0Hxz7f8pgGuGc7lndVq9b7nXlexJtX
0bI5njFhJ0uGN76EXtb1/RyGqvfuGcHeq85FbIJPPs3L6PDeDUeL82sus6v1
LsTXW4JfyTyPN8YNn5aHvzexrF11sGvWYxNUcuNAZhFAIlFu4PUlvtxaZXRu
4WB5TvPRm58XRkiVazOMCa9v5O/ee9yZs6PY+C5vc9Zw4c5cm3tPTN+bK58O
Zq0Mb4jvvEur0qMmjI1rY++KD/n+NqHPRov4E2XA+1h7pUI9JbJCsPdxvd8Z
t+81zIh+h9udjWpt7u2jBMs7O8mofmls9hDVwraKI+QJlCNS72MRQdhELBNq
MZqHfewh/Wr9KNSaqT8pQMQIzrs3n00NxLer3AyI7sP2Usq8cG5NI/LW2vk4
j04mMS8+OPl01aJjThZlqAx71Jv5SGJti1mzjrdWCE7/qQ8bsy57vbS+8vP8
dlMYiTw8xRbUWwKw7sTCHLSY+nt+zLFccTjaN68SmWfQLCLkNkGfdLbS9515
3Nq9Rqrc1ub57u+SHa4vF6aT1J88yRKaaY5wEr2JDWirdWbYae/5PpWi4Cw6
O6nWkObTxXtpO1NFa7DsYe9F7Wvs2dWMhkhxwlN8K2T5K+Xs8Z7txOB5oYp/
qsKm/Dzx4brlHF772nXygVl/uR9zLFccZvZNUMrjomrNbYLisNKX3PUsz4K6
2d2TrJa/VPPBWZ6fQ/iekPqTJ1mv/xzf9lJybOnzuUereVzGr+VRGPUdVDtg
l8udDecvqmitb2md6OnboZp3q0NdxUryAI+fREIqluywPPOAukV5fJbds4jo
RIJiJUf8eJCdnw1H1tHN2eOFsuvHDNY9jRMRzeUgnaWOhF52peK7x0WGedQK
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
zqQ0c0/4fPr/APlNJko=
            "], 1, 1]]}], ImageSize -> Large], 
      "Specifications" :> {{$CellContext`i$$, 1, 201, 1, AnimationRunning -> 
         False, AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{658., {55., 62.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7306547609837775`*^9, 3.730705183547659*^9, 
  3.730801148235507*^9},ExpressionUUID->"691387b5-8b80-4880-8fc0-\
ae412c723dc9"]
}, Open  ]],

Cell["\<\
This function creates an animation of the road with multiple lanes shown \
parallel to each other.

Creating an ArrayPlot for multiple lanes proved more challenging though, as \
ArrayPlots cannot be made 3 dimensional. The following function shows \
distinct plots, each corresponding to a different lane of the road.\
\>", "Text",
 CellChangeTimes->{{3.7306548191118526`*^9, 3.7306548885687227`*^9}, {
  3.7306549685063553`*^9, 3.7306549797151966`*^9}, {3.7306550887427626`*^9, 
  3.7306551052839932`*^9}},ExpressionUUID->"54bcbeed-b574-4153-a382-\
13273c90aeda"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"createMultiPlot", "[", "trafficin_List", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"createArrayPlot", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", "trafficin", "]"}], "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"trafficin", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"createMultiPlot", "[", "testMultiTraffic", "]"}]}], "Input",
 CellChangeTimes->{{3.7306545053058634`*^9, 3.7306545121223245`*^9}, {
  3.730654811271378*^9, 3.7306548133435235`*^9}, {3.7306549853275857`*^9, 
  3.730654998160409*^9}, {3.7306550339109917`*^9, 
  3.730655034502961*^9}},ExpressionUUID->"9d35282c-bbd2-445d-a550-\
aaf26bc7ec73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[RasterBox[CompressedData["
1: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
B7wSYcipWBr6Ai9J3tY+wvpS/kL3B1KCyqo=
     "], {{0, 0}, Offset[{600, 402}, {0, 0}]}, {0, 1}],
    AspectRatio->Automatic,
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->{600, 402},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
    PlotRange->{{0, 600}, {0, 402}},
    PlotRangeClipping->True], ",", 
   GraphicsBox[RasterBox[CompressedData["
1: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
     "], {{0, 0}, Offset[{600, 402}, {0, 0}]}, {0, 1}],
    AspectRatio->Automatic,
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->{600, 402},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
    PlotRange->{{0, 600}, {0, 402}},
    PlotRangeClipping->True], ",", 
   GraphicsBox[RasterBox[CompressedData["
1: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
mlGuP4p8fZ/kOrprgtJUovS/FnHLIw==
     "], {{0, 0}, Offset[{600, 402}, {0, 0}]}, {0, 1}],
    AspectRatio->Automatic,
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->{600, 402},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
    PlotRange->{{0, 600}, {0, 402}},
    PlotRangeClipping->True], ",", 
   GraphicsBox[RasterBox[CompressedData["
1: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
     "], {{0, 0}, Offset[{600, 402}, {0, 0}]}, {0, 1}],
    AspectRatio->Automatic,
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->{600, 402},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
    PlotRange->{{0, 600}, {0, 402}},
    PlotRangeClipping->True]}], "}"}]], "Output",
 CellChangeTimes->{
  3.730654512890377*^9, {3.7306545539972625`*^9, 3.7306545698983927`*^9}, 
   3.73065472224106*^9, 3.7306550012006254`*^9, 3.730655080294189*^9, 
   3.7307051838585725`*^9, 
   3.730801148678085*^9},ExpressionUUID->"86159179-2365-44da-968b-\
6e855a4d6b76"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2018. Mar. 17 - Simulations and plotting", "Subsubsection",
 CellChangeTimes->{{3.7308004824969254`*^9, 
  3.730800503136279*^9}},ExpressionUUID->"321ca8b6-c5d7-42b5-84e6-\
624b532c9592"],

Cell["\<\
On March 17, simulation results were generated and plotted for the for the \
report first draft. \
\>", "Text",
 CellChangeTimes->{{3.730800609666667*^9, 
  3.7308006466572356`*^9}},ExpressionUUID->"ae04ac36-56ef-47a0-b717-\
700bc5026879"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"through", "=", 
   RowBox[{"Parallelize", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Mean", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"totalThroughput", "[", 
            RowBox[{"generateTraffic", "[", 
             RowBox[{
             "\"\<random\>\"", ",", "i", ",", "5", ",", ".1", ",", "200", ",",
               "100"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "1", ",", "10"}], "}"}]}], "]"}], "]"}]}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0.01", ",", "0.35", ",", "0.01"}], "}"}]}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"speed", "=", 
   RowBox[{"Parallelize", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Mean", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"averageSpeed", "[", 
            RowBox[{"generateTraffic", "[", 
             RowBox[{
             "\"\<random\>\"", ",", "i", ",", "5", ",", ".1", ",", "200", ",",
               "100"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "1", ",", "10"}], "}"}]}], "]"}], "]"}]}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0.01", ",", "0.35", ",", "0.01"}], "}"}]}], "]"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7308008812682185`*^9, 3.73080096035058*^9}, {
  3.7308015436026587`*^9, 
  3.7308015448861027`*^9}},ExpressionUUID->"bc0e4ca0-07f9-4606-8292-\
3e6f9ab56e75"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lp1", "=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"through", ",", 
     RowBox[{"Joined", "\[Rule]", "True"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"ImagePadding", "\[Rule]", "50"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<density\>\"", ",", "\"\<throughput\>\""}], "}"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lp2", "=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"speed", ",", 
     RowBox[{"Joined", "\[Rule]", "True"}], ",", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{".35", ",", "0"}], "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Orange"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"ImagePadding", "\[Rule]", "50"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<density\>\"", ",", "\"\<avg. speed\>\""}], "}"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Overlay", "[", 
  RowBox[{"{", 
   RowBox[{"lp1", ",", "lp2"}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.730801267245847*^9, 3.7308013512068624`*^9}, {
  3.730801758952224*^9, 
  3.730801908208891*^9}},ExpressionUUID->"490e89e8-65b5-4627-8423-\
e266c734c1d8"],

Cell[BoxData[
 OverlayBox[{
  GraphicsBox[{{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBmIQXS2yzv1hVYt9GhgoO0D4U+ybth+zEEgwdtgh1/o6
cMc8+9Wh5+OlpWyh8kvsrd/Izd7n4ewwayYIrLQ/ewYIeDyg6tfZf5DnvCf1
2McByAGKbLSfweZ9RtTW36EKrH+LfY0yl4/V10AHruuLC2y5tttnpV9p3VES
6gA2buZO+1WVE3bXXQt30IjpP/RVY4+98VHhhymMkVDz99kfOtmUd80xxmEJ
UPf1xQfslcr/5mwMinN4A7bvoP2Mkiy5J3YJDibGIHDYHugYhwbuRKj7j9hb
1f33+HAt0eHwV5ANR+25mb3ivmklOXCD3XPc/vH3fpZ83iSHYLCFJ+yl9gmy
qvUmQv170n6v6bFGhvJEh0dgD52yF94DFGhIdNAEu/eMvbBWqERAUqJDIch5
BWftX3X7fHTRSHTYCXb/OXtBP7GSzXyJDgxgcMG+2PV9xs8rCVD/XLD/f+tC
i9fWBAePhyALLtp37VxUvqUnAeq/i/avnGKkdAITHCYcAnngkn0ro6p+tWiC
A9i7xpch8hvjHcDeuX7Z3unk6bi1UvFQ/1+xNwM6f/v5OAd5kHPkrtoX9923
F5oTBw2Pq/azQPElG+eQDk4X1yDmT411AADsUfzD
       "]]}}, {}, {}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox["\"density\"", TraditionalForm], 
     FormBox["\"throughput\"", TraditionalForm]},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->50,
   ImageSize->Large,
   Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0, 0.35000000000000003`}, {0, 145.34257425742575`}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], 
  GraphicsBox[{{}, {{}, {}, 
     {RGBColor[1, 0.5, 0], PointSize[0.012833333333333334`], 
      AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBmIQXS2yzv1hVYu9gdFR4Ycpwg4Q/hT7Robt/Jrpwg47
5FpfB+6YZ1/lfnr53ECY/BL75rxrid8jhB1mzQSBlfa/sp2FtUJh6tfZt4Qx
VHG5CTsAOUCRjfb6X5yASNihCqx/i/05x+SJ80yEHbiuLy6w5dpuLyD7p6Vd
StgBbNzMnfbe4fU/Lv4VctCI6T/0VWOP/c5951f5/BCCmr/P/lZS6g+3K0IO
S4C6ry8+YP+ssuka+2ohhzdg+w7aB9yY/cKnTcjBxBgEDtv3rVNVnuAoBHX/
EXu5J+vm6z4TdDj8FWTDUftTHv/DC/UFHbjB7jlur3LSNzqbT8AhGGzhCfvs
5emdbBt5of49aW+3WjjsdyuPwyOwh07Z8zKVf7u2mctBE+zeM/b62me/HHDn
dCgEOa/grP33WeLnTe6wO+wEu/+cfVxKl/qhTjYHBjC4YF87Y4EAz1xWqH8u
2IdNCdndM5vFweMhyIKL9n+i2lhce5ih/rto/+vIgpw5BUwOEw6BPHDJfnbS
7+dLbzI6gL1rfNl+ffqcL2GsjA5g71y/bK/ZU6x1xIYB6v8r9qVZwBC4/89e
HuQcuav2J4JeT1yb+tceEh5X7We/9pY74fjHPj0NBK7Z32t7MM1X8rc9AHle
AKc=
       "]]}}, {}, {}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox["\"density\"", TraditionalForm], 
     FormBox["\"avg. speed\"", TraditionalForm]},
   AxesOrigin->{0.35, 0.},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->50,
   ImageSize->Large,
   Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0, 0.35}, {0., 4.850742574257425}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}]}]], "Output",
 CellChangeTimes->{{3.7308018071440525`*^9, 3.7308018277623596`*^9}, {
  3.7308018853748646`*^9, 
  3.7308019087829866`*^9}},ExpressionUUID->"8b1e695e-b9ff-4afe-b685-\
150146bb0dfa"]
}, Open  ]],

Cell["\<\
The Overlay function was used to plot separate aspects of the data on the \
same graph, with separate Y axes. \
\>", "Text",
 CellChangeTimes->{{3.7308059788760257`*^9, 3.7308060465150547`*^9}, {
  3.730808814506985*^9, 
  3.730808834505151*^9}},ExpressionUUID->"807a928f-7f55-4772-a3c2-\
a27870e65257"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2018. Mar. 21 - 23", "Subsubsection",
 CellChangeTimes->{{3.7308088541576443`*^9, 3.7308088635358706`*^9}, 
   3.7308088957001314`*^9},ExpressionUUID->"e1e52f22-ea81-4472-a843-\
a37abb4b236c"],

Cell["\<\
The traffic simulations were generated and analysed in the days 21-23 of \
March. Single lane and single variable simulations were run with high number \
of iterations on my laptop, on an Intel i7-5500U CPU with four parallel \
threads. simpler simulations took only a few minutes to run, and could be \
plotted and evaluated almost instantly. 
Simulations with multiple variables and multiple lanes were run on my \
flatmate\[CloseCurlyQuote]s PC, on an Intel i7-6700K, with 8 parallel \
threads. The higher clockspeed and double the core count made the simulations \
run approximately 4 times faster. Still, simulations for section Three and \
Four took between 30 minutes and 4 hours to run.
The report was written on these 3 days as well, including plotting and \
evaluating the results gathered.\
\>", "Text",
 CellChangeTimes->{{3.7308089182540636`*^9, 3.730809092774335*^9}, {
  3.730809151971795*^9, 3.7308093515238757`*^9}, {3.7308094397657604`*^9, 
  3.730809474663509*^9}},ExpressionUUID->"353f7b8e-05c9-4149-92f4-\
dc0ea30a06d0"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 1007},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification:>1.05 Inherited,
FrontEndVersion->"11.2 for Microsoft Windows (64-bit) (September 10, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 227, 7, 229, "Title",ExpressionUUID->"8858dda4-f4d7-4782-860f-7a9368ded1c8"],
Cell[CellGroupData[{
Cell[832, 33, 763, 20, 97, "Input",ExpressionUUID->"766f142e-b349-4954-9ea2-12dd0743db7d"],
Cell[1598, 55, 348, 8, 23, "Message",ExpressionUUID->"ee4dcc1e-fa20-44cd-b8f9-c87677884d3b"]
}, Open  ]],
Cell[1961, 66, 1351, 21, 128, "Text",ExpressionUUID->"e13be771-4f13-4d2a-bac8-4dea3acee8d5"],
Cell[CellGroupData[{
Cell[3337, 91, 165, 3, 46, "Subsubsection",ExpressionUUID->"2ae6912b-93ab-450f-a30d-0b2f3d4cf02e"],
Cell[3505, 96, 598, 10, 35, "Text",ExpressionUUID->"f46cdc34-2d5c-4ab7-804a-7c1e081c645c"],
Cell[CellGroupData[{
Cell[4128, 110, 495, 13, 75, "Input",ExpressionUUID->"d9b37fea-9315-4ae8-8843-0457013d65ae"],
Cell[4626, 125, 327, 7, 35, "Output",ExpressionUUID->"8c1a0f7f-c0db-41eb-a5e6-49c2a73d4c3f"],
Cell[4956, 134, 321, 7, 35, "Output",ExpressionUUID->"c3a1929c-67a8-4252-8aeb-94c7a3b6a0c2"],
Cell[5280, 143, 321, 7, 35, "Output",ExpressionUUID->"59a753b2-2f36-42c6-8cce-3fa61f4b5c6a"]
}, Open  ]],
Cell[5616, 153, 573, 11, 59, "Text",ExpressionUUID->"7d47da4e-e00c-4ad3-b043-98c7cba46501"],
Cell[6192, 166, 2060, 57, 97, "Input",ExpressionUUID->"90fcef68-8f83-4e36-81c0-4babe48f1f52"],
Cell[8255, 225, 803, 13, 82, "Text",ExpressionUUID->"ea323b96-0a2d-4432-8358-caf7751eafb8"],
Cell[9061, 240, 2241, 62, 229, "Input",ExpressionUUID->"0f01e457-7ee4-43cc-a6cb-bd78ee44ccc8"],
Cell[11305, 304, 448, 8, 59, "Text",ExpressionUUID->"72fb3f07-efba-43cf-9970-04c08db95b9e"],
Cell[11756, 314, 939, 20, 221, "Text",ExpressionUUID->"d1efd3ad-4fa0-4211-af19-c2b9f772a465"],
Cell[12698, 336, 4439, 129, 207, "Input",ExpressionUUID->"275ed4c3-6a45-4d36-b56d-f9a608f9d9fe"],
Cell[17140, 467, 1035, 17, 105, "Text",ExpressionUUID->"4c5d2ac6-000a-45e4-96b7-167a914a0fa9"],
Cell[18178, 486, 1798, 47, 207, "Input",ExpressionUUID->"8c1ae1cb-c058-4a0b-88b0-5143426ad7a5"],
Cell[19979, 535, 650, 12, 82, "Text",ExpressionUUID->"b5d3049a-9c12-4ca6-87a5-41f035a4062f"],
Cell[20632, 549, 457, 9, 35, "Text",ExpressionUUID->"4aaac5c1-4875-4ce1-9fd0-eadaa69f2866"],
Cell[CellGroupData[{
Cell[21114, 562, 821, 22, 53, "Input",ExpressionUUID->"c884a737-1edc-4f7d-85f6-6af179585cbf"],
Cell[21938, 586, 1683, 29, 71, "Output",ExpressionUUID->"4c599735-6703-4989-8912-b4a7a1cc1eb5"],
Cell[23624, 617, 1690, 29, 71, "Output",ExpressionUUID->"eccdf8be-8111-45cf-8254-571fd50df650"]
}, Open  ]],
Cell[25329, 649, 313, 7, 35, "Text",ExpressionUUID->"64ece4b5-0590-4041-8d25-8b9b656c6ff2"],
Cell[CellGroupData[{
Cell[25667, 660, 2186, 54, 141, "Input",ExpressionUUID->"de739df4-bec4-414c-894b-2db319ef194b"],
Cell[27856, 716, 9463, 162, 650, "Output",ExpressionUUID->"3f3fd270-535a-484c-98a3-ca810198f2d9"],
Cell[37322, 880, 29068, 488, 131, "Output",ExpressionUUID->"8d972004-9d4d-4729-b760-f241ba0ea180"]
}, Open  ]],
Cell[66405, 1371, 717, 12, 82, "Text",ExpressionUUID->"6ea148aa-d517-4b09-a65a-0b0f83fd7e3e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67159, 1388, 165, 3, 46, "Subsubsection",ExpressionUUID->"476e8dbd-6dc8-4617-92f6-2b695aa60a00"],
Cell[67327, 1393, 372, 7, 35, "Text",ExpressionUUID->"76f7e08a-7ab8-4746-bc1c-9f9781d0c8ef"],
Cell[67702, 1402, 3620, 100, 295, "Input",ExpressionUUID->"e11eba79-343e-4790-9c8d-657c117370d9"],
Cell[71325, 1504, 929, 18, 174, "Text",ExpressionUUID->"8b67a9df-4876-4fae-97f8-fba422f27547"],
Cell[72257, 1524, 433, 8, 35, "Text",ExpressionUUID->"0c82a66a-cca6-45af-850c-818dc5dd907f"],
Cell[72693, 1534, 7081, 194, 427, "Input",ExpressionUUID->"122de7a9-6f6e-4b90-bcc6-bfbc7aad7b15"],
Cell[79777, 1730, 367, 8, 35, "Text",ExpressionUUID->"9db6478e-78c9-46da-aa9e-8a7506ceb42c"],
Cell[CellGroupData[{
Cell[80169, 1742, 304, 6, 53, "Input",ExpressionUUID->"138ea30b-21d9-49af-86ed-117a17f87362"],
Cell[80476, 1750, 9428, 161, 650, "Output",ExpressionUUID->"5340d54a-e195-43a1-81b4-4690f2fcb8da"],
Cell[89907, 1913, 27890, 468, 131, "Output",ExpressionUUID->"bd20ba6c-e4dc-4bb2-ad80-18f1094917c3"]
}, Open  ]],
Cell[117812, 2384, 529, 10, 59, "Text",ExpressionUUID->"fa455812-b880-45b8-8b7f-73456a97b461"],
Cell[118344, 2396, 470, 13, 30, "Input",ExpressionUUID->"169d59fb-9409-4bce-adbb-77cd2b2eb8ad"],
Cell[118817, 2411, 600, 11, 82, "Text",ExpressionUUID->"fd990f56-dfa0-4615-913e-fb4825b68fff"],
Cell[119420, 2424, 645, 18, 30, "Input",ExpressionUUID->"8932d29f-d50b-4740-9354-1a172bc4e96e"],
Cell[120068, 2444, 908, 15, 59, "Text",ExpressionUUID->"00de7130-376b-4d0a-bff9-ea73c3ce17a6"],
Cell[120979, 2461, 395, 10, 30, "Input",ExpressionUUID->"c0772110-9771-4c2e-9c7b-1c52102808f0"],
Cell[121377, 2473, 442, 9, 59, "Text",ExpressionUUID->"5c35e0a9-7a72-4735-9386-fb3177155fca"],
Cell[121822, 2484, 639, 10, 59, "Text",ExpressionUUID->"893a0f35-3847-4cb4-b6f6-22fd25822396"],
Cell[122464, 2496, 912, 25, 30, "Input",ExpressionUUID->"a45ebde8-4e8b-4d9e-b69f-1730b7c06c7d"],
Cell[CellGroupData[{
Cell[123401, 2525, 471, 12, 30, "Input",ExpressionUUID->"53aea737-da82-45a7-81f3-61f9ab48b602"],
Cell[123875, 2539, 2109, 51, 339, "Output",ExpressionUUID->"ec22508f-cb69-4443-9b83-9d36cc6ba78c"]
}, Open  ]],
Cell[125999, 2593, 1060, 18, 128, "Text",ExpressionUUID->"004f3c99-e3a5-4fa0-810e-6acb30cbea04"],
Cell[127062, 2613, 937, 24, 30, "Input",ExpressionUUID->"1d8a72b5-e7f1-4caa-9bd8-0d239b76559d"],
Cell[128002, 2639, 293, 6, 30, "Input",ExpressionUUID->"34ddcc40-bdb9-446a-8445-166f592e637b"],
Cell[CellGroupData[{
Cell[128320, 2649, 1156, 28, 53, "Input",ExpressionUUID->"77375d35-22f9-4f80-bdfc-4b05858a2fa8"],
Cell[129479, 2679, 80597, 1330, 350, "Output",ExpressionUUID->"d5b75eb0-a782-43dc-b7dc-428e1aa2b380"],
Cell[210079, 4011, 4816, 97, 256, "Output",ExpressionUUID->"89d5204f-b9d0-4e75-aff9-d26d332a43c8"]
}, Open  ]],
Cell[214910, 4111, 347, 7, 35, "Text",ExpressionUUID->"55ee5eaa-c195-46bd-9fe9-91487ceb5d68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215294, 4123, 264, 4, 46, "Subsubsection",ExpressionUUID->"70a62a86-d02d-4441-bf81-2322091c40f8"],
Cell[215561, 4129, 1192, 18, 105, "Text",ExpressionUUID->"e7207977-4a7d-46ae-8901-9375061c2b01"],
Cell[CellGroupData[{
Cell[216778, 4151, 3813, 94, 449, "Input",ExpressionUUID->"56e7cd26-97d8-49bd-9a7d-47ee879a113f"],
Cell[220594, 4247, 472, 10, 23, "Message",ExpressionUUID->"2c169192-b3e5-4061-94c6-bdc5e033a1eb"]
}, Open  ]],
Cell[221081, 4260, 656, 10, 59, "Text",ExpressionUUID->"3374a20d-ecc3-4874-a591-dcf674b9ffc8"],
Cell[CellGroupData[{
Cell[221762, 4274, 13206, 383, 295, "Input",ExpressionUUID->"643d701e-42f0-4e5d-8ea9-49458426416e"],
Cell[234971, 4659, 472, 10, 23, "Message",ExpressionUUID->"f8b6e3ce-c876-4764-9eeb-13a3caa0368c"],
Cell[235446, 4671, 472, 10, 23, "Message",ExpressionUUID->"91253b0a-0f8d-49c5-9894-c04b2f09bf8f"],
Cell[235921, 4683, 472, 10, 23, "Message",ExpressionUUID->"880fd6fe-4a04-4a30-885b-544e36d85dde"],
Cell[236396, 4695, 470, 10, 23, "Message",ExpressionUUID->"4e4ae07a-9cc6-4042-ae8c-8b2b1a25c0ff"],
Cell[236869, 4707, 470, 10, 23, "Message",ExpressionUUID->"6a11c71b-630e-41de-8b29-7413c00ee42e"],
Cell[237342, 4719, 472, 10, 23, "Message",ExpressionUUID->"2da9e986-a739-4bb6-b377-8c3f34c5d429"],
Cell[237817, 4731, 472, 10, 23, "Message",ExpressionUUID->"9c01b1a9-35d5-4c13-9dce-ee0f3aae80d3"]
}, Open  ]],
Cell[238304, 4744, 996, 15, 82, "Text",ExpressionUUID->"9c28f7a3-9a31-4d39-af27-55653060ddab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239337, 4764, 186, 3, 46, "Subsubsection",ExpressionUUID->"e36ed1c0-38a5-49dc-be93-09cdac233670"],
Cell[239526, 4769, 2480, 34, 198, "Text",ExpressionUUID->"53d6b46e-4909-4445-98b6-b5b905541fec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[242043, 4808, 238, 4, 46, "Subsubsection",ExpressionUUID->"58074de9-f360-4324-a2e6-c40143262217"],
Cell[242284, 4814, 1010, 26, 119, "Input",ExpressionUUID->"b4ce99d6-d15e-4939-8e86-8e1d623a87fa"],
Cell[243297, 4842, 495, 9, 59, "Text",ExpressionUUID->"1d0f5af8-ccd6-49ee-b739-d18d4f218127"],
Cell[243795, 4853, 1149, 31, 75, "Input",ExpressionUUID->"daa2b236-45f4-4d65-858a-c94ee07a32ce"],
Cell[244947, 4886, 424, 8, 35, "Text",ExpressionUUID->"a11351b8-3581-4424-abea-7921c71dc41e"],
Cell[245374, 4896, 4567, 127, 273, "Input",ExpressionUUID->"ad9e8c8f-c02a-4179-8e44-83f1593b3b65"],
Cell[249944, 5025, 906, 14, 59, "Text",ExpressionUUID->"cf27ff4b-a3a7-40fc-947c-ce3563b10001"],
Cell[250853, 5041, 11498, 304, 427, "Input",ExpressionUUID->"205681d9-a00c-484b-90af-ad7ae6698761"],
Cell[262354, 5347, 1658, 24, 128, "Text",ExpressionUUID->"e3e9e33e-7da3-4046-be8e-df04c50017c8"],
Cell[264015, 5373, 2416, 59, 207, "Input",ExpressionUUID->"29ef70d9-d983-4b9e-85b3-e4ed6ad54815"],
Cell[266434, 5434, 465, 9, 59, "Text",ExpressionUUID->"a5a797fd-4670-481f-925d-0e00b23cef68"],
Cell[266902, 5445, 787, 22, 30, "Input",ExpressionUUID->"93f7b26b-129a-47ea-8205-c5219ec97ea4"],
Cell[267692, 5469, 427, 8, 35, "Text",ExpressionUUID->"edf25d6c-0ae8-41ed-95e9-98d5a8e2f7b9"],
Cell[268122, 5479, 973, 27, 75, "Input",ExpressionUUID->"6841ee82-834e-440a-9ed4-7184c292c109"],
Cell[269098, 5508, 350, 7, 35, "Text",ExpressionUUID->"16017976-90d6-4e24-926a-1ac522bd882e"],
Cell[CellGroupData[{
Cell[269473, 5519, 1767, 40, 75, "Input",ExpressionUUID->"e880e7c6-e2c3-45ce-a77b-2d01685ba48f"],
Cell[271243, 5561, 117336, 1937, 137, "Output",ExpressionUUID->"691387b5-8b80-4880-8fc0-ae412c723dc9"]
}, Open  ]],
Cell[388594, 7501, 574, 11, 82, "Text",ExpressionUUID->"54bcbeed-b574-4153-a382-13273c90aeda"],
Cell[CellGroupData[{
Cell[389193, 7516, 896, 21, 75, "Input",ExpressionUUID->"9d35282c-bbd2-445d-a550-aaf26bc7ec73"],
Cell[390092, 7539, 24907, 433, 898, "Output",ExpressionUUID->"86159179-2365-44da-968b-6e855a4d6b76"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[415048, 7978, 193, 3, 46, "Subsubsection",ExpressionUUID->"321ca8b6-c5d7-42b5-84e6-624b532c9592"],
Cell[415244, 7983, 249, 6, 35, "Text",ExpressionUUID->"ae04ac36-56ef-47a0-b717-700bc5026879"],
Cell[415496, 7991, 1640, 46, 53, "Input",ExpressionUUID->"bc0e4ca0-07f9-4606-8292-3e6f9ab56e75"],
Cell[CellGroupData[{
Cell[417161, 8041, 1303, 33, 75, "Input",ExpressionUUID->"490e89e8-65b5-4627-8423-e266c734c1d8"],
Cell[418467, 8076, 4067, 100, 432, "Output",ExpressionUUID->"8b1e695e-b9ff-4afe-b685-150146bb0dfa"]
}, Open  ]],
Cell[422549, 8179, 313, 7, 35, "Text",ExpressionUUID->"807a928f-7f55-4772-a3c2-a27870e65257"]
}, Open  ]],
Cell[CellGroupData[{
Cell[422899, 8191, 198, 3, 46, "Subsubsection",ExpressionUUID->"e1e52f22-ea81-4472-a843-a37abb4b236c"],
Cell[423100, 8196, 1051, 17, 128, "Text",ExpressionUUID->"353f7b8e-05c9-4149-92f4-dc0ea30a06d0"]
}, Open  ]]
}, Open  ]]
}
]
*)

